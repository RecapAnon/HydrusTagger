// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using HydrusAPI.NET.Client;
using HydrusAPI.NET.Model;
using System.Diagnostics.CodeAnalysis;

namespace HydrusAPI.NET.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAddFilesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AddFilesApiEvents Events { get; }

        /// <summary>
        /// Import a file into the client
        /// </summary>
        /// <remarks>
        /// Tells the client to import a file either by path or raw bytes. Requires the \&quot;Import Files\&quot; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFilesAddFileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesAddFileApiResponse"/>&gt;</returns>
        Task<IAddFilesAddFileApiResponse> AddFilesAddFileAsync(AddFilesAddFileRequest addFilesAddFileRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import a file into the client
        /// </summary>
        /// <remarks>
        /// Tells the client to import a file either by path or raw bytes. Requires the \&quot;Import Files\&quot; permission.
        /// </remarks>
        /// <param name="addFilesAddFileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesAddFileApiResponse"/>?&gt;</returns>
        Task<IAddFilesAddFileApiResponse?> AddFilesAddFileOrDefaultAsync(AddFilesAddFileRequest addFilesAddFileRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Archive inboxed files
        /// </summary>
        /// <remarks>
        /// Tell the client to archive inboxed files.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesArchiveFilesApiResponse"/>&gt;</returns>
        Task<IAddFilesArchiveFilesApiResponse> AddFilesArchiveFilesAsync(ArchiveFilesRequest archiveFilesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Archive inboxed files
        /// </summary>
        /// <remarks>
        /// Tell the client to archive inboxed files.
        /// </remarks>
        /// <param name="archiveFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesArchiveFilesApiResponse"/>?&gt;</returns>
        Task<IAddFilesArchiveFilesApiResponse?> AddFilesArchiveFilesOrDefaultAsync(ArchiveFilesRequest archiveFilesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Clear file deletion record
        /// </summary>
        /// <remarks>
        /// Tell the client to forget that it once deleted files.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearFileDeletionRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesClearFileDeletionRecordApiResponse"/>&gt;</returns>
        Task<IAddFilesClearFileDeletionRecordApiResponse> AddFilesClearFileDeletionRecordAsync(ClearFileDeletionRecordRequest clearFileDeletionRecordRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Clear file deletion record
        /// </summary>
        /// <remarks>
        /// Tell the client to forget that it once deleted files.
        /// </remarks>
        /// <param name="clearFileDeletionRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesClearFileDeletionRecordApiResponse"/>?&gt;</returns>
        Task<IAddFilesClearFileDeletionRecordApiResponse?> AddFilesClearFileDeletionRecordOrDefaultAsync(ClearFileDeletionRecordRequest clearFileDeletionRecordRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete files from the client.
        /// </summary>
        /// <remarks>
        /// Sends specified files to the trash or performs physical deletion based on the file domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFilesDeleteFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesDeleteFilesApiResponse"/>&gt;</returns>
        Task<IAddFilesDeleteFilesApiResponse> AddFilesDeleteFilesAsync(AddFilesDeleteFilesRequest addFilesDeleteFilesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete files from the client.
        /// </summary>
        /// <remarks>
        /// Sends specified files to the trash or performs physical deletion based on the file domain.
        /// </remarks>
        /// <param name="addFilesDeleteFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesDeleteFilesApiResponse"/>?&gt;</returns>
        Task<IAddFilesDeleteFilesApiResponse?> AddFilesDeleteFilesOrDefaultAsync(AddFilesDeleteFilesRequest addFilesDeleteFilesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate hashes for an arbitrary file
        /// </summary>
        /// <remarks>
        /// Generate hashes for an arbitrary file. You can either send the file&#39;s path or the file&#39;s raw bytes.  Restricted access: YES (Import Files permission needed)  Required Headers: - Content-Type: &#x60;application/json&#x60; (if sending path) - Content-Type: &#x60;application/octet-stream&#x60; (if sending file bytes) 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFilesGenerateHashesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesGenerateHashesApiResponse"/>&gt;</returns>
        Task<IAddFilesGenerateHashesApiResponse> AddFilesGenerateHashesAsync(AddFilesGenerateHashesRequest addFilesGenerateHashesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate hashes for an arbitrary file
        /// </summary>
        /// <remarks>
        /// Generate hashes for an arbitrary file. You can either send the file&#39;s path or the file&#39;s raw bytes.  Restricted access: YES (Import Files permission needed)  Required Headers: - Content-Type: &#x60;application/json&#x60; (if sending path) - Content-Type: &#x60;application/octet-stream&#x60; (if sending file bytes) 
        /// </remarks>
        /// <param name="addFilesGenerateHashesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesGenerateHashesApiResponse"/>?&gt;</returns>
        Task<IAddFilesGenerateHashesApiResponse?> AddFilesGenerateHashesOrDefaultAsync(AddFilesGenerateHashesRequest addFilesGenerateHashesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Copy files from one local file domain to another.
        /// </summary>
        /// <remarks>
        /// This endpoint migrates files (by hash or ID) from one local file domain to another or multiple domains. Restricted to users with the Import Files permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrateFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesMigrateFilesApiResponse"/>&gt;</returns>
        Task<IAddFilesMigrateFilesApiResponse> AddFilesMigrateFilesAsync(MigrateFilesRequest migrateFilesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Copy files from one local file domain to another.
        /// </summary>
        /// <remarks>
        /// This endpoint migrates files (by hash or ID) from one local file domain to another or multiple domains. Restricted to users with the Import Files permission.
        /// </remarks>
        /// <param name="migrateFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesMigrateFilesApiResponse"/>?&gt;</returns>
        Task<IAddFilesMigrateFilesApiResponse?> AddFilesMigrateFilesOrDefaultAsync(MigrateFilesRequest migrateFilesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unarchive files by putting them back into the inbox.
        /// </summary>
        /// <remarks>
        /// This endpoint tells the client to re-inbox archived files, removing them from the archive. It only affects files in &#39;my files&#39; or &#39;trash&#39;. No error is returned if files do not exist or are already in the inbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="unarchiveFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesUnarchiveFilesApiResponse"/>&gt;</returns>
        Task<IAddFilesUnarchiveFilesApiResponse> AddFilesUnarchiveFilesAsync(UnarchiveFilesRequest unarchiveFilesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unarchive files by putting them back into the inbox.
        /// </summary>
        /// <remarks>
        /// This endpoint tells the client to re-inbox archived files, removing them from the archive. It only affects files in &#39;my files&#39; or &#39;trash&#39;. No error is returned if files do not exist or are already in the inbox.
        /// </remarks>
        /// <param name="unarchiveFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesUnarchiveFilesApiResponse"/>?&gt;</returns>
        Task<IAddFilesUnarchiveFilesApiResponse?> AddFilesUnarchiveFilesOrDefaultAsync(UnarchiveFilesRequest unarchiveFilesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Undelete files that were previously deleted.
        /// </summary>
        /// <remarks>
        /// Tell the client to restore files that were previously deleted to their old file service(s). This operation will only occur on files that are currently in your file store. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesUndeleteFilesApiResponse"/>&gt;</returns>
        Task<IAddFilesUndeleteFilesApiResponse> AddFilesUndeleteFilesAsync(AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Undelete files that were previously deleted.
        /// </summary>
        /// <remarks>
        /// Tell the client to restore files that were previously deleted to their old file service(s). This operation will only occur on files that are currently in your file store. 
        /// </remarks>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesUndeleteFilesApiResponse"/>?&gt;</returns>
        Task<IAddFilesUndeleteFilesApiResponse?> AddFilesUndeleteFilesOrDefaultAsync(AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddFilesAddFileApiResponse"/>
    /// </summary>
    public interface IAddFilesAddFileApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.AddFilesAddFile200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IAddFilesArchiveFilesApiResponse"/>
    /// </summary>
    public interface IAddFilesArchiveFilesApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IAddFilesClearFileDeletionRecordApiResponse"/>
    /// </summary>
    public interface IAddFilesClearFileDeletionRecordApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IAddFilesDeleteFilesApiResponse"/>
    /// </summary>
    public interface IAddFilesDeleteFilesApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IAddFilesGenerateHashesApiResponse"/>
    /// </summary>
    public interface IAddFilesGenerateHashesApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.AddFilesGenerateHashes200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IAddFilesMigrateFilesApiResponse"/>
    /// </summary>
    public interface IAddFilesMigrateFilesApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IAddFilesUnarchiveFilesApiResponse"/>
    /// </summary>
    public interface IAddFilesUnarchiveFilesApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAddFilesUndeleteFilesApiResponse"/>
    /// </summary>
    public interface IAddFilesUndeleteFilesApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AddFilesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFilesAddFile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFilesAddFile;

        internal void ExecuteOnAddFilesAddFile(AddFilesApi.AddFilesAddFileApiResponse apiResponse)
        {
            OnAddFilesAddFile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFilesAddFile(Exception exception)
        {
            OnErrorAddFilesAddFile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFilesArchiveFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFilesArchiveFiles;

        internal void ExecuteOnAddFilesArchiveFiles(AddFilesApi.AddFilesArchiveFilesApiResponse apiResponse)
        {
            OnAddFilesArchiveFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFilesArchiveFiles(Exception exception)
        {
            OnErrorAddFilesArchiveFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFilesClearFileDeletionRecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFilesClearFileDeletionRecord;

        internal void ExecuteOnAddFilesClearFileDeletionRecord(AddFilesApi.AddFilesClearFileDeletionRecordApiResponse apiResponse)
        {
            OnAddFilesClearFileDeletionRecord?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFilesClearFileDeletionRecord(Exception exception)
        {
            OnErrorAddFilesClearFileDeletionRecord?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFilesDeleteFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFilesDeleteFiles;

        internal void ExecuteOnAddFilesDeleteFiles(AddFilesApi.AddFilesDeleteFilesApiResponse apiResponse)
        {
            OnAddFilesDeleteFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFilesDeleteFiles(Exception exception)
        {
            OnErrorAddFilesDeleteFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFilesGenerateHashes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFilesGenerateHashes;

        internal void ExecuteOnAddFilesGenerateHashes(AddFilesApi.AddFilesGenerateHashesApiResponse apiResponse)
        {
            OnAddFilesGenerateHashes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFilesGenerateHashes(Exception exception)
        {
            OnErrorAddFilesGenerateHashes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFilesMigrateFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFilesMigrateFiles;

        internal void ExecuteOnAddFilesMigrateFiles(AddFilesApi.AddFilesMigrateFilesApiResponse apiResponse)
        {
            OnAddFilesMigrateFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFilesMigrateFiles(Exception exception)
        {
            OnErrorAddFilesMigrateFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFilesUnarchiveFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFilesUnarchiveFiles;

        internal void ExecuteOnAddFilesUnarchiveFiles(AddFilesApi.AddFilesUnarchiveFilesApiResponse apiResponse)
        {
            OnAddFilesUnarchiveFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFilesUnarchiveFiles(Exception exception)
        {
            OnErrorAddFilesUnarchiveFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFilesUndeleteFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFilesUndeleteFiles;

        internal void ExecuteOnAddFilesUndeleteFiles(AddFilesApi.AddFilesUndeleteFilesApiResponse apiResponse)
        {
            OnAddFilesUndeleteFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFilesUndeleteFiles(Exception exception)
        {
            OnErrorAddFilesUndeleteFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AddFilesApi : IAddFilesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AddFilesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AddFilesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddFilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddFilesApi(ILogger<AddFilesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AddFilesApiEvents addFilesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AddFilesApi>();
            HttpClient = httpClient;
            Events = addFilesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatAddFilesAddFile(AddFilesAddFileRequest addFilesAddFileRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addFilesAddFileRequest"></param>
        /// <returns></returns>
        private void ValidateAddFilesAddFile(AddFilesAddFileRequest addFilesAddFileRequest)
        {
            if (addFilesAddFileRequest == null)
                throw new ArgumentNullException(nameof(addFilesAddFileRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addFilesAddFileRequest"></param>
        private void AfterAddFilesAddFileDefaultImplementation(IAddFilesAddFileApiResponse apiResponseLocalVar, AddFilesAddFileRequest addFilesAddFileRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddFilesAddFile(ref suppressDefaultLog, apiResponseLocalVar, addFilesAddFileRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addFilesAddFileRequest"></param>
        partial void AfterAddFilesAddFile(ref bool suppressDefaultLog, IAddFilesAddFileApiResponse apiResponseLocalVar, AddFilesAddFileRequest addFilesAddFileRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addFilesAddFileRequest"></param>
        private void OnErrorAddFilesAddFileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddFilesAddFileRequest addFilesAddFileRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFilesAddFile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addFilesAddFileRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addFilesAddFileRequest"></param>
        partial void OnErrorAddFilesAddFile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddFilesAddFileRequest addFilesAddFileRequest);

        /// <summary>
        /// Import a file into the client Tells the client to import a file either by path or raw bytes. Requires the \&quot;Import Files\&quot; permission.
        /// </summary>
        /// <param name="addFilesAddFileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesAddFileApiResponse"/>&gt;</returns>
        public async Task<IAddFilesAddFileApiResponse?> AddFilesAddFileOrDefaultAsync(AddFilesAddFileRequest addFilesAddFileRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFilesAddFileAsync(addFilesAddFileRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Import a file into the client Tells the client to import a file either by path or raw bytes. Requires the \&quot;Import Files\&quot; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFilesAddFileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesAddFileApiResponse"/>&gt;</returns>
        public async Task<IAddFilesAddFileApiResponse> AddFilesAddFileAsync(AddFilesAddFileRequest addFilesAddFileRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFilesAddFile(addFilesAddFileRequest);

                FormatAddFilesAddFile(addFilesAddFileRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_files/add_file"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_files/add_file");

                    httpRequestMessageLocalVar.Content = (addFilesAddFileRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addFilesAddFileRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "application/octet-stream"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddFilesAddFileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFilesAddFileApiResponse>();
                        AddFilesAddFileApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_files/add_file", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddFilesAddFileDefaultImplementation(apiResponseLocalVar, addFilesAddFileRequest);

                        Events.ExecuteOnAddFilesAddFile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFilesAddFileDefaultImplementation(e, "/add_files/add_file", uriBuilderLocalVar.Path, addFilesAddFileRequest);
                Events.ExecuteOnErrorAddFilesAddFile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFilesAddFileApiResponse"/>
        /// </summary>
        public partial class AddFilesAddFileApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddFilesAddFileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFilesAddFileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFilesAddFileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesAddFileApiResponse(ILogger<AddFilesAddFileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddFilesAddFileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesAddFileApiResponse(ILogger<AddFilesAddFileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.AddFilesAddFile200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.AddFilesAddFile200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.AddFilesAddFile200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddFilesArchiveFiles(ArchiveFilesRequest archiveFilesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="archiveFilesRequest"></param>
        /// <returns></returns>
        private void ValidateAddFilesArchiveFiles(ArchiveFilesRequest archiveFilesRequest)
        {
            if (archiveFilesRequest == null)
                throw new ArgumentNullException(nameof(archiveFilesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="archiveFilesRequest"></param>
        private void AfterAddFilesArchiveFilesDefaultImplementation(IAddFilesArchiveFilesApiResponse apiResponseLocalVar, ArchiveFilesRequest archiveFilesRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddFilesArchiveFiles(ref suppressDefaultLog, apiResponseLocalVar, archiveFilesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="archiveFilesRequest"></param>
        partial void AfterAddFilesArchiveFiles(ref bool suppressDefaultLog, IAddFilesArchiveFilesApiResponse apiResponseLocalVar, ArchiveFilesRequest archiveFilesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="archiveFilesRequest"></param>
        private void OnErrorAddFilesArchiveFilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ArchiveFilesRequest archiveFilesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFilesArchiveFiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, archiveFilesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="archiveFilesRequest"></param>
        partial void OnErrorAddFilesArchiveFiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ArchiveFilesRequest archiveFilesRequest);

        /// <summary>
        /// Archive inboxed files Tell the client to archive inboxed files.
        /// </summary>
        /// <param name="archiveFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesArchiveFilesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesArchiveFilesApiResponse?> AddFilesArchiveFilesOrDefaultAsync(ArchiveFilesRequest archiveFilesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFilesArchiveFilesAsync(archiveFilesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Archive inboxed files Tell the client to archive inboxed files.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesArchiveFilesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesArchiveFilesApiResponse> AddFilesArchiveFilesAsync(ArchiveFilesRequest archiveFilesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFilesArchiveFiles(archiveFilesRequest);

                FormatAddFilesArchiveFiles(archiveFilesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_files/archive_files"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_files/archive_files");

                    httpRequestMessageLocalVar.Content = (archiveFilesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(archiveFilesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddFilesArchiveFilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFilesArchiveFilesApiResponse>();
                        AddFilesArchiveFilesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_files/archive_files", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddFilesArchiveFilesDefaultImplementation(apiResponseLocalVar, archiveFilesRequest);

                        Events.ExecuteOnAddFilesArchiveFiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFilesArchiveFilesDefaultImplementation(e, "/add_files/archive_files", uriBuilderLocalVar.Path, archiveFilesRequest);
                Events.ExecuteOnErrorAddFilesArchiveFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFilesArchiveFilesApiResponse"/>
        /// </summary>
        public partial class AddFilesArchiveFilesApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddFilesArchiveFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFilesArchiveFilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFilesArchiveFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesArchiveFilesApiResponse(ILogger<AddFilesArchiveFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddFilesArchiveFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesArchiveFilesApiResponse(ILogger<AddFilesArchiveFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddFilesClearFileDeletionRecord(ClearFileDeletionRecordRequest clearFileDeletionRecordRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="clearFileDeletionRecordRequest"></param>
        /// <returns></returns>
        private void ValidateAddFilesClearFileDeletionRecord(ClearFileDeletionRecordRequest clearFileDeletionRecordRequest)
        {
            if (clearFileDeletionRecordRequest == null)
                throw new ArgumentNullException(nameof(clearFileDeletionRecordRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clearFileDeletionRecordRequest"></param>
        private void AfterAddFilesClearFileDeletionRecordDefaultImplementation(IAddFilesClearFileDeletionRecordApiResponse apiResponseLocalVar, ClearFileDeletionRecordRequest clearFileDeletionRecordRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddFilesClearFileDeletionRecord(ref suppressDefaultLog, apiResponseLocalVar, clearFileDeletionRecordRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clearFileDeletionRecordRequest"></param>
        partial void AfterAddFilesClearFileDeletionRecord(ref bool suppressDefaultLog, IAddFilesClearFileDeletionRecordApiResponse apiResponseLocalVar, ClearFileDeletionRecordRequest clearFileDeletionRecordRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clearFileDeletionRecordRequest"></param>
        private void OnErrorAddFilesClearFileDeletionRecordDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ClearFileDeletionRecordRequest clearFileDeletionRecordRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFilesClearFileDeletionRecord(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, clearFileDeletionRecordRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clearFileDeletionRecordRequest"></param>
        partial void OnErrorAddFilesClearFileDeletionRecord(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ClearFileDeletionRecordRequest clearFileDeletionRecordRequest);

        /// <summary>
        /// Clear file deletion record Tell the client to forget that it once deleted files.
        /// </summary>
        /// <param name="clearFileDeletionRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesClearFileDeletionRecordApiResponse"/>&gt;</returns>
        public async Task<IAddFilesClearFileDeletionRecordApiResponse?> AddFilesClearFileDeletionRecordOrDefaultAsync(ClearFileDeletionRecordRequest clearFileDeletionRecordRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFilesClearFileDeletionRecordAsync(clearFileDeletionRecordRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Clear file deletion record Tell the client to forget that it once deleted files.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearFileDeletionRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesClearFileDeletionRecordApiResponse"/>&gt;</returns>
        public async Task<IAddFilesClearFileDeletionRecordApiResponse> AddFilesClearFileDeletionRecordAsync(ClearFileDeletionRecordRequest clearFileDeletionRecordRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFilesClearFileDeletionRecord(clearFileDeletionRecordRequest);

                FormatAddFilesClearFileDeletionRecord(clearFileDeletionRecordRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_files/clear_file_deletion_record"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_files/clear_file_deletion_record");

                    httpRequestMessageLocalVar.Content = (clearFileDeletionRecordRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(clearFileDeletionRecordRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddFilesClearFileDeletionRecordApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFilesClearFileDeletionRecordApiResponse>();
                        AddFilesClearFileDeletionRecordApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_files/clear_file_deletion_record", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddFilesClearFileDeletionRecordDefaultImplementation(apiResponseLocalVar, clearFileDeletionRecordRequest);

                        Events.ExecuteOnAddFilesClearFileDeletionRecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFilesClearFileDeletionRecordDefaultImplementation(e, "/add_files/clear_file_deletion_record", uriBuilderLocalVar.Path, clearFileDeletionRecordRequest);
                Events.ExecuteOnErrorAddFilesClearFileDeletionRecord(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFilesClearFileDeletionRecordApiResponse"/>
        /// </summary>
        public partial class AddFilesClearFileDeletionRecordApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddFilesClearFileDeletionRecordApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFilesClearFileDeletionRecordApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFilesClearFileDeletionRecordApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesClearFileDeletionRecordApiResponse(ILogger<AddFilesClearFileDeletionRecordApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddFilesClearFileDeletionRecordApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesClearFileDeletionRecordApiResponse(ILogger<AddFilesClearFileDeletionRecordApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddFilesDeleteFiles(AddFilesDeleteFilesRequest addFilesDeleteFilesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addFilesDeleteFilesRequest"></param>
        /// <returns></returns>
        private void ValidateAddFilesDeleteFiles(AddFilesDeleteFilesRequest addFilesDeleteFilesRequest)
        {
            if (addFilesDeleteFilesRequest == null)
                throw new ArgumentNullException(nameof(addFilesDeleteFilesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addFilesDeleteFilesRequest"></param>
        private void AfterAddFilesDeleteFilesDefaultImplementation(IAddFilesDeleteFilesApiResponse apiResponseLocalVar, AddFilesDeleteFilesRequest addFilesDeleteFilesRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddFilesDeleteFiles(ref suppressDefaultLog, apiResponseLocalVar, addFilesDeleteFilesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addFilesDeleteFilesRequest"></param>
        partial void AfterAddFilesDeleteFiles(ref bool suppressDefaultLog, IAddFilesDeleteFilesApiResponse apiResponseLocalVar, AddFilesDeleteFilesRequest addFilesDeleteFilesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addFilesDeleteFilesRequest"></param>
        private void OnErrorAddFilesDeleteFilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddFilesDeleteFilesRequest addFilesDeleteFilesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFilesDeleteFiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addFilesDeleteFilesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addFilesDeleteFilesRequest"></param>
        partial void OnErrorAddFilesDeleteFiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddFilesDeleteFilesRequest addFilesDeleteFilesRequest);

        /// <summary>
        /// Delete files from the client. Sends specified files to the trash or performs physical deletion based on the file domain.
        /// </summary>
        /// <param name="addFilesDeleteFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesDeleteFilesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesDeleteFilesApiResponse?> AddFilesDeleteFilesOrDefaultAsync(AddFilesDeleteFilesRequest addFilesDeleteFilesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFilesDeleteFilesAsync(addFilesDeleteFilesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete files from the client. Sends specified files to the trash or performs physical deletion based on the file domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFilesDeleteFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesDeleteFilesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesDeleteFilesApiResponse> AddFilesDeleteFilesAsync(AddFilesDeleteFilesRequest addFilesDeleteFilesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFilesDeleteFiles(addFilesDeleteFilesRequest);

                FormatAddFilesDeleteFiles(addFilesDeleteFilesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_files/delete_files"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_files/delete_files");

                    httpRequestMessageLocalVar.Content = (addFilesDeleteFilesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addFilesDeleteFilesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddFilesDeleteFilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFilesDeleteFilesApiResponse>();
                        AddFilesDeleteFilesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_files/delete_files", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddFilesDeleteFilesDefaultImplementation(apiResponseLocalVar, addFilesDeleteFilesRequest);

                        Events.ExecuteOnAddFilesDeleteFiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFilesDeleteFilesDefaultImplementation(e, "/add_files/delete_files", uriBuilderLocalVar.Path, addFilesDeleteFilesRequest);
                Events.ExecuteOnErrorAddFilesDeleteFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFilesDeleteFilesApiResponse"/>
        /// </summary>
        public partial class AddFilesDeleteFilesApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddFilesDeleteFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFilesDeleteFilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFilesDeleteFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesDeleteFilesApiResponse(ILogger<AddFilesDeleteFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddFilesDeleteFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesDeleteFilesApiResponse(ILogger<AddFilesDeleteFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddFilesGenerateHashes(AddFilesGenerateHashesRequest addFilesGenerateHashesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addFilesGenerateHashesRequest"></param>
        /// <returns></returns>
        private void ValidateAddFilesGenerateHashes(AddFilesGenerateHashesRequest addFilesGenerateHashesRequest)
        {
            if (addFilesGenerateHashesRequest == null)
                throw new ArgumentNullException(nameof(addFilesGenerateHashesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addFilesGenerateHashesRequest"></param>
        private void AfterAddFilesGenerateHashesDefaultImplementation(IAddFilesGenerateHashesApiResponse apiResponseLocalVar, AddFilesGenerateHashesRequest addFilesGenerateHashesRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddFilesGenerateHashes(ref suppressDefaultLog, apiResponseLocalVar, addFilesGenerateHashesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addFilesGenerateHashesRequest"></param>
        partial void AfterAddFilesGenerateHashes(ref bool suppressDefaultLog, IAddFilesGenerateHashesApiResponse apiResponseLocalVar, AddFilesGenerateHashesRequest addFilesGenerateHashesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addFilesGenerateHashesRequest"></param>
        private void OnErrorAddFilesGenerateHashesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddFilesGenerateHashesRequest addFilesGenerateHashesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFilesGenerateHashes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addFilesGenerateHashesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addFilesGenerateHashesRequest"></param>
        partial void OnErrorAddFilesGenerateHashes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddFilesGenerateHashesRequest addFilesGenerateHashesRequest);

        /// <summary>
        /// Generate hashes for an arbitrary file Generate hashes for an arbitrary file. You can either send the file&#39;s path or the file&#39;s raw bytes.  Restricted access: YES (Import Files permission needed)  Required Headers: - Content-Type: &#x60;application/json&#x60; (if sending path) - Content-Type: &#x60;application/octet-stream&#x60; (if sending file bytes) 
        /// </summary>
        /// <param name="addFilesGenerateHashesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesGenerateHashesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesGenerateHashesApiResponse?> AddFilesGenerateHashesOrDefaultAsync(AddFilesGenerateHashesRequest addFilesGenerateHashesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFilesGenerateHashesAsync(addFilesGenerateHashesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate hashes for an arbitrary file Generate hashes for an arbitrary file. You can either send the file&#39;s path or the file&#39;s raw bytes.  Restricted access: YES (Import Files permission needed)  Required Headers: - Content-Type: &#x60;application/json&#x60; (if sending path) - Content-Type: &#x60;application/octet-stream&#x60; (if sending file bytes) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFilesGenerateHashesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesGenerateHashesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesGenerateHashesApiResponse> AddFilesGenerateHashesAsync(AddFilesGenerateHashesRequest addFilesGenerateHashesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFilesGenerateHashes(addFilesGenerateHashesRequest);

                FormatAddFilesGenerateHashes(addFilesGenerateHashesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_files/generate_hashes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_files/generate_hashes");

                    httpRequestMessageLocalVar.Content = (addFilesGenerateHashesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addFilesGenerateHashesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "application/octet-stream"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddFilesGenerateHashesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFilesGenerateHashesApiResponse>();
                        AddFilesGenerateHashesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_files/generate_hashes", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddFilesGenerateHashesDefaultImplementation(apiResponseLocalVar, addFilesGenerateHashesRequest);

                        Events.ExecuteOnAddFilesGenerateHashes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFilesGenerateHashesDefaultImplementation(e, "/add_files/generate_hashes", uriBuilderLocalVar.Path, addFilesGenerateHashesRequest);
                Events.ExecuteOnErrorAddFilesGenerateHashes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFilesGenerateHashesApiResponse"/>
        /// </summary>
        public partial class AddFilesGenerateHashesApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddFilesGenerateHashesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFilesGenerateHashesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFilesGenerateHashesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesGenerateHashesApiResponse(ILogger<AddFilesGenerateHashesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddFilesGenerateHashesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesGenerateHashesApiResponse(ILogger<AddFilesGenerateHashesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.AddFilesGenerateHashes200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.AddFilesGenerateHashes200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.AddFilesGenerateHashes200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddFilesMigrateFiles(MigrateFilesRequest migrateFilesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="migrateFilesRequest"></param>
        /// <returns></returns>
        private void ValidateAddFilesMigrateFiles(MigrateFilesRequest migrateFilesRequest)
        {
            if (migrateFilesRequest == null)
                throw new ArgumentNullException(nameof(migrateFilesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="migrateFilesRequest"></param>
        private void AfterAddFilesMigrateFilesDefaultImplementation(IAddFilesMigrateFilesApiResponse apiResponseLocalVar, MigrateFilesRequest migrateFilesRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddFilesMigrateFiles(ref suppressDefaultLog, apiResponseLocalVar, migrateFilesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="migrateFilesRequest"></param>
        partial void AfterAddFilesMigrateFiles(ref bool suppressDefaultLog, IAddFilesMigrateFilesApiResponse apiResponseLocalVar, MigrateFilesRequest migrateFilesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="migrateFilesRequest"></param>
        private void OnErrorAddFilesMigrateFilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MigrateFilesRequest migrateFilesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFilesMigrateFiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, migrateFilesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="migrateFilesRequest"></param>
        partial void OnErrorAddFilesMigrateFiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MigrateFilesRequest migrateFilesRequest);

        /// <summary>
        /// Copy files from one local file domain to another. This endpoint migrates files (by hash or ID) from one local file domain to another or multiple domains. Restricted to users with the Import Files permission.
        /// </summary>
        /// <param name="migrateFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesMigrateFilesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesMigrateFilesApiResponse?> AddFilesMigrateFilesOrDefaultAsync(MigrateFilesRequest migrateFilesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFilesMigrateFilesAsync(migrateFilesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Copy files from one local file domain to another. This endpoint migrates files (by hash or ID) from one local file domain to another or multiple domains. Restricted to users with the Import Files permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrateFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesMigrateFilesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesMigrateFilesApiResponse> AddFilesMigrateFilesAsync(MigrateFilesRequest migrateFilesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFilesMigrateFiles(migrateFilesRequest);

                FormatAddFilesMigrateFiles(migrateFilesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_files/migrate_files"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_files/migrate_files");

                    httpRequestMessageLocalVar.Content = (migrateFilesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(migrateFilesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddFilesMigrateFilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFilesMigrateFilesApiResponse>();
                        AddFilesMigrateFilesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_files/migrate_files", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddFilesMigrateFilesDefaultImplementation(apiResponseLocalVar, migrateFilesRequest);

                        Events.ExecuteOnAddFilesMigrateFiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFilesMigrateFilesDefaultImplementation(e, "/add_files/migrate_files", uriBuilderLocalVar.Path, migrateFilesRequest);
                Events.ExecuteOnErrorAddFilesMigrateFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFilesMigrateFilesApiResponse"/>
        /// </summary>
        public partial class AddFilesMigrateFilesApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddFilesMigrateFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFilesMigrateFilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFilesMigrateFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesMigrateFilesApiResponse(ILogger<AddFilesMigrateFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddFilesMigrateFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesMigrateFilesApiResponse(ILogger<AddFilesMigrateFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddFilesUnarchiveFiles(UnarchiveFilesRequest unarchiveFilesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="unarchiveFilesRequest"></param>
        /// <returns></returns>
        private void ValidateAddFilesUnarchiveFiles(UnarchiveFilesRequest unarchiveFilesRequest)
        {
            if (unarchiveFilesRequest == null)
                throw new ArgumentNullException(nameof(unarchiveFilesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="unarchiveFilesRequest"></param>
        private void AfterAddFilesUnarchiveFilesDefaultImplementation(IAddFilesUnarchiveFilesApiResponse apiResponseLocalVar, UnarchiveFilesRequest unarchiveFilesRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddFilesUnarchiveFiles(ref suppressDefaultLog, apiResponseLocalVar, unarchiveFilesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="unarchiveFilesRequest"></param>
        partial void AfterAddFilesUnarchiveFiles(ref bool suppressDefaultLog, IAddFilesUnarchiveFilesApiResponse apiResponseLocalVar, UnarchiveFilesRequest unarchiveFilesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="unarchiveFilesRequest"></param>
        private void OnErrorAddFilesUnarchiveFilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UnarchiveFilesRequest unarchiveFilesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFilesUnarchiveFiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, unarchiveFilesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="unarchiveFilesRequest"></param>
        partial void OnErrorAddFilesUnarchiveFiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UnarchiveFilesRequest unarchiveFilesRequest);

        /// <summary>
        /// Unarchive files by putting them back into the inbox. This endpoint tells the client to re-inbox archived files, removing them from the archive. It only affects files in &#39;my files&#39; or &#39;trash&#39;. No error is returned if files do not exist or are already in the inbox.
        /// </summary>
        /// <param name="unarchiveFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesUnarchiveFilesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesUnarchiveFilesApiResponse?> AddFilesUnarchiveFilesOrDefaultAsync(UnarchiveFilesRequest unarchiveFilesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFilesUnarchiveFilesAsync(unarchiveFilesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Unarchive files by putting them back into the inbox. This endpoint tells the client to re-inbox archived files, removing them from the archive. It only affects files in &#39;my files&#39; or &#39;trash&#39;. No error is returned if files do not exist or are already in the inbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="unarchiveFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesUnarchiveFilesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesUnarchiveFilesApiResponse> AddFilesUnarchiveFilesAsync(UnarchiveFilesRequest unarchiveFilesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFilesUnarchiveFiles(unarchiveFilesRequest);

                FormatAddFilesUnarchiveFiles(unarchiveFilesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_files/unarchive_files"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_files/unarchive_files");

                    httpRequestMessageLocalVar.Content = (unarchiveFilesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(unarchiveFilesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddFilesUnarchiveFilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFilesUnarchiveFilesApiResponse>();
                        AddFilesUnarchiveFilesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_files/unarchive_files", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddFilesUnarchiveFilesDefaultImplementation(apiResponseLocalVar, unarchiveFilesRequest);

                        Events.ExecuteOnAddFilesUnarchiveFiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFilesUnarchiveFilesDefaultImplementation(e, "/add_files/unarchive_files", uriBuilderLocalVar.Path, unarchiveFilesRequest);
                Events.ExecuteOnErrorAddFilesUnarchiveFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFilesUnarchiveFilesApiResponse"/>
        /// </summary>
        public partial class AddFilesUnarchiveFilesApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddFilesUnarchiveFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFilesUnarchiveFilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFilesUnarchiveFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesUnarchiveFilesApiResponse(ILogger<AddFilesUnarchiveFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddFilesUnarchiveFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesUnarchiveFilesApiResponse(ILogger<AddFilesUnarchiveFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddFilesUndeleteFiles(AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        /// <returns></returns>
        private void ValidateAddFilesUndeleteFiles(AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest)
        {
            if (addFilesUndeleteFilesRequest == null)
                throw new ArgumentNullException(nameof(addFilesUndeleteFilesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        private void AfterAddFilesUndeleteFilesDefaultImplementation(IAddFilesUndeleteFilesApiResponse apiResponseLocalVar, AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddFilesUndeleteFiles(ref suppressDefaultLog, apiResponseLocalVar, addFilesUndeleteFilesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        partial void AfterAddFilesUndeleteFiles(ref bool suppressDefaultLog, IAddFilesUndeleteFilesApiResponse apiResponseLocalVar, AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        private void OnErrorAddFilesUndeleteFilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFilesUndeleteFiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addFilesUndeleteFilesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        partial void OnErrorAddFilesUndeleteFiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest);

        /// <summary>
        /// Undelete files that were previously deleted. Tell the client to restore files that were previously deleted to their old file service(s). This operation will only occur on files that are currently in your file store. 
        /// </summary>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesUndeleteFilesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesUndeleteFilesApiResponse?> AddFilesUndeleteFilesOrDefaultAsync(AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFilesUndeleteFilesAsync(addFilesUndeleteFilesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Undelete files that were previously deleted. Tell the client to restore files that were previously deleted to their old file service(s). This operation will only occur on files that are currently in your file store. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesUndeleteFilesApiResponse"/>&gt;</returns>
        public async Task<IAddFilesUndeleteFilesApiResponse> AddFilesUndeleteFilesAsync(AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFilesUndeleteFiles(addFilesUndeleteFilesRequest);

                FormatAddFilesUndeleteFiles(addFilesUndeleteFilesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_files/undelete_files"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_files/undelete_files");

                    httpRequestMessageLocalVar.Content = (addFilesUndeleteFilesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addFilesUndeleteFilesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddFilesUndeleteFilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFilesUndeleteFilesApiResponse>();
                        AddFilesUndeleteFilesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_files/undelete_files", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddFilesUndeleteFilesDefaultImplementation(apiResponseLocalVar, addFilesUndeleteFilesRequest);

                        Events.ExecuteOnAddFilesUndeleteFiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFilesUndeleteFilesDefaultImplementation(e, "/add_files/undelete_files", uriBuilderLocalVar.Path, addFilesUndeleteFilesRequest);
                Events.ExecuteOnErrorAddFilesUndeleteFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFilesUndeleteFilesApiResponse"/>
        /// </summary>
        public partial class AddFilesUndeleteFilesApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddFilesUndeleteFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFilesUndeleteFilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFilesUndeleteFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesUndeleteFilesApiResponse(ILogger<AddFilesUndeleteFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddFilesUndeleteFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesUndeleteFilesApiResponse(ILogger<AddFilesUndeleteFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
