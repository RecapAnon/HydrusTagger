// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using HydrusAPI.NET.Client;
using HydrusAPI.NET.Model;
using System.Diagnostics.CodeAnalysis;

namespace HydrusAPI.NET.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IManagePopupsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ManagePopupsApiEvents Events { get; }

        /// <summary>
        /// Get a popup job status by key.
        /// </summary>
        /// <remarks>
        /// Retrieve detailed information about a popup job status using its key.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The hex key identifying the job status.</param>
        /// <param name="hydrusClientAPIAccessKey"> (optional)</param>
        /// <param name="hydrusClientAPISessionKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPopupApiResponse"/>&gt;</returns>
        Task<IGetPopupApiResponse> GetPopupAsync(string key, Option<string> hydrusClientAPIAccessKey = default, Option<string> hydrusClientAPISessionKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a popup job status by key.
        /// </summary>
        /// <remarks>
        /// Retrieve detailed information about a popup job status using its key.
        /// </remarks>
        /// <param name="key">The hex key identifying the job status.</param>
        /// <param name="hydrusClientAPIAccessKey"> (optional)</param>
        /// <param name="hydrusClientAPISessionKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPopupApiResponse"/>?&gt;</returns>
        Task<IGetPopupApiResponse?> GetPopupOrDefaultAsync(string key, Option<string> hydrusClientAPIAccessKey = default, Option<string> hydrusClientAPISessionKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a popup
        /// </summary>
        /// <remarks>
        /// Adds a new popup job status object. Requires Manage Popups permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsAddPopuipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsAddPopuipApiResponse"/>&gt;</returns>
        Task<IManagePopupsAddPopuipApiResponse> ManagePopupsAddPopuipAsync(ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a popup
        /// </summary>
        /// <remarks>
        /// Adds a new popup job status object. Requires Manage Popups permission.
        /// </remarks>
        /// <param name="managePopupsAddPopuipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsAddPopuipApiResponse"/>?&gt;</returns>
        Task<IManagePopupsAddPopuipApiResponse?> ManagePopupsAddPopuipOrDefaultAsync(ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Call the user callable function of a popup
        /// </summary>
        /// <remarks>
        /// Calls the user callable function of a popup identified by the job status key. Requires Manage Pages permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsCallUserCallableApiResponse"/>&gt;</returns>
        Task<IManagePopupsCallUserCallableApiResponse> ManagePopupsCallUserCallableAsync(ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Call the user callable function of a popup
        /// </summary>
        /// <remarks>
        /// Calls the user callable function of a popup identified by the job status key. Requires Manage Pages permission.
        /// </remarks>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsCallUserCallableApiResponse"/>?&gt;</returns>
        Task<IManagePopupsCallUserCallableApiResponse?> ManagePopupsCallUserCallableOrDefaultAsync(ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Try to cancel a popup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsCancelPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsCancelPopupApiResponse"/>&gt;</returns>
        Task<IManagePopupsCancelPopupApiResponse> ManagePopupsCancelPopupAsync(ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Try to cancel a popup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="managePopupsCancelPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsCancelPopupApiResponse"/>?&gt;</returns>
        Task<IManagePopupsCancelPopupApiResponse?> ManagePopupsCancelPopupOrDefaultAsync(ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Dismiss a popup
        /// </summary>
        /// <remarks>
        /// Dismiss a popup. This action is intended for observers (i.e., users who did not create the job). If the job is ongoing (not done), the dismissal has no effect. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsDismissPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsDismissPopupApiResponse"/>&gt;</returns>
        Task<IManagePopupsDismissPopupApiResponse> ManagePopupsDismissPopupAsync(ManagePopupsDismissPopupRequest managePopupsDismissPopupRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Dismiss a popup
        /// </summary>
        /// <remarks>
        /// Dismiss a popup. This action is intended for observers (i.e., users who did not create the job). If the job is ongoing (not done), the dismissal has no effect. 
        /// </remarks>
        /// <param name="managePopupsDismissPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsDismissPopupApiResponse"/>?&gt;</returns>
        Task<IManagePopupsDismissPopupApiResponse?> ManagePopupsDismissPopupOrDefaultAsync(ManagePopupsDismissPopupRequest managePopupsDismissPopupRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Finish and dismiss a popup
        /// </summary>
        /// <remarks>
        /// Finish a popup job and dismiss it either immediately or after a delay.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsFinishAndDismissPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsFinishAndDismissPopupApiResponse"/>&gt;</returns>
        Task<IManagePopupsFinishAndDismissPopupApiResponse> ManagePopupsFinishAndDismissPopupAsync(ManagePopupsFinishAndDismissPopupRequest managePopupsFinishAndDismissPopupRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Finish and dismiss a popup
        /// </summary>
        /// <remarks>
        /// Finish a popup job and dismiss it either immediately or after a delay.
        /// </remarks>
        /// <param name="managePopupsFinishAndDismissPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsFinishAndDismissPopupApiResponse"/>?&gt;</returns>
        Task<IManagePopupsFinishAndDismissPopupApiResponse?> ManagePopupsFinishAndDismissPopupOrDefaultAsync(ManagePopupsFinishAndDismissPopupRequest managePopupsFinishAndDismissPopupRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Mark a popup as done
        /// </summary>
        /// <remarks>
        /// Marks a popup job as done. This should only be used on jobs created by the caller. It clears pausable/cancellable statuses and sets &#x60;is_done&#x60;, allowing the user to dismiss the popup.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsFinishPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsFinishPopupApiResponse"/>&gt;</returns>
        Task<IManagePopupsFinishPopupApiResponse> ManagePopupsFinishPopupAsync(ManagePopupsFinishPopupRequest managePopupsFinishPopupRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Mark a popup as done
        /// </summary>
        /// <remarks>
        /// Marks a popup job as done. This should only be used on jobs created by the caller. It clears pausable/cancellable statuses and sets &#x60;is_done&#x60;, allowing the user to dismiss the popup.
        /// </remarks>
        /// <param name="managePopupsFinishPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsFinishPopupApiResponse"/>?&gt;</returns>
        Task<IManagePopupsFinishPopupApiResponse?> ManagePopupsFinishPopupOrDefaultAsync(ManagePopupsFinishPopupRequest managePopupsFinishPopupRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a list of popups from the client
        /// </summary>
        /// <remarks>
        /// Retrieves a list of popup job statuses currently active or recently completed in the client.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyInView"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsGetPopupsApiResponse"/>&gt;</returns>
        Task<IManagePopupsGetPopupsApiResponse> ManagePopupsGetPopupsAsync(Option<bool> onlyInView = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a list of popups from the client
        /// </summary>
        /// <remarks>
        /// Retrieves a list of popup job statuses currently active or recently completed in the client.
        /// </remarks>
        /// <param name="onlyInView"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsGetPopupsApiResponse"/>?&gt;</returns>
        Task<IManagePopupsGetPopupsApiResponse?> ManagePopupsGetPopupsOrDefaultAsync(Option<bool> onlyInView = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a popup
        /// </summary>
        /// <remarks>
        /// Update a popup with a job status key and optional fields.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsUpdatePopuipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsUpdatePopuipApiResponse"/>&gt;</returns>
        Task<IManagePopupsUpdatePopuipApiResponse> ManagePopupsUpdatePopuipAsync(ManagePopupsUpdatePopuipRequest managePopupsUpdatePopuipRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a popup
        /// </summary>
        /// <remarks>
        /// Update a popup with a job status key and optional fields.
        /// </remarks>
        /// <param name="managePopupsUpdatePopuipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsUpdatePopuipApiResponse"/>?&gt;</returns>
        Task<IManagePopupsUpdatePopuipApiResponse?> ManagePopupsUpdatePopuipOrDefaultAsync(ManagePopupsUpdatePopuipRequest managePopupsUpdatePopuipRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetPopupApiResponse"/>
    /// </summary>
    public interface IGetPopupApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.JobStatus?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManagePopupsAddPopuipApiResponse"/>
    /// </summary>
    public interface IManagePopupsAddPopuipApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.JobStatusObject?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManagePopupsCallUserCallableApiResponse"/>
    /// </summary>
    public interface IManagePopupsCallUserCallableApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManagePopupsCancelPopupApiResponse"/>
    /// </summary>
    public interface IManagePopupsCancelPopupApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IManagePopupsDismissPopupApiResponse"/>
    /// </summary>
    public interface IManagePopupsDismissPopupApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManagePopupsFinishAndDismissPopupApiResponse"/>
    /// </summary>
    public interface IManagePopupsFinishAndDismissPopupApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManagePopupsFinishPopupApiResponse"/>
    /// </summary>
    public interface IManagePopupsFinishPopupApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IManagePopupsGetPopupsApiResponse"/>
    /// </summary>
    public interface IManagePopupsGetPopupsApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.JobStatusesResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IManagePopupsUpdatePopuipApiResponse"/>
    /// </summary>
    public interface IManagePopupsUpdatePopuipApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.ManagePopupsUpdatePopuip200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ManagePopupsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPopup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPopup;

        internal void ExecuteOnGetPopup(ManagePopupsApi.GetPopupApiResponse apiResponse)
        {
            OnGetPopup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPopup(Exception exception)
        {
            OnErrorGetPopup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePopupsAddPopuip;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePopupsAddPopuip;

        internal void ExecuteOnManagePopupsAddPopuip(ManagePopupsApi.ManagePopupsAddPopuipApiResponse apiResponse)
        {
            OnManagePopupsAddPopuip?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePopupsAddPopuip(Exception exception)
        {
            OnErrorManagePopupsAddPopuip?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePopupsCallUserCallable;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePopupsCallUserCallable;

        internal void ExecuteOnManagePopupsCallUserCallable(ManagePopupsApi.ManagePopupsCallUserCallableApiResponse apiResponse)
        {
            OnManagePopupsCallUserCallable?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePopupsCallUserCallable(Exception exception)
        {
            OnErrorManagePopupsCallUserCallable?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePopupsCancelPopup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePopupsCancelPopup;

        internal void ExecuteOnManagePopupsCancelPopup(ManagePopupsApi.ManagePopupsCancelPopupApiResponse apiResponse)
        {
            OnManagePopupsCancelPopup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePopupsCancelPopup(Exception exception)
        {
            OnErrorManagePopupsCancelPopup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePopupsDismissPopup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePopupsDismissPopup;

        internal void ExecuteOnManagePopupsDismissPopup(ManagePopupsApi.ManagePopupsDismissPopupApiResponse apiResponse)
        {
            OnManagePopupsDismissPopup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePopupsDismissPopup(Exception exception)
        {
            OnErrorManagePopupsDismissPopup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePopupsFinishAndDismissPopup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePopupsFinishAndDismissPopup;

        internal void ExecuteOnManagePopupsFinishAndDismissPopup(ManagePopupsApi.ManagePopupsFinishAndDismissPopupApiResponse apiResponse)
        {
            OnManagePopupsFinishAndDismissPopup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePopupsFinishAndDismissPopup(Exception exception)
        {
            OnErrorManagePopupsFinishAndDismissPopup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePopupsFinishPopup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePopupsFinishPopup;

        internal void ExecuteOnManagePopupsFinishPopup(ManagePopupsApi.ManagePopupsFinishPopupApiResponse apiResponse)
        {
            OnManagePopupsFinishPopup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePopupsFinishPopup(Exception exception)
        {
            OnErrorManagePopupsFinishPopup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePopupsGetPopups;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePopupsGetPopups;

        internal void ExecuteOnManagePopupsGetPopups(ManagePopupsApi.ManagePopupsGetPopupsApiResponse apiResponse)
        {
            OnManagePopupsGetPopups?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePopupsGetPopups(Exception exception)
        {
            OnErrorManagePopupsGetPopups?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePopupsUpdatePopuip;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePopupsUpdatePopuip;

        internal void ExecuteOnManagePopupsUpdatePopuip(ManagePopupsApi.ManagePopupsUpdatePopuipApiResponse apiResponse)
        {
            OnManagePopupsUpdatePopuip?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePopupsUpdatePopuip(Exception exception)
        {
            OnErrorManagePopupsUpdatePopuip?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ManagePopupsApi : IManagePopupsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ManagePopupsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ManagePopupsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagePopupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagePopupsApi(ILogger<ManagePopupsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ManagePopupsApiEvents managePopupsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ManagePopupsApi>();
            HttpClient = httpClient;
            Events = managePopupsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetPopup(ref string key, ref Option<string> hydrusClientAPIAccessKey, ref Option<string> hydrusClientAPISessionKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="key"></param>
        /// <param name="hydrusClientAPIAccessKey"></param>
        /// <param name="hydrusClientAPISessionKey"></param>
        /// <returns></returns>
        private void ValidateGetPopup(string key, Option<string> hydrusClientAPIAccessKey, Option<string> hydrusClientAPISessionKey)
        {
            if (key == null)
                throw new ArgumentNullException(nameof(key));

            if (hydrusClientAPIAccessKey.IsSet && hydrusClientAPIAccessKey.Value == null)
                throw new ArgumentNullException(nameof(hydrusClientAPIAccessKey));

            if (hydrusClientAPISessionKey.IsSet && hydrusClientAPISessionKey.Value == null)
                throw new ArgumentNullException(nameof(hydrusClientAPISessionKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="key"></param>
        /// <param name="hydrusClientAPIAccessKey"></param>
        /// <param name="hydrusClientAPISessionKey"></param>
        private void AfterGetPopupDefaultImplementation(IGetPopupApiResponse apiResponseLocalVar, string key, Option<string> hydrusClientAPIAccessKey, Option<string> hydrusClientAPISessionKey)
        {
            bool suppressDefaultLog = false;
            AfterGetPopup(ref suppressDefaultLog, apiResponseLocalVar, key, hydrusClientAPIAccessKey, hydrusClientAPISessionKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="key"></param>
        /// <param name="hydrusClientAPIAccessKey"></param>
        /// <param name="hydrusClientAPISessionKey"></param>
        partial void AfterGetPopup(ref bool suppressDefaultLog, IGetPopupApiResponse apiResponseLocalVar, string key, Option<string> hydrusClientAPIAccessKey, Option<string> hydrusClientAPISessionKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="key"></param>
        /// <param name="hydrusClientAPIAccessKey"></param>
        /// <param name="hydrusClientAPISessionKey"></param>
        private void OnErrorGetPopupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string key, Option<string> hydrusClientAPIAccessKey, Option<string> hydrusClientAPISessionKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPopup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, key, hydrusClientAPIAccessKey, hydrusClientAPISessionKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="key"></param>
        /// <param name="hydrusClientAPIAccessKey"></param>
        /// <param name="hydrusClientAPISessionKey"></param>
        partial void OnErrorGetPopup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string key, Option<string> hydrusClientAPIAccessKey, Option<string> hydrusClientAPISessionKey);

        /// <summary>
        /// Get a popup job status by key. Retrieve detailed information about a popup job status using its key.
        /// </summary>
        /// <param name="key">The hex key identifying the job status.</param>
        /// <param name="hydrusClientAPIAccessKey"> (optional)</param>
        /// <param name="hydrusClientAPISessionKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPopupApiResponse"/>&gt;</returns>
        public async Task<IGetPopupApiResponse?> GetPopupOrDefaultAsync(string key, Option<string> hydrusClientAPIAccessKey = default, Option<string> hydrusClientAPISessionKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPopupAsync(key, hydrusClientAPIAccessKey, hydrusClientAPISessionKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a popup job status by key. Retrieve detailed information about a popup job status using its key.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The hex key identifying the job status.</param>
        /// <param name="hydrusClientAPIAccessKey"> (optional)</param>
        /// <param name="hydrusClientAPISessionKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPopupApiResponse"/>&gt;</returns>
        public async Task<IGetPopupApiResponse> GetPopupAsync(string key, Option<string> hydrusClientAPIAccessKey = default, Option<string> hydrusClientAPISessionKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPopup(key, hydrusClientAPIAccessKey, hydrusClientAPISessionKey);

                FormatGetPopup(ref key, ref hydrusClientAPIAccessKey, ref hydrusClientAPISessionKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_popups/get_popup"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_popups/get_popup");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (hydrusClientAPIAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Hydrus-Client-API-Access-Key", ClientUtils.ParameterToString(hydrusClientAPIAccessKey.Value));

                    if (hydrusClientAPISessionKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Hydrus-Client-API-Session-Key", ClientUtils.ParameterToString(hydrusClientAPISessionKey.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetPopupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPopupApiResponse>();
                        GetPopupApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_popups/get_popup", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetPopupDefaultImplementation(apiResponseLocalVar, key, hydrusClientAPIAccessKey, hydrusClientAPISessionKey);

                        Events.ExecuteOnGetPopup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPopupDefaultImplementation(e, "/manage_popups/get_popup", uriBuilderLocalVar.Path, key, hydrusClientAPIAccessKey, hydrusClientAPISessionKey);
                Events.ExecuteOnErrorGetPopup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPopupApiResponse"/>
        /// </summary>
        public partial class GetPopupApiResponse : HydrusAPI.NET.Client.ApiResponse, IGetPopupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPopupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPopupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPopupApiResponse(ILogger<GetPopupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetPopupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPopupApiResponse(ILogger<GetPopupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.JobStatus? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.JobStatus>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.JobStatus? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePopupsAddPopuip(ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="managePopupsAddPopuipRequest"></param>
        /// <returns></returns>
        private void ValidateManagePopupsAddPopuip(ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest)
        {
            if (managePopupsAddPopuipRequest == null)
                throw new ArgumentNullException(nameof(managePopupsAddPopuipRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsAddPopuipRequest"></param>
        private void AfterManagePopupsAddPopuipDefaultImplementation(IManagePopupsAddPopuipApiResponse apiResponseLocalVar, ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest)
        {
            bool suppressDefaultLog = false;
            AfterManagePopupsAddPopuip(ref suppressDefaultLog, apiResponseLocalVar, managePopupsAddPopuipRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsAddPopuipRequest"></param>
        partial void AfterManagePopupsAddPopuip(ref bool suppressDefaultLog, IManagePopupsAddPopuipApiResponse apiResponseLocalVar, ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsAddPopuipRequest"></param>
        private void OnErrorManagePopupsAddPopuipDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePopupsAddPopuip(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, managePopupsAddPopuipRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsAddPopuipRequest"></param>
        partial void OnErrorManagePopupsAddPopuip(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest);

        /// <summary>
        /// Add a popup Adds a new popup job status object. Requires Manage Popups permission.
        /// </summary>
        /// <param name="managePopupsAddPopuipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsAddPopuipApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsAddPopuipApiResponse?> ManagePopupsAddPopuipOrDefaultAsync(ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePopupsAddPopuipAsync(managePopupsAddPopuipRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add a popup Adds a new popup job status object. Requires Manage Popups permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsAddPopuipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsAddPopuipApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsAddPopuipApiResponse> ManagePopupsAddPopuipAsync(ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManagePopupsAddPopuip(managePopupsAddPopuipRequest);

                FormatManagePopupsAddPopuip(managePopupsAddPopuipRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_popups/add_popup"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_popups/add_popup");

                    httpRequestMessageLocalVar.Content = (managePopupsAddPopuipRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(managePopupsAddPopuipRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManagePopupsAddPopuipApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePopupsAddPopuipApiResponse>();
                        ManagePopupsAddPopuipApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_popups/add_popup", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManagePopupsAddPopuipDefaultImplementation(apiResponseLocalVar, managePopupsAddPopuipRequest);

                        Events.ExecuteOnManagePopupsAddPopuip(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePopupsAddPopuipDefaultImplementation(e, "/manage_popups/add_popup", uriBuilderLocalVar.Path, managePopupsAddPopuipRequest);
                Events.ExecuteOnErrorManagePopupsAddPopuip(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePopupsAddPopuipApiResponse"/>
        /// </summary>
        public partial class ManagePopupsAddPopuipApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePopupsAddPopuipApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePopupsAddPopuipApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePopupsAddPopuipApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsAddPopuipApiResponse(ILogger<ManagePopupsAddPopuipApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManagePopupsAddPopuipApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsAddPopuipApiResponse(ILogger<ManagePopupsAddPopuipApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.JobStatusObject? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.JobStatusObject>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.JobStatusObject? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePopupsCallUserCallable(ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        /// <returns></returns>
        private void ValidateManagePopupsCallUserCallable(ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest)
        {
            if (managePopupsCallUserCallableRequest == null)
                throw new ArgumentNullException(nameof(managePopupsCallUserCallableRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        private void AfterManagePopupsCallUserCallableDefaultImplementation(IManagePopupsCallUserCallableApiResponse apiResponseLocalVar, ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest)
        {
            bool suppressDefaultLog = false;
            AfterManagePopupsCallUserCallable(ref suppressDefaultLog, apiResponseLocalVar, managePopupsCallUserCallableRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        partial void AfterManagePopupsCallUserCallable(ref bool suppressDefaultLog, IManagePopupsCallUserCallableApiResponse apiResponseLocalVar, ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        private void OnErrorManagePopupsCallUserCallableDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePopupsCallUserCallable(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, managePopupsCallUserCallableRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        partial void OnErrorManagePopupsCallUserCallable(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest);

        /// <summary>
        /// Call the user callable function of a popup Calls the user callable function of a popup identified by the job status key. Requires Manage Pages permission.
        /// </summary>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsCallUserCallableApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsCallUserCallableApiResponse?> ManagePopupsCallUserCallableOrDefaultAsync(ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePopupsCallUserCallableAsync(managePopupsCallUserCallableRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Call the user callable function of a popup Calls the user callable function of a popup identified by the job status key. Requires Manage Pages permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsCallUserCallableApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsCallUserCallableApiResponse> ManagePopupsCallUserCallableAsync(ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManagePopupsCallUserCallable(managePopupsCallUserCallableRequest);

                FormatManagePopupsCallUserCallable(managePopupsCallUserCallableRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_popups/call_user_callable"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_popups/call_user_callable");

                    httpRequestMessageLocalVar.Content = (managePopupsCallUserCallableRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(managePopupsCallUserCallableRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManagePopupsCallUserCallableApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePopupsCallUserCallableApiResponse>();
                        ManagePopupsCallUserCallableApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_popups/call_user_callable", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManagePopupsCallUserCallableDefaultImplementation(apiResponseLocalVar, managePopupsCallUserCallableRequest);

                        Events.ExecuteOnManagePopupsCallUserCallable(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePopupsCallUserCallableDefaultImplementation(e, "/manage_popups/call_user_callable", uriBuilderLocalVar.Path, managePopupsCallUserCallableRequest);
                Events.ExecuteOnErrorManagePopupsCallUserCallable(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePopupsCallUserCallableApiResponse"/>
        /// </summary>
        public partial class ManagePopupsCallUserCallableApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePopupsCallUserCallableApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePopupsCallUserCallableApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePopupsCallUserCallableApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsCallUserCallableApiResponse(ILogger<ManagePopupsCallUserCallableApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManagePopupsCallUserCallableApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsCallUserCallableApiResponse(ILogger<ManagePopupsCallUserCallableApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePopupsCancelPopup(ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="managePopupsCancelPopupRequest"></param>
        /// <returns></returns>
        private void ValidateManagePopupsCancelPopup(ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest)
        {
            if (managePopupsCancelPopupRequest == null)
                throw new ArgumentNullException(nameof(managePopupsCancelPopupRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsCancelPopupRequest"></param>
        private void AfterManagePopupsCancelPopupDefaultImplementation(IManagePopupsCancelPopupApiResponse apiResponseLocalVar, ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest)
        {
            bool suppressDefaultLog = false;
            AfterManagePopupsCancelPopup(ref suppressDefaultLog, apiResponseLocalVar, managePopupsCancelPopupRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsCancelPopupRequest"></param>
        partial void AfterManagePopupsCancelPopup(ref bool suppressDefaultLog, IManagePopupsCancelPopupApiResponse apiResponseLocalVar, ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsCancelPopupRequest"></param>
        private void OnErrorManagePopupsCancelPopupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePopupsCancelPopup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, managePopupsCancelPopupRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsCancelPopupRequest"></param>
        partial void OnErrorManagePopupsCancelPopup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest);

        /// <summary>
        /// Try to cancel a popup 
        /// </summary>
        /// <param name="managePopupsCancelPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsCancelPopupApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsCancelPopupApiResponse?> ManagePopupsCancelPopupOrDefaultAsync(ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePopupsCancelPopupAsync(managePopupsCancelPopupRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Try to cancel a popup 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsCancelPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsCancelPopupApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsCancelPopupApiResponse> ManagePopupsCancelPopupAsync(ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManagePopupsCancelPopup(managePopupsCancelPopupRequest);

                FormatManagePopupsCancelPopup(managePopupsCancelPopupRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_popups/cancel_popup"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_popups/cancel_popup");

                    httpRequestMessageLocalVar.Content = (managePopupsCancelPopupRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(managePopupsCancelPopupRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManagePopupsCancelPopupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePopupsCancelPopupApiResponse>();
                        ManagePopupsCancelPopupApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_popups/cancel_popup", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManagePopupsCancelPopupDefaultImplementation(apiResponseLocalVar, managePopupsCancelPopupRequest);

                        Events.ExecuteOnManagePopupsCancelPopup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePopupsCancelPopupDefaultImplementation(e, "/manage_popups/cancel_popup", uriBuilderLocalVar.Path, managePopupsCancelPopupRequest);
                Events.ExecuteOnErrorManagePopupsCancelPopup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePopupsCancelPopupApiResponse"/>
        /// </summary>
        public partial class ManagePopupsCancelPopupApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePopupsCancelPopupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePopupsCancelPopupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePopupsCancelPopupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsCancelPopupApiResponse(ILogger<ManagePopupsCancelPopupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManagePopupsCancelPopupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsCancelPopupApiResponse(ILogger<ManagePopupsCancelPopupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePopupsDismissPopup(ManagePopupsDismissPopupRequest managePopupsDismissPopupRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="managePopupsDismissPopupRequest"></param>
        /// <returns></returns>
        private void ValidateManagePopupsDismissPopup(ManagePopupsDismissPopupRequest managePopupsDismissPopupRequest)
        {
            if (managePopupsDismissPopupRequest == null)
                throw new ArgumentNullException(nameof(managePopupsDismissPopupRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsDismissPopupRequest"></param>
        private void AfterManagePopupsDismissPopupDefaultImplementation(IManagePopupsDismissPopupApiResponse apiResponseLocalVar, ManagePopupsDismissPopupRequest managePopupsDismissPopupRequest)
        {
            bool suppressDefaultLog = false;
            AfterManagePopupsDismissPopup(ref suppressDefaultLog, apiResponseLocalVar, managePopupsDismissPopupRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsDismissPopupRequest"></param>
        partial void AfterManagePopupsDismissPopup(ref bool suppressDefaultLog, IManagePopupsDismissPopupApiResponse apiResponseLocalVar, ManagePopupsDismissPopupRequest managePopupsDismissPopupRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsDismissPopupRequest"></param>
        private void OnErrorManagePopupsDismissPopupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsDismissPopupRequest managePopupsDismissPopupRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePopupsDismissPopup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, managePopupsDismissPopupRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsDismissPopupRequest"></param>
        partial void OnErrorManagePopupsDismissPopup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsDismissPopupRequest managePopupsDismissPopupRequest);

        /// <summary>
        /// Dismiss a popup Dismiss a popup. This action is intended for observers (i.e., users who did not create the job). If the job is ongoing (not done), the dismissal has no effect. 
        /// </summary>
        /// <param name="managePopupsDismissPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsDismissPopupApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsDismissPopupApiResponse?> ManagePopupsDismissPopupOrDefaultAsync(ManagePopupsDismissPopupRequest managePopupsDismissPopupRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePopupsDismissPopupAsync(managePopupsDismissPopupRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Dismiss a popup Dismiss a popup. This action is intended for observers (i.e., users who did not create the job). If the job is ongoing (not done), the dismissal has no effect. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsDismissPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsDismissPopupApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsDismissPopupApiResponse> ManagePopupsDismissPopupAsync(ManagePopupsDismissPopupRequest managePopupsDismissPopupRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManagePopupsDismissPopup(managePopupsDismissPopupRequest);

                FormatManagePopupsDismissPopup(managePopupsDismissPopupRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_popups/dismiss_popup"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_popups/dismiss_popup");

                    httpRequestMessageLocalVar.Content = (managePopupsDismissPopupRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(managePopupsDismissPopupRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManagePopupsDismissPopupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePopupsDismissPopupApiResponse>();
                        ManagePopupsDismissPopupApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_popups/dismiss_popup", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManagePopupsDismissPopupDefaultImplementation(apiResponseLocalVar, managePopupsDismissPopupRequest);

                        Events.ExecuteOnManagePopupsDismissPopup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePopupsDismissPopupDefaultImplementation(e, "/manage_popups/dismiss_popup", uriBuilderLocalVar.Path, managePopupsDismissPopupRequest);
                Events.ExecuteOnErrorManagePopupsDismissPopup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePopupsDismissPopupApiResponse"/>
        /// </summary>
        public partial class ManagePopupsDismissPopupApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePopupsDismissPopupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePopupsDismissPopupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePopupsDismissPopupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsDismissPopupApiResponse(ILogger<ManagePopupsDismissPopupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManagePopupsDismissPopupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsDismissPopupApiResponse(ILogger<ManagePopupsDismissPopupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePopupsFinishAndDismissPopup(ManagePopupsFinishAndDismissPopupRequest managePopupsFinishAndDismissPopupRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="managePopupsFinishAndDismissPopupRequest"></param>
        /// <returns></returns>
        private void ValidateManagePopupsFinishAndDismissPopup(ManagePopupsFinishAndDismissPopupRequest managePopupsFinishAndDismissPopupRequest)
        {
            if (managePopupsFinishAndDismissPopupRequest == null)
                throw new ArgumentNullException(nameof(managePopupsFinishAndDismissPopupRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsFinishAndDismissPopupRequest"></param>
        private void AfterManagePopupsFinishAndDismissPopupDefaultImplementation(IManagePopupsFinishAndDismissPopupApiResponse apiResponseLocalVar, ManagePopupsFinishAndDismissPopupRequest managePopupsFinishAndDismissPopupRequest)
        {
            bool suppressDefaultLog = false;
            AfterManagePopupsFinishAndDismissPopup(ref suppressDefaultLog, apiResponseLocalVar, managePopupsFinishAndDismissPopupRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsFinishAndDismissPopupRequest"></param>
        partial void AfterManagePopupsFinishAndDismissPopup(ref bool suppressDefaultLog, IManagePopupsFinishAndDismissPopupApiResponse apiResponseLocalVar, ManagePopupsFinishAndDismissPopupRequest managePopupsFinishAndDismissPopupRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsFinishAndDismissPopupRequest"></param>
        private void OnErrorManagePopupsFinishAndDismissPopupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsFinishAndDismissPopupRequest managePopupsFinishAndDismissPopupRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePopupsFinishAndDismissPopup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, managePopupsFinishAndDismissPopupRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsFinishAndDismissPopupRequest"></param>
        partial void OnErrorManagePopupsFinishAndDismissPopup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsFinishAndDismissPopupRequest managePopupsFinishAndDismissPopupRequest);

        /// <summary>
        /// Finish and dismiss a popup Finish a popup job and dismiss it either immediately or after a delay.
        /// </summary>
        /// <param name="managePopupsFinishAndDismissPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsFinishAndDismissPopupApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsFinishAndDismissPopupApiResponse?> ManagePopupsFinishAndDismissPopupOrDefaultAsync(ManagePopupsFinishAndDismissPopupRequest managePopupsFinishAndDismissPopupRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePopupsFinishAndDismissPopupAsync(managePopupsFinishAndDismissPopupRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Finish and dismiss a popup Finish a popup job and dismiss it either immediately or after a delay.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsFinishAndDismissPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsFinishAndDismissPopupApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsFinishAndDismissPopupApiResponse> ManagePopupsFinishAndDismissPopupAsync(ManagePopupsFinishAndDismissPopupRequest managePopupsFinishAndDismissPopupRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManagePopupsFinishAndDismissPopup(managePopupsFinishAndDismissPopupRequest);

                FormatManagePopupsFinishAndDismissPopup(managePopupsFinishAndDismissPopupRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_popups/finish_and_dismiss_popup"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_popups/finish_and_dismiss_popup");

                    httpRequestMessageLocalVar.Content = (managePopupsFinishAndDismissPopupRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(managePopupsFinishAndDismissPopupRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManagePopupsFinishAndDismissPopupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePopupsFinishAndDismissPopupApiResponse>();
                        ManagePopupsFinishAndDismissPopupApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_popups/finish_and_dismiss_popup", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManagePopupsFinishAndDismissPopupDefaultImplementation(apiResponseLocalVar, managePopupsFinishAndDismissPopupRequest);

                        Events.ExecuteOnManagePopupsFinishAndDismissPopup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePopupsFinishAndDismissPopupDefaultImplementation(e, "/manage_popups/finish_and_dismiss_popup", uriBuilderLocalVar.Path, managePopupsFinishAndDismissPopupRequest);
                Events.ExecuteOnErrorManagePopupsFinishAndDismissPopup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePopupsFinishAndDismissPopupApiResponse"/>
        /// </summary>
        public partial class ManagePopupsFinishAndDismissPopupApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePopupsFinishAndDismissPopupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePopupsFinishAndDismissPopupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePopupsFinishAndDismissPopupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsFinishAndDismissPopupApiResponse(ILogger<ManagePopupsFinishAndDismissPopupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManagePopupsFinishAndDismissPopupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsFinishAndDismissPopupApiResponse(ILogger<ManagePopupsFinishAndDismissPopupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePopupsFinishPopup(ManagePopupsFinishPopupRequest managePopupsFinishPopupRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="managePopupsFinishPopupRequest"></param>
        /// <returns></returns>
        private void ValidateManagePopupsFinishPopup(ManagePopupsFinishPopupRequest managePopupsFinishPopupRequest)
        {
            if (managePopupsFinishPopupRequest == null)
                throw new ArgumentNullException(nameof(managePopupsFinishPopupRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsFinishPopupRequest"></param>
        private void AfterManagePopupsFinishPopupDefaultImplementation(IManagePopupsFinishPopupApiResponse apiResponseLocalVar, ManagePopupsFinishPopupRequest managePopupsFinishPopupRequest)
        {
            bool suppressDefaultLog = false;
            AfterManagePopupsFinishPopup(ref suppressDefaultLog, apiResponseLocalVar, managePopupsFinishPopupRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsFinishPopupRequest"></param>
        partial void AfterManagePopupsFinishPopup(ref bool suppressDefaultLog, IManagePopupsFinishPopupApiResponse apiResponseLocalVar, ManagePopupsFinishPopupRequest managePopupsFinishPopupRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsFinishPopupRequest"></param>
        private void OnErrorManagePopupsFinishPopupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsFinishPopupRequest managePopupsFinishPopupRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePopupsFinishPopup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, managePopupsFinishPopupRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsFinishPopupRequest"></param>
        partial void OnErrorManagePopupsFinishPopup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsFinishPopupRequest managePopupsFinishPopupRequest);

        /// <summary>
        /// Mark a popup as done Marks a popup job as done. This should only be used on jobs created by the caller. It clears pausable/cancellable statuses and sets &#x60;is_done&#x60;, allowing the user to dismiss the popup.
        /// </summary>
        /// <param name="managePopupsFinishPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsFinishPopupApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsFinishPopupApiResponse?> ManagePopupsFinishPopupOrDefaultAsync(ManagePopupsFinishPopupRequest managePopupsFinishPopupRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePopupsFinishPopupAsync(managePopupsFinishPopupRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Mark a popup as done Marks a popup job as done. This should only be used on jobs created by the caller. It clears pausable/cancellable statuses and sets &#x60;is_done&#x60;, allowing the user to dismiss the popup.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsFinishPopupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsFinishPopupApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsFinishPopupApiResponse> ManagePopupsFinishPopupAsync(ManagePopupsFinishPopupRequest managePopupsFinishPopupRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManagePopupsFinishPopup(managePopupsFinishPopupRequest);

                FormatManagePopupsFinishPopup(managePopupsFinishPopupRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_popups/finish_popup"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_popups/finish_popup");

                    httpRequestMessageLocalVar.Content = (managePopupsFinishPopupRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(managePopupsFinishPopupRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManagePopupsFinishPopupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePopupsFinishPopupApiResponse>();
                        ManagePopupsFinishPopupApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_popups/finish_popup", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManagePopupsFinishPopupDefaultImplementation(apiResponseLocalVar, managePopupsFinishPopupRequest);

                        Events.ExecuteOnManagePopupsFinishPopup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePopupsFinishPopupDefaultImplementation(e, "/manage_popups/finish_popup", uriBuilderLocalVar.Path, managePopupsFinishPopupRequest);
                Events.ExecuteOnErrorManagePopupsFinishPopup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePopupsFinishPopupApiResponse"/>
        /// </summary>
        public partial class ManagePopupsFinishPopupApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePopupsFinishPopupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePopupsFinishPopupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePopupsFinishPopupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsFinishPopupApiResponse(ILogger<ManagePopupsFinishPopupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManagePopupsFinishPopupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsFinishPopupApiResponse(ILogger<ManagePopupsFinishPopupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePopupsGetPopups(ref Option<bool> onlyInView);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="onlyInView"></param>
        private void AfterManagePopupsGetPopupsDefaultImplementation(IManagePopupsGetPopupsApiResponse apiResponseLocalVar, Option<bool> onlyInView)
        {
            bool suppressDefaultLog = false;
            AfterManagePopupsGetPopups(ref suppressDefaultLog, apiResponseLocalVar, onlyInView);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="onlyInView"></param>
        partial void AfterManagePopupsGetPopups(ref bool suppressDefaultLog, IManagePopupsGetPopupsApiResponse apiResponseLocalVar, Option<bool> onlyInView);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="onlyInView"></param>
        private void OnErrorManagePopupsGetPopupsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<bool> onlyInView)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePopupsGetPopups(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, onlyInView);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="onlyInView"></param>
        partial void OnErrorManagePopupsGetPopups(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<bool> onlyInView);

        /// <summary>
        /// Get a list of popups from the client Retrieves a list of popup job statuses currently active or recently completed in the client.
        /// </summary>
        /// <param name="onlyInView"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsGetPopupsApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsGetPopupsApiResponse?> ManagePopupsGetPopupsOrDefaultAsync(Option<bool> onlyInView = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePopupsGetPopupsAsync(onlyInView, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a list of popups from the client Retrieves a list of popup job statuses currently active or recently completed in the client.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyInView"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsGetPopupsApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsGetPopupsApiResponse> ManagePopupsGetPopupsAsync(Option<bool> onlyInView = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatManagePopupsGetPopups(ref onlyInView);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_popups/get_popups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_popups/get_popups");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (onlyInView.IsSet)
                        parseQueryStringLocalVar["only_in_view"] = ClientUtils.ParameterToString(onlyInView.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManagePopupsGetPopupsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePopupsGetPopupsApiResponse>();
                        ManagePopupsGetPopupsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_popups/get_popups", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManagePopupsGetPopupsDefaultImplementation(apiResponseLocalVar, onlyInView);

                        Events.ExecuteOnManagePopupsGetPopups(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePopupsGetPopupsDefaultImplementation(e, "/manage_popups/get_popups", uriBuilderLocalVar.Path, onlyInView);
                Events.ExecuteOnErrorManagePopupsGetPopups(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePopupsGetPopupsApiResponse"/>
        /// </summary>
        public partial class ManagePopupsGetPopupsApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePopupsGetPopupsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePopupsGetPopupsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePopupsGetPopupsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsGetPopupsApiResponse(ILogger<ManagePopupsGetPopupsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManagePopupsGetPopupsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsGetPopupsApiResponse(ILogger<ManagePopupsGetPopupsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.JobStatusesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.JobStatusesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.JobStatusesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePopupsUpdatePopuip(ManagePopupsUpdatePopuipRequest managePopupsUpdatePopuipRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="managePopupsUpdatePopuipRequest"></param>
        /// <returns></returns>
        private void ValidateManagePopupsUpdatePopuip(ManagePopupsUpdatePopuipRequest managePopupsUpdatePopuipRequest)
        {
            if (managePopupsUpdatePopuipRequest == null)
                throw new ArgumentNullException(nameof(managePopupsUpdatePopuipRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsUpdatePopuipRequest"></param>
        private void AfterManagePopupsUpdatePopuipDefaultImplementation(IManagePopupsUpdatePopuipApiResponse apiResponseLocalVar, ManagePopupsUpdatePopuipRequest managePopupsUpdatePopuipRequest)
        {
            bool suppressDefaultLog = false;
            AfterManagePopupsUpdatePopuip(ref suppressDefaultLog, apiResponseLocalVar, managePopupsUpdatePopuipRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePopupsUpdatePopuipRequest"></param>
        partial void AfterManagePopupsUpdatePopuip(ref bool suppressDefaultLog, IManagePopupsUpdatePopuipApiResponse apiResponseLocalVar, ManagePopupsUpdatePopuipRequest managePopupsUpdatePopuipRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsUpdatePopuipRequest"></param>
        private void OnErrorManagePopupsUpdatePopuipDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsUpdatePopuipRequest managePopupsUpdatePopuipRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePopupsUpdatePopuip(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, managePopupsUpdatePopuipRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePopupsUpdatePopuipRequest"></param>
        partial void OnErrorManagePopupsUpdatePopuip(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePopupsUpdatePopuipRequest managePopupsUpdatePopuipRequest);

        /// <summary>
        /// Update a popup Update a popup with a job status key and optional fields.
        /// </summary>
        /// <param name="managePopupsUpdatePopuipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsUpdatePopuipApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsUpdatePopuipApiResponse?> ManagePopupsUpdatePopuipOrDefaultAsync(ManagePopupsUpdatePopuipRequest managePopupsUpdatePopuipRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePopupsUpdatePopuipAsync(managePopupsUpdatePopuipRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a popup Update a popup with a job status key and optional fields.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePopupsUpdatePopuipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePopupsUpdatePopuipApiResponse"/>&gt;</returns>
        public async Task<IManagePopupsUpdatePopuipApiResponse> ManagePopupsUpdatePopuipAsync(ManagePopupsUpdatePopuipRequest managePopupsUpdatePopuipRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManagePopupsUpdatePopuip(managePopupsUpdatePopuipRequest);

                FormatManagePopupsUpdatePopuip(managePopupsUpdatePopuipRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_popups/update_popup"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_popups/update_popup");

                    httpRequestMessageLocalVar.Content = (managePopupsUpdatePopuipRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(managePopupsUpdatePopuipRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManagePopupsUpdatePopuipApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePopupsUpdatePopuipApiResponse>();
                        ManagePopupsUpdatePopuipApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_popups/update_popup", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManagePopupsUpdatePopuipDefaultImplementation(apiResponseLocalVar, managePopupsUpdatePopuipRequest);

                        Events.ExecuteOnManagePopupsUpdatePopuip(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePopupsUpdatePopuipDefaultImplementation(e, "/manage_popups/update_popup", uriBuilderLocalVar.Path, managePopupsUpdatePopuipRequest);
                Events.ExecuteOnErrorManagePopupsUpdatePopuip(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePopupsUpdatePopuipApiResponse"/>
        /// </summary>
        public partial class ManagePopupsUpdatePopuipApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePopupsUpdatePopuipApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePopupsUpdatePopuipApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePopupsUpdatePopuipApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsUpdatePopuipApiResponse(ILogger<ManagePopupsUpdatePopuipApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManagePopupsUpdatePopuipApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePopupsUpdatePopuipApiResponse(ILogger<ManagePopupsUpdatePopuipApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.ManagePopupsUpdatePopuip200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.ManagePopupsUpdatePopuip200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.ManagePopupsUpdatePopuip200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
