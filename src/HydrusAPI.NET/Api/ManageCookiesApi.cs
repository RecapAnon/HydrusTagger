// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using HydrusAPI.NET.Client;
using HydrusAPI.NET.Model;
using System.Diagnostics.CodeAnalysis;

namespace HydrusAPI.NET.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IManageCookiesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ManageCookiesApiEvents Events { get; }

        /// <summary>
        /// Get cookies for a specific domain
        /// </summary>
        /// <remarks>
        /// Retrieves cookies associated with the specified domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain for which to retrieve cookies</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageCookiesGetCookiesApiResponse"/>&gt;</returns>
        Task<IManageCookiesGetCookiesApiResponse> ManageCookiesGetCookiesAsync(string domain, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get cookies for a specific domain
        /// </summary>
        /// <remarks>
        /// Retrieves cookies associated with the specified domain.
        /// </remarks>
        /// <param name="domain">The domain for which to retrieve cookies</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageCookiesGetCookiesApiResponse"/>?&gt;</returns>
        Task<IManageCookiesGetCookiesApiResponse?> ManageCookiesGetCookiesOrDefaultAsync(string domain, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set cookies for the client
        /// </summary>
        /// <remarks>
        /// Sets new cookies for the client, useful for copying logins from a browser.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manageCookiesSetCookiesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageCookiesSetCookiesApiResponse"/>&gt;</returns>
        Task<IManageCookiesSetCookiesApiResponse> ManageCookiesSetCookiesAsync(ManageCookiesSetCookiesRequest manageCookiesSetCookiesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set cookies for the client
        /// </summary>
        /// <remarks>
        /// Sets new cookies for the client, useful for copying logins from a browser.
        /// </remarks>
        /// <param name="manageCookiesSetCookiesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageCookiesSetCookiesApiResponse"/>?&gt;</returns>
        Task<IManageCookiesSetCookiesApiResponse?> ManageCookiesSetCookiesOrDefaultAsync(ManageCookiesSetCookiesRequest manageCookiesSetCookiesRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IManageCookiesGetCookiesApiResponse"/>
    /// </summary>
    public interface IManageCookiesGetCookiesApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.ManageCookiesGetCookies200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManageCookiesSetCookiesApiResponse"/>
    /// </summary>
    public interface IManageCookiesSetCookiesApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.ManageCookiesSetCookies200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ManageCookiesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManageCookiesGetCookies;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManageCookiesGetCookies;

        internal void ExecuteOnManageCookiesGetCookies(ManageCookiesApi.ManageCookiesGetCookiesApiResponse apiResponse)
        {
            OnManageCookiesGetCookies?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManageCookiesGetCookies(Exception exception)
        {
            OnErrorManageCookiesGetCookies?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManageCookiesSetCookies;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManageCookiesSetCookies;

        internal void ExecuteOnManageCookiesSetCookies(ManageCookiesApi.ManageCookiesSetCookiesApiResponse apiResponse)
        {
            OnManageCookiesSetCookies?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManageCookiesSetCookies(Exception exception)
        {
            OnErrorManageCookiesSetCookies?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ManageCookiesApi : IManageCookiesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ManageCookiesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ManageCookiesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageCookiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageCookiesApi(ILogger<ManageCookiesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ManageCookiesApiEvents manageCookiesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ManageCookiesApi>();
            HttpClient = httpClient;
            Events = manageCookiesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatManageCookiesGetCookies(ref string domain);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="domain"></param>
        /// <returns></returns>
        private void ValidateManageCookiesGetCookies(string domain)
        {
            if (domain == null)
                throw new ArgumentNullException(nameof(domain));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="domain"></param>
        private void AfterManageCookiesGetCookiesDefaultImplementation(IManageCookiesGetCookiesApiResponse apiResponseLocalVar, string domain)
        {
            bool suppressDefaultLog = false;
            AfterManageCookiesGetCookies(ref suppressDefaultLog, apiResponseLocalVar, domain);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="domain"></param>
        partial void AfterManageCookiesGetCookies(ref bool suppressDefaultLog, IManageCookiesGetCookiesApiResponse apiResponseLocalVar, string domain);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="domain"></param>
        private void OnErrorManageCookiesGetCookiesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string domain)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManageCookiesGetCookies(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, domain);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="domain"></param>
        partial void OnErrorManageCookiesGetCookies(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string domain);

        /// <summary>
        /// Get cookies for a specific domain Retrieves cookies associated with the specified domain.
        /// </summary>
        /// <param name="domain">The domain for which to retrieve cookies</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageCookiesGetCookiesApiResponse"/>&gt;</returns>
        public async Task<IManageCookiesGetCookiesApiResponse?> ManageCookiesGetCookiesOrDefaultAsync(string domain, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManageCookiesGetCookiesAsync(domain, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get cookies for a specific domain Retrieves cookies associated with the specified domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain for which to retrieve cookies</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageCookiesGetCookiesApiResponse"/>&gt;</returns>
        public async Task<IManageCookiesGetCookiesApiResponse> ManageCookiesGetCookiesAsync(string domain, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManageCookiesGetCookies(domain);

                FormatManageCookiesGetCookies(ref domain);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_cookies/get_cookies"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_cookies/get_cookies");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["domain"] = ClientUtils.ParameterToString(domain);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManageCookiesGetCookiesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManageCookiesGetCookiesApiResponse>();
                        ManageCookiesGetCookiesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_cookies/get_cookies", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManageCookiesGetCookiesDefaultImplementation(apiResponseLocalVar, domain);

                        Events.ExecuteOnManageCookiesGetCookies(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManageCookiesGetCookiesDefaultImplementation(e, "/manage_cookies/get_cookies", uriBuilderLocalVar.Path, domain);
                Events.ExecuteOnErrorManageCookiesGetCookies(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManageCookiesGetCookiesApiResponse"/>
        /// </summary>
        public partial class ManageCookiesGetCookiesApiResponse : HydrusAPI.NET.Client.ApiResponse, IManageCookiesGetCookiesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManageCookiesGetCookiesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManageCookiesGetCookiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageCookiesGetCookiesApiResponse(ILogger<ManageCookiesGetCookiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManageCookiesGetCookiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageCookiesGetCookiesApiResponse(ILogger<ManageCookiesGetCookiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.ManageCookiesGetCookies200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.ManageCookiesGetCookies200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.ManageCookiesGetCookies200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManageCookiesSetCookies(ManageCookiesSetCookiesRequest manageCookiesSetCookiesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="manageCookiesSetCookiesRequest"></param>
        /// <returns></returns>
        private void ValidateManageCookiesSetCookies(ManageCookiesSetCookiesRequest manageCookiesSetCookiesRequest)
        {
            if (manageCookiesSetCookiesRequest == null)
                throw new ArgumentNullException(nameof(manageCookiesSetCookiesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manageCookiesSetCookiesRequest"></param>
        private void AfterManageCookiesSetCookiesDefaultImplementation(IManageCookiesSetCookiesApiResponse apiResponseLocalVar, ManageCookiesSetCookiesRequest manageCookiesSetCookiesRequest)
        {
            bool suppressDefaultLog = false;
            AfterManageCookiesSetCookies(ref suppressDefaultLog, apiResponseLocalVar, manageCookiesSetCookiesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manageCookiesSetCookiesRequest"></param>
        partial void AfterManageCookiesSetCookies(ref bool suppressDefaultLog, IManageCookiesSetCookiesApiResponse apiResponseLocalVar, ManageCookiesSetCookiesRequest manageCookiesSetCookiesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manageCookiesSetCookiesRequest"></param>
        private void OnErrorManageCookiesSetCookiesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManageCookiesSetCookiesRequest manageCookiesSetCookiesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManageCookiesSetCookies(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, manageCookiesSetCookiesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manageCookiesSetCookiesRequest"></param>
        partial void OnErrorManageCookiesSetCookies(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManageCookiesSetCookiesRequest manageCookiesSetCookiesRequest);

        /// <summary>
        /// Set cookies for the client Sets new cookies for the client, useful for copying logins from a browser.
        /// </summary>
        /// <param name="manageCookiesSetCookiesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageCookiesSetCookiesApiResponse"/>&gt;</returns>
        public async Task<IManageCookiesSetCookiesApiResponse?> ManageCookiesSetCookiesOrDefaultAsync(ManageCookiesSetCookiesRequest manageCookiesSetCookiesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManageCookiesSetCookiesAsync(manageCookiesSetCookiesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set cookies for the client Sets new cookies for the client, useful for copying logins from a browser.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manageCookiesSetCookiesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageCookiesSetCookiesApiResponse"/>&gt;</returns>
        public async Task<IManageCookiesSetCookiesApiResponse> ManageCookiesSetCookiesAsync(ManageCookiesSetCookiesRequest manageCookiesSetCookiesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManageCookiesSetCookies(manageCookiesSetCookiesRequest);

                FormatManageCookiesSetCookies(manageCookiesSetCookiesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_cookies/set_cookies"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_cookies/set_cookies");

                    httpRequestMessageLocalVar.Content = (manageCookiesSetCookiesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(manageCookiesSetCookiesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManageCookiesSetCookiesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManageCookiesSetCookiesApiResponse>();
                        ManageCookiesSetCookiesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_cookies/set_cookies", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManageCookiesSetCookiesDefaultImplementation(apiResponseLocalVar, manageCookiesSetCookiesRequest);

                        Events.ExecuteOnManageCookiesSetCookies(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManageCookiesSetCookiesDefaultImplementation(e, "/manage_cookies/set_cookies", uriBuilderLocalVar.Path, manageCookiesSetCookiesRequest);
                Events.ExecuteOnErrorManageCookiesSetCookies(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManageCookiesSetCookiesApiResponse"/>
        /// </summary>
        public partial class ManageCookiesSetCookiesApiResponse : HydrusAPI.NET.Client.ApiResponse, IManageCookiesSetCookiesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManageCookiesSetCookiesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManageCookiesSetCookiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageCookiesSetCookiesApiResponse(ILogger<ManageCookiesSetCookiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManageCookiesSetCookiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageCookiesSetCookiesApiResponse(ILogger<ManageCookiesSetCookiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.ManageCookiesSetCookies200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.ManageCookiesSetCookies200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.ManageCookiesSetCookies200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
