// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using HydrusAPI.NET.Client;
using HydrusAPI.NET.Model;
using System.Diagnostics.CodeAnalysis;

namespace HydrusAPI.NET.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IManagePagesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ManagePagesApiEvents Events { get; }

        /// <summary>
        /// Add files to a page
        /// </summary>
        /// <remarks>
        /// Appends files to a specified page. Restricted to users with &#39;Manage Pages&#39; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePagesAddFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesAddFilesApiResponse"/>&gt;</returns>
        Task<IManagePagesAddFilesApiResponse> ManagePagesAddFilesAsync(ManagePagesAddFilesRequest? managePagesAddFilesRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add files to a page
        /// </summary>
        /// <remarks>
        /// Appends files to a specified page. Restricted to users with &#39;Manage Pages&#39; permission.
        /// </remarks>
        /// <param name="managePagesAddFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesAddFilesApiResponse"/>?&gt;</returns>
        Task<IManagePagesAddFilesApiResponse?> ManagePagesAddFilesOrDefaultAsync(ManagePagesAddFilesRequest? managePagesAddFilesRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Focus a specific page in the GUI
        /// </summary>
        /// <remarks>
        /// Brings a specific page into focus in the main GUI. If the page is already in focus, no change is made.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePagesFocusPageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesFocusPageApiResponse"/>&gt;</returns>
        Task<IManagePagesFocusPageApiResponse> ManagePagesFocusPageAsync(ManagePagesFocusPageRequest managePagesFocusPageRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Focus a specific page in the GUI
        /// </summary>
        /// <remarks>
        /// Brings a specific page into focus in the main GUI. If the page is already in focus, no change is made.
        /// </remarks>
        /// <param name="managePagesFocusPageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesFocusPageApiResponse"/>?&gt;</returns>
        Task<IManagePagesFocusPageApiResponse?> ManagePagesFocusPageOrDefaultAsync(ManagePagesFocusPageRequest managePagesFocusPageRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get information about a specific page
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific page, primarily related to downloader pages. This endpoint is under construction and may return extensive data depending on the page type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageKey">The hexadecimal key of the page to retrieve info for, as returned by &#x60;/manage_pages/get_pages&#x60;.</param>
        /// <param name="simple">If true, returns a simplified version of the page info. If false, returns more detailed information, including all hashes in the media panel. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesGetPageInfoApiResponse"/>&gt;</returns>
        Task<IManagePagesGetPageInfoApiResponse> ManagePagesGetPageInfoAsync(string pageKey, Option<bool> simple = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get information about a specific page
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific page, primarily related to downloader pages. This endpoint is under construction and may return extensive data depending on the page type.
        /// </remarks>
        /// <param name="pageKey">The hexadecimal key of the page to retrieve info for, as returned by &#x60;/manage_pages/get_pages&#x60;.</param>
        /// <param name="simple">If true, returns a simplified version of the page info. If false, returns more detailed information, including all hashes in the media panel. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesGetPageInfoApiResponse"/>?&gt;</returns>
        Task<IManagePagesGetPageInfoApiResponse?> ManagePagesGetPageInfoOrDefaultAsync(string pageKey, Option<bool> simple = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the page structure of the current UI session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesGetPagesApiResponse"/>&gt;</returns>
        Task<IManagePagesGetPagesApiResponse> ManagePagesGetPagesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the page structure of the current UI session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesGetPagesApiResponse"/>?&gt;</returns>
        Task<IManagePagesGetPagesApiResponse?> ManagePagesGetPagesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Refresh a page in the main GUI
        /// </summary>
        /// <remarks>
        /// Refresh a page in the main GUI. This will cause file search pages to perform their search again and re-sort files for other page types.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePagesRefreshPageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesRefreshPageApiResponse"/>&gt;</returns>
        Task<IManagePagesRefreshPageApiResponse> ManagePagesRefreshPageAsync(ManagePagesRefreshPageRequest managePagesRefreshPageRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Refresh a page in the main GUI
        /// </summary>
        /// <remarks>
        /// Refresh a page in the main GUI. This will cause file search pages to perform their search again and re-sort files for other page types.
        /// </remarks>
        /// <param name="managePagesRefreshPageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesRefreshPageApiResponse"/>?&gt;</returns>
        Task<IManagePagesRefreshPageApiResponse?> ManagePagesRefreshPageOrDefaultAsync(ManagePagesRefreshPageRequest managePagesRefreshPageRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IManagePagesAddFilesApiResponse"/>
    /// </summary>
    public interface IManagePagesAddFilesApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }
    }

    /// <summary>
    /// The <see cref="IManagePagesFocusPageApiResponse"/>
    /// </summary>
    public interface IManagePagesFocusPageApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }
    }

    /// <summary>
    /// The <see cref="IManagePagesGetPageInfoApiResponse"/>
    /// </summary>
    public interface IManagePagesGetPageInfoApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.PageInfoResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManagePagesGetPagesApiResponse"/>
    /// </summary>
    public interface IManagePagesGetPagesApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.PagesResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManagePagesRefreshPageApiResponse"/>
    /// </summary>
    public interface IManagePagesRefreshPageApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ManagePagesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePagesAddFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePagesAddFiles;

        internal void ExecuteOnManagePagesAddFiles(ManagePagesApi.ManagePagesAddFilesApiResponse apiResponse)
        {
            OnManagePagesAddFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePagesAddFiles(Exception exception)
        {
            OnErrorManagePagesAddFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePagesFocusPage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePagesFocusPage;

        internal void ExecuteOnManagePagesFocusPage(ManagePagesApi.ManagePagesFocusPageApiResponse apiResponse)
        {
            OnManagePagesFocusPage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePagesFocusPage(Exception exception)
        {
            OnErrorManagePagesFocusPage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePagesGetPageInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePagesGetPageInfo;

        internal void ExecuteOnManagePagesGetPageInfo(ManagePagesApi.ManagePagesGetPageInfoApiResponse apiResponse)
        {
            OnManagePagesGetPageInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePagesGetPageInfo(Exception exception)
        {
            OnErrorManagePagesGetPageInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePagesGetPages;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePagesGetPages;

        internal void ExecuteOnManagePagesGetPages(ManagePagesApi.ManagePagesGetPagesApiResponse apiResponse)
        {
            OnManagePagesGetPages?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePagesGetPages(Exception exception)
        {
            OnErrorManagePagesGetPages?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManagePagesRefreshPage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManagePagesRefreshPage;

        internal void ExecuteOnManagePagesRefreshPage(ManagePagesApi.ManagePagesRefreshPageApiResponse apiResponse)
        {
            OnManagePagesRefreshPage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManagePagesRefreshPage(Exception exception)
        {
            OnErrorManagePagesRefreshPage?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ManagePagesApi : IManagePagesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ManagePagesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ManagePagesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagePagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagePagesApi(ILogger<ManagePagesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ManagePagesApiEvents managePagesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ManagePagesApi>();
            HttpClient = httpClient;
            Events = managePagesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatManagePagesAddFiles(ManagePagesAddFilesRequest? managePagesAddFilesRequest);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePagesAddFilesRequest"></param>
        private void AfterManagePagesAddFilesDefaultImplementation(IManagePagesAddFilesApiResponse apiResponseLocalVar, ManagePagesAddFilesRequest? managePagesAddFilesRequest)
        {
            bool suppressDefaultLog = false;
            AfterManagePagesAddFiles(ref suppressDefaultLog, apiResponseLocalVar, managePagesAddFilesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePagesAddFilesRequest"></param>
        partial void AfterManagePagesAddFiles(ref bool suppressDefaultLog, IManagePagesAddFilesApiResponse apiResponseLocalVar, ManagePagesAddFilesRequest? managePagesAddFilesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePagesAddFilesRequest"></param>
        private void OnErrorManagePagesAddFilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePagesAddFilesRequest? managePagesAddFilesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePagesAddFiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, managePagesAddFilesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePagesAddFilesRequest"></param>
        partial void OnErrorManagePagesAddFiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePagesAddFilesRequest? managePagesAddFilesRequest);

        /// <summary>
        /// Add files to a page Appends files to a specified page. Restricted to users with &#39;Manage Pages&#39; permission.
        /// </summary>
        /// <param name="managePagesAddFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesAddFilesApiResponse"/>&gt;</returns>
        public async Task<IManagePagesAddFilesApiResponse?> ManagePagesAddFilesOrDefaultAsync(ManagePagesAddFilesRequest? managePagesAddFilesRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePagesAddFilesAsync(managePagesAddFilesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add files to a page Appends files to a specified page. Restricted to users with &#39;Manage Pages&#39; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePagesAddFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesAddFilesApiResponse"/>&gt;</returns>
        public async Task<IManagePagesAddFilesApiResponse> ManagePagesAddFilesAsync(ManagePagesAddFilesRequest? managePagesAddFilesRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatManagePagesAddFiles(managePagesAddFilesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_pages/add_files"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_pages/add_files");

                    httpRequestMessageLocalVar.Content = (managePagesAddFilesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(managePagesAddFilesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ManagePagesAddFilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePagesAddFilesApiResponse>();

                        ManagePagesAddFilesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_pages/add_files", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterManagePagesAddFilesDefaultImplementation(apiResponseLocalVar, managePagesAddFilesRequest);

                        Events.ExecuteOnManagePagesAddFiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePagesAddFilesDefaultImplementation(e, "/manage_pages/add_files", uriBuilderLocalVar.Path, managePagesAddFilesRequest);
                Events.ExecuteOnErrorManagePagesAddFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePagesAddFilesApiResponse"/>
        /// </summary>
        public partial class ManagePagesAddFilesApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePagesAddFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePagesAddFilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePagesAddFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePagesAddFilesApiResponse(ILogger<ManagePagesAddFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePagesFocusPage(ManagePagesFocusPageRequest managePagesFocusPageRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="managePagesFocusPageRequest"></param>
        /// <returns></returns>
        private void ValidateManagePagesFocusPage(ManagePagesFocusPageRequest managePagesFocusPageRequest)
        {
            if (managePagesFocusPageRequest == null)
                throw new ArgumentNullException(nameof(managePagesFocusPageRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePagesFocusPageRequest"></param>
        private void AfterManagePagesFocusPageDefaultImplementation(IManagePagesFocusPageApiResponse apiResponseLocalVar, ManagePagesFocusPageRequest managePagesFocusPageRequest)
        {
            bool suppressDefaultLog = false;
            AfterManagePagesFocusPage(ref suppressDefaultLog, apiResponseLocalVar, managePagesFocusPageRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePagesFocusPageRequest"></param>
        partial void AfterManagePagesFocusPage(ref bool suppressDefaultLog, IManagePagesFocusPageApiResponse apiResponseLocalVar, ManagePagesFocusPageRequest managePagesFocusPageRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePagesFocusPageRequest"></param>
        private void OnErrorManagePagesFocusPageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePagesFocusPageRequest managePagesFocusPageRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePagesFocusPage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, managePagesFocusPageRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePagesFocusPageRequest"></param>
        partial void OnErrorManagePagesFocusPage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePagesFocusPageRequest managePagesFocusPageRequest);

        /// <summary>
        /// Focus a specific page in the GUI Brings a specific page into focus in the main GUI. If the page is already in focus, no change is made.
        /// </summary>
        /// <param name="managePagesFocusPageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesFocusPageApiResponse"/>&gt;</returns>
        public async Task<IManagePagesFocusPageApiResponse?> ManagePagesFocusPageOrDefaultAsync(ManagePagesFocusPageRequest managePagesFocusPageRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePagesFocusPageAsync(managePagesFocusPageRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Focus a specific page in the GUI Brings a specific page into focus in the main GUI. If the page is already in focus, no change is made.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePagesFocusPageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesFocusPageApiResponse"/>&gt;</returns>
        public async Task<IManagePagesFocusPageApiResponse> ManagePagesFocusPageAsync(ManagePagesFocusPageRequest managePagesFocusPageRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManagePagesFocusPage(managePagesFocusPageRequest);

                FormatManagePagesFocusPage(managePagesFocusPageRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_pages/focus_page"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_pages/focus_page");

                    httpRequestMessageLocalVar.Content = (managePagesFocusPageRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(managePagesFocusPageRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ManagePagesFocusPageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePagesFocusPageApiResponse>();

                        ManagePagesFocusPageApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_pages/focus_page", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterManagePagesFocusPageDefaultImplementation(apiResponseLocalVar, managePagesFocusPageRequest);

                        Events.ExecuteOnManagePagesFocusPage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePagesFocusPageDefaultImplementation(e, "/manage_pages/focus_page", uriBuilderLocalVar.Path, managePagesFocusPageRequest);
                Events.ExecuteOnErrorManagePagesFocusPage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePagesFocusPageApiResponse"/>
        /// </summary>
        public partial class ManagePagesFocusPageApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePagesFocusPageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePagesFocusPageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePagesFocusPageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePagesFocusPageApiResponse(ILogger<ManagePagesFocusPageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePagesGetPageInfo(ref string pageKey, ref Option<bool> simple);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageKey"></param>
        /// <returns></returns>
        private void ValidateManagePagesGetPageInfo(string pageKey)
        {
            if (pageKey == null)
                throw new ArgumentNullException(nameof(pageKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pageKey"></param>
        /// <param name="simple"></param>
        private void AfterManagePagesGetPageInfoDefaultImplementation(IManagePagesGetPageInfoApiResponse apiResponseLocalVar, string pageKey, Option<bool> simple)
        {
            bool suppressDefaultLog = false;
            AfterManagePagesGetPageInfo(ref suppressDefaultLog, apiResponseLocalVar, pageKey, simple);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pageKey"></param>
        /// <param name="simple"></param>
        partial void AfterManagePagesGetPageInfo(ref bool suppressDefaultLog, IManagePagesGetPageInfoApiResponse apiResponseLocalVar, string pageKey, Option<bool> simple);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pageKey"></param>
        /// <param name="simple"></param>
        private void OnErrorManagePagesGetPageInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pageKey, Option<bool> simple)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePagesGetPageInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, pageKey, simple);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pageKey"></param>
        /// <param name="simple"></param>
        partial void OnErrorManagePagesGetPageInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pageKey, Option<bool> simple);

        /// <summary>
        /// Get information about a specific page Retrieves detailed information about a specific page, primarily related to downloader pages. This endpoint is under construction and may return extensive data depending on the page type.
        /// </summary>
        /// <param name="pageKey">The hexadecimal key of the page to retrieve info for, as returned by &#x60;/manage_pages/get_pages&#x60;.</param>
        /// <param name="simple">If true, returns a simplified version of the page info. If false, returns more detailed information, including all hashes in the media panel. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesGetPageInfoApiResponse"/>&gt;</returns>
        public async Task<IManagePagesGetPageInfoApiResponse?> ManagePagesGetPageInfoOrDefaultAsync(string pageKey, Option<bool> simple = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePagesGetPageInfoAsync(pageKey, simple, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get information about a specific page Retrieves detailed information about a specific page, primarily related to downloader pages. This endpoint is under construction and may return extensive data depending on the page type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageKey">The hexadecimal key of the page to retrieve info for, as returned by &#x60;/manage_pages/get_pages&#x60;.</param>
        /// <param name="simple">If true, returns a simplified version of the page info. If false, returns more detailed information, including all hashes in the media panel. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesGetPageInfoApiResponse"/>&gt;</returns>
        public async Task<IManagePagesGetPageInfoApiResponse> ManagePagesGetPageInfoAsync(string pageKey, Option<bool> simple = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManagePagesGetPageInfo(pageKey);

                FormatManagePagesGetPageInfo(ref pageKey, ref simple);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_pages/get_page_info"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_pages/get_page_info");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["page_key"] = ClientUtils.ParameterToString(pageKey);

                    if (simple.IsSet)
                        parseQueryStringLocalVar["simple"] = ClientUtils.ParameterToString(simple.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ManagePagesGetPageInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePagesGetPageInfoApiResponse>();

                        ManagePagesGetPageInfoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_pages/get_page_info", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterManagePagesGetPageInfoDefaultImplementation(apiResponseLocalVar, pageKey, simple);

                        Events.ExecuteOnManagePagesGetPageInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePagesGetPageInfoDefaultImplementation(e, "/manage_pages/get_page_info", uriBuilderLocalVar.Path, pageKey, simple);
                Events.ExecuteOnErrorManagePagesGetPageInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePagesGetPageInfoApiResponse"/>
        /// </summary>
        public partial class ManagePagesGetPageInfoApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePagesGetPageInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePagesGetPageInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePagesGetPageInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePagesGetPageInfoApiResponse(ILogger<ManagePagesGetPageInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.PageInfoResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.PageInfoResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.PageInfoResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterManagePagesGetPagesDefaultImplementation(IManagePagesGetPagesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterManagePagesGetPages(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterManagePagesGetPages(ref bool suppressDefaultLog, IManagePagesGetPagesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorManagePagesGetPagesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePagesGetPages(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorManagePagesGetPages(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get the page structure of the current UI session. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesGetPagesApiResponse"/>&gt;</returns>
        public async Task<IManagePagesGetPagesApiResponse?> ManagePagesGetPagesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePagesGetPagesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the page structure of the current UI session. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesGetPagesApiResponse"/>&gt;</returns>
        public async Task<IManagePagesGetPagesApiResponse> ManagePagesGetPagesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_pages/get_pages"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_pages/get_pages");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ManagePagesGetPagesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePagesGetPagesApiResponse>();

                        ManagePagesGetPagesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_pages/get_pages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterManagePagesGetPagesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnManagePagesGetPages(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePagesGetPagesDefaultImplementation(e, "/manage_pages/get_pages", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorManagePagesGetPages(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePagesGetPagesApiResponse"/>
        /// </summary>
        public partial class ManagePagesGetPagesApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePagesGetPagesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePagesGetPagesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePagesGetPagesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePagesGetPagesApiResponse(ILogger<ManagePagesGetPagesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.PagesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.PagesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.PagesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManagePagesRefreshPage(ManagePagesRefreshPageRequest managePagesRefreshPageRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="managePagesRefreshPageRequest"></param>
        /// <returns></returns>
        private void ValidateManagePagesRefreshPage(ManagePagesRefreshPageRequest managePagesRefreshPageRequest)
        {
            if (managePagesRefreshPageRequest == null)
                throw new ArgumentNullException(nameof(managePagesRefreshPageRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePagesRefreshPageRequest"></param>
        private void AfterManagePagesRefreshPageDefaultImplementation(IManagePagesRefreshPageApiResponse apiResponseLocalVar, ManagePagesRefreshPageRequest managePagesRefreshPageRequest)
        {
            bool suppressDefaultLog = false;
            AfterManagePagesRefreshPage(ref suppressDefaultLog, apiResponseLocalVar, managePagesRefreshPageRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="managePagesRefreshPageRequest"></param>
        partial void AfterManagePagesRefreshPage(ref bool suppressDefaultLog, IManagePagesRefreshPageApiResponse apiResponseLocalVar, ManagePagesRefreshPageRequest managePagesRefreshPageRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePagesRefreshPageRequest"></param>
        private void OnErrorManagePagesRefreshPageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePagesRefreshPageRequest managePagesRefreshPageRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManagePagesRefreshPage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, managePagesRefreshPageRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="managePagesRefreshPageRequest"></param>
        partial void OnErrorManagePagesRefreshPage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManagePagesRefreshPageRequest managePagesRefreshPageRequest);

        /// <summary>
        /// Refresh a page in the main GUI Refresh a page in the main GUI. This will cause file search pages to perform their search again and re-sort files for other page types.
        /// </summary>
        /// <param name="managePagesRefreshPageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesRefreshPageApiResponse"/>&gt;</returns>
        public async Task<IManagePagesRefreshPageApiResponse?> ManagePagesRefreshPageOrDefaultAsync(ManagePagesRefreshPageRequest managePagesRefreshPageRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManagePagesRefreshPageAsync(managePagesRefreshPageRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Refresh a page in the main GUI Refresh a page in the main GUI. This will cause file search pages to perform their search again and re-sort files for other page types.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePagesRefreshPageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManagePagesRefreshPageApiResponse"/>&gt;</returns>
        public async Task<IManagePagesRefreshPageApiResponse> ManagePagesRefreshPageAsync(ManagePagesRefreshPageRequest managePagesRefreshPageRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManagePagesRefreshPage(managePagesRefreshPageRequest);

                FormatManagePagesRefreshPage(managePagesRefreshPageRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_pages/refresh_page"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_pages/refresh_page");

                    httpRequestMessageLocalVar.Content = (managePagesRefreshPageRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(managePagesRefreshPageRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ManagePagesRefreshPageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManagePagesRefreshPageApiResponse>();

                        ManagePagesRefreshPageApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_pages/refresh_page", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterManagePagesRefreshPageDefaultImplementation(apiResponseLocalVar, managePagesRefreshPageRequest);

                        Events.ExecuteOnManagePagesRefreshPage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManagePagesRefreshPageDefaultImplementation(e, "/manage_pages/refresh_page", uriBuilderLocalVar.Path, managePagesRefreshPageRequest);
                Events.ExecuteOnErrorManagePagesRefreshPage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManagePagesRefreshPageApiResponse"/>
        /// </summary>
        public partial class ManagePagesRefreshPageApiResponse : HydrusAPI.NET.Client.ApiResponse, IManagePagesRefreshPageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManagePagesRefreshPageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManagePagesRefreshPageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManagePagesRefreshPageApiResponse(ILogger<ManagePagesRefreshPageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
