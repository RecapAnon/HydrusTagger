// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using HydrusAPI.NET.Client;
using HydrusAPI.NET.Model;
using System.Diagnostics.CodeAnalysis;

namespace HydrusAPI.NET.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAddUrlsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AddUrlsApiEvents Events { get; }

        /// <summary>
        /// Add a URL for import
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUrlsAddUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsAddUrlApiResponse"/>&gt;</returns>
        Task<IAddUrlsAddUrlApiResponse> AddUrlsAddUrlAsync(AddUrlsAddUrlRequest addUrlsAddUrlRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a URL for import
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="addUrlsAddUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsAddUrlApiResponse"/>?&gt;</returns>
        Task<IAddUrlsAddUrlApiResponse?> AddUrlsAddUrlOrDefaultAsync(AddUrlsAddUrlRequest addUrlsAddUrlRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Associate or disassociate URLs with files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsAssociateUrlApiResponse"/>&gt;</returns>
        Task<IAddUrlsAssociateUrlApiResponse> AddUrlsAssociateUrlAsync(AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Associate or disassociate URLs with files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsAssociateUrlApiResponse"/>?&gt;</returns>
        Task<IAddUrlsAssociateUrlApiResponse?> AddUrlsAssociateUrlOrDefaultAsync(AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Ask the client about a URL&#39;s files.
        /// </summary>
        /// <remarks>
        /// Returns information about files associated with the given URL. Requires the &#39;Import URLs&#39; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="doublecheckFileSystem"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsGetUrlFilesApiResponse"/>&gt;</returns>
        Task<IAddUrlsGetUrlFilesApiResponse> AddUrlsGetUrlFilesAsync(string url, Option<bool> doublecheckFileSystem = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Ask the client about a URL&#39;s files.
        /// </summary>
        /// <remarks>
        /// Returns information about files associated with the given URL. Requires the &#39;Import URLs&#39; permission.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="doublecheckFileSystem"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsGetUrlFilesApiResponse"/>?&gt;</returns>
        Task<IAddUrlsGetUrlFilesApiResponse?> AddUrlsGetUrlFilesOrDefaultAsync(string url, Option<bool> doublecheckFileSystem = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get information about a URL.
        /// </summary>
        /// <remarks>
        /// Returns metadata such as the normalized URL, URL type, and whether the client can parse it.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsGetUrlInfoApiResponse"/>&gt;</returns>
        Task<IAddUrlsGetUrlInfoApiResponse> AddUrlsGetUrlInfoAsync(string url, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get information about a URL.
        /// </summary>
        /// <remarks>
        /// Returns metadata such as the normalized URL, URL type, and whether the client can parse it.
        /// </remarks>
        /// <param name="url"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsGetUrlInfoApiResponse"/>?&gt;</returns>
        Task<IAddUrlsGetUrlInfoApiResponse?> AddUrlsGetUrlInfoOrDefaultAsync(string url, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddUrlsAddUrlApiResponse"/>
    /// </summary>
    public interface IAddUrlsAddUrlApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.AddUrlsAddUrl200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IAddUrlsAssociateUrlApiResponse"/>
    /// </summary>
    public interface IAddUrlsAssociateUrlApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IAddUrlsGetUrlFilesApiResponse"/>
    /// </summary>
    public interface IAddUrlsGetUrlFilesApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.AddUrlsGetUrlFiles200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IAddUrlsGetUrlInfoApiResponse"/>
    /// </summary>
    public interface IAddUrlsGetUrlInfoApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.UrlInfo?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AddUrlsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddUrlsAddUrl;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddUrlsAddUrl;

        internal void ExecuteOnAddUrlsAddUrl(AddUrlsApi.AddUrlsAddUrlApiResponse apiResponse)
        {
            OnAddUrlsAddUrl?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddUrlsAddUrl(Exception exception)
        {
            OnErrorAddUrlsAddUrl?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddUrlsAssociateUrl;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddUrlsAssociateUrl;

        internal void ExecuteOnAddUrlsAssociateUrl(AddUrlsApi.AddUrlsAssociateUrlApiResponse apiResponse)
        {
            OnAddUrlsAssociateUrl?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddUrlsAssociateUrl(Exception exception)
        {
            OnErrorAddUrlsAssociateUrl?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddUrlsGetUrlFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddUrlsGetUrlFiles;

        internal void ExecuteOnAddUrlsGetUrlFiles(AddUrlsApi.AddUrlsGetUrlFilesApiResponse apiResponse)
        {
            OnAddUrlsGetUrlFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddUrlsGetUrlFiles(Exception exception)
        {
            OnErrorAddUrlsGetUrlFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddUrlsGetUrlInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddUrlsGetUrlInfo;

        internal void ExecuteOnAddUrlsGetUrlInfo(AddUrlsApi.AddUrlsGetUrlInfoApiResponse apiResponse)
        {
            OnAddUrlsGetUrlInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddUrlsGetUrlInfo(Exception exception)
        {
            OnErrorAddUrlsGetUrlInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AddUrlsApi : IAddUrlsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AddUrlsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AddUrlsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddUrlsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddUrlsApi(ILogger<AddUrlsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AddUrlsApiEvents addUrlsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AddUrlsApi>();
            HttpClient = httpClient;
            Events = addUrlsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatAddUrlsAddUrl(AddUrlsAddUrlRequest addUrlsAddUrlRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addUrlsAddUrlRequest"></param>
        /// <returns></returns>
        private void ValidateAddUrlsAddUrl(AddUrlsAddUrlRequest addUrlsAddUrlRequest)
        {
            if (addUrlsAddUrlRequest == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrlRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addUrlsAddUrlRequest"></param>
        private void AfterAddUrlsAddUrlDefaultImplementation(IAddUrlsAddUrlApiResponse apiResponseLocalVar, AddUrlsAddUrlRequest addUrlsAddUrlRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddUrlsAddUrl(ref suppressDefaultLog, apiResponseLocalVar, addUrlsAddUrlRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addUrlsAddUrlRequest"></param>
        partial void AfterAddUrlsAddUrl(ref bool suppressDefaultLog, IAddUrlsAddUrlApiResponse apiResponseLocalVar, AddUrlsAddUrlRequest addUrlsAddUrlRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addUrlsAddUrlRequest"></param>
        private void OnErrorAddUrlsAddUrlDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddUrlsAddUrlRequest addUrlsAddUrlRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddUrlsAddUrl(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addUrlsAddUrlRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addUrlsAddUrlRequest"></param>
        partial void OnErrorAddUrlsAddUrl(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddUrlsAddUrlRequest addUrlsAddUrlRequest);

        /// <summary>
        /// Add a URL for import 
        /// </summary>
        /// <param name="addUrlsAddUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsAddUrlApiResponse"/>&gt;</returns>
        public async Task<IAddUrlsAddUrlApiResponse?> AddUrlsAddUrlOrDefaultAsync(AddUrlsAddUrlRequest addUrlsAddUrlRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddUrlsAddUrlAsync(addUrlsAddUrlRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add a URL for import 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUrlsAddUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsAddUrlApiResponse"/>&gt;</returns>
        public async Task<IAddUrlsAddUrlApiResponse> AddUrlsAddUrlAsync(AddUrlsAddUrlRequest addUrlsAddUrlRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddUrlsAddUrl(addUrlsAddUrlRequest);

                FormatAddUrlsAddUrl(addUrlsAddUrlRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_urls/add_url"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_urls/add_url");

                    httpRequestMessageLocalVar.Content = (addUrlsAddUrlRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addUrlsAddUrlRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddUrlsAddUrlApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddUrlsAddUrlApiResponse>();
                        AddUrlsAddUrlApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_urls/add_url", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddUrlsAddUrlDefaultImplementation(apiResponseLocalVar, addUrlsAddUrlRequest);

                        Events.ExecuteOnAddUrlsAddUrl(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddUrlsAddUrlDefaultImplementation(e, "/add_urls/add_url", uriBuilderLocalVar.Path, addUrlsAddUrlRequest);
                Events.ExecuteOnErrorAddUrlsAddUrl(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddUrlsAddUrlApiResponse"/>
        /// </summary>
        public partial class AddUrlsAddUrlApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddUrlsAddUrlApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddUrlsAddUrlApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddUrlsAddUrlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUrlsAddUrlApiResponse(ILogger<AddUrlsAddUrlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddUrlsAddUrlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUrlsAddUrlApiResponse(ILogger<AddUrlsAddUrlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.AddUrlsAddUrl200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.AddUrlsAddUrl200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.AddUrlsAddUrl200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddUrlsAssociateUrl(AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        /// <returns></returns>
        private void ValidateAddUrlsAssociateUrl(AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest)
        {
            if (addUrlsAssociateUrlRequest == null)
                throw new ArgumentNullException(nameof(addUrlsAssociateUrlRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        private void AfterAddUrlsAssociateUrlDefaultImplementation(IAddUrlsAssociateUrlApiResponse apiResponseLocalVar, AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddUrlsAssociateUrl(ref suppressDefaultLog, apiResponseLocalVar, addUrlsAssociateUrlRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        partial void AfterAddUrlsAssociateUrl(ref bool suppressDefaultLog, IAddUrlsAssociateUrlApiResponse apiResponseLocalVar, AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        private void OnErrorAddUrlsAssociateUrlDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddUrlsAssociateUrl(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addUrlsAssociateUrlRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        partial void OnErrorAddUrlsAssociateUrl(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest);

        /// <summary>
        /// Associate or disassociate URLs with files 
        /// </summary>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsAssociateUrlApiResponse"/>&gt;</returns>
        public async Task<IAddUrlsAssociateUrlApiResponse?> AddUrlsAssociateUrlOrDefaultAsync(AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddUrlsAssociateUrlAsync(addUrlsAssociateUrlRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Associate or disassociate URLs with files 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsAssociateUrlApiResponse"/>&gt;</returns>
        public async Task<IAddUrlsAssociateUrlApiResponse> AddUrlsAssociateUrlAsync(AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddUrlsAssociateUrl(addUrlsAssociateUrlRequest);

                FormatAddUrlsAssociateUrl(addUrlsAssociateUrlRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_urls/associate_url"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_urls/associate_url");

                    httpRequestMessageLocalVar.Content = (addUrlsAssociateUrlRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addUrlsAssociateUrlRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddUrlsAssociateUrlApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddUrlsAssociateUrlApiResponse>();
                        AddUrlsAssociateUrlApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_urls/associate_url", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddUrlsAssociateUrlDefaultImplementation(apiResponseLocalVar, addUrlsAssociateUrlRequest);

                        Events.ExecuteOnAddUrlsAssociateUrl(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddUrlsAssociateUrlDefaultImplementation(e, "/add_urls/associate_url", uriBuilderLocalVar.Path, addUrlsAssociateUrlRequest);
                Events.ExecuteOnErrorAddUrlsAssociateUrl(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddUrlsAssociateUrlApiResponse"/>
        /// </summary>
        public partial class AddUrlsAssociateUrlApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddUrlsAssociateUrlApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddUrlsAssociateUrlApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddUrlsAssociateUrlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUrlsAssociateUrlApiResponse(ILogger<AddUrlsAssociateUrlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddUrlsAssociateUrlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUrlsAssociateUrlApiResponse(ILogger<AddUrlsAssociateUrlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddUrlsGetUrlFiles(ref string url, ref Option<bool> doublecheckFileSystem);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="url"></param>
        /// <returns></returns>
        private void ValidateAddUrlsGetUrlFiles(string url)
        {
            if (url == null)
                throw new ArgumentNullException(nameof(url));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="url"></param>
        /// <param name="doublecheckFileSystem"></param>
        private void AfterAddUrlsGetUrlFilesDefaultImplementation(IAddUrlsGetUrlFilesApiResponse apiResponseLocalVar, string url, Option<bool> doublecheckFileSystem)
        {
            bool suppressDefaultLog = false;
            AfterAddUrlsGetUrlFiles(ref suppressDefaultLog, apiResponseLocalVar, url, doublecheckFileSystem);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="url"></param>
        /// <param name="doublecheckFileSystem"></param>
        partial void AfterAddUrlsGetUrlFiles(ref bool suppressDefaultLog, IAddUrlsGetUrlFilesApiResponse apiResponseLocalVar, string url, Option<bool> doublecheckFileSystem);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="url"></param>
        /// <param name="doublecheckFileSystem"></param>
        private void OnErrorAddUrlsGetUrlFilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string url, Option<bool> doublecheckFileSystem)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddUrlsGetUrlFiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, url, doublecheckFileSystem);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="url"></param>
        /// <param name="doublecheckFileSystem"></param>
        partial void OnErrorAddUrlsGetUrlFiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string url, Option<bool> doublecheckFileSystem);

        /// <summary>
        /// Ask the client about a URL&#39;s files. Returns information about files associated with the given URL. Requires the &#39;Import URLs&#39; permission.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="doublecheckFileSystem"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsGetUrlFilesApiResponse"/>&gt;</returns>
        public async Task<IAddUrlsGetUrlFilesApiResponse?> AddUrlsGetUrlFilesOrDefaultAsync(string url, Option<bool> doublecheckFileSystem = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddUrlsGetUrlFilesAsync(url, doublecheckFileSystem, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Ask the client about a URL&#39;s files. Returns information about files associated with the given URL. Requires the &#39;Import URLs&#39; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="doublecheckFileSystem"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsGetUrlFilesApiResponse"/>&gt;</returns>
        public async Task<IAddUrlsGetUrlFilesApiResponse> AddUrlsGetUrlFilesAsync(string url, Option<bool> doublecheckFileSystem = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddUrlsGetUrlFiles(url);

                FormatAddUrlsGetUrlFiles(ref url, ref doublecheckFileSystem);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_urls/get_url_files"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_urls/get_url_files");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["url"] = ClientUtils.ParameterToString(url);

                    if (doublecheckFileSystem.IsSet)
                        parseQueryStringLocalVar["doublecheck_file_system"] = ClientUtils.ParameterToString(doublecheckFileSystem.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddUrlsGetUrlFilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddUrlsGetUrlFilesApiResponse>();
                        AddUrlsGetUrlFilesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_urls/get_url_files", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddUrlsGetUrlFilesDefaultImplementation(apiResponseLocalVar, url, doublecheckFileSystem);

                        Events.ExecuteOnAddUrlsGetUrlFiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddUrlsGetUrlFilesDefaultImplementation(e, "/add_urls/get_url_files", uriBuilderLocalVar.Path, url, doublecheckFileSystem);
                Events.ExecuteOnErrorAddUrlsGetUrlFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddUrlsGetUrlFilesApiResponse"/>
        /// </summary>
        public partial class AddUrlsGetUrlFilesApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddUrlsGetUrlFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddUrlsGetUrlFilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddUrlsGetUrlFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUrlsGetUrlFilesApiResponse(ILogger<AddUrlsGetUrlFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddUrlsGetUrlFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUrlsGetUrlFilesApiResponse(ILogger<AddUrlsGetUrlFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.AddUrlsGetUrlFiles200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.AddUrlsGetUrlFiles200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.AddUrlsGetUrlFiles200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddUrlsGetUrlInfo(ref string url);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="url"></param>
        /// <returns></returns>
        private void ValidateAddUrlsGetUrlInfo(string url)
        {
            if (url == null)
                throw new ArgumentNullException(nameof(url));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="url"></param>
        private void AfterAddUrlsGetUrlInfoDefaultImplementation(IAddUrlsGetUrlInfoApiResponse apiResponseLocalVar, string url)
        {
            bool suppressDefaultLog = false;
            AfterAddUrlsGetUrlInfo(ref suppressDefaultLog, apiResponseLocalVar, url);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="url"></param>
        partial void AfterAddUrlsGetUrlInfo(ref bool suppressDefaultLog, IAddUrlsGetUrlInfoApiResponse apiResponseLocalVar, string url);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="url"></param>
        private void OnErrorAddUrlsGetUrlInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string url)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddUrlsGetUrlInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, url);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="url"></param>
        partial void OnErrorAddUrlsGetUrlInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string url);

        /// <summary>
        /// Get information about a URL. Returns metadata such as the normalized URL, URL type, and whether the client can parse it.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsGetUrlInfoApiResponse"/>&gt;</returns>
        public async Task<IAddUrlsGetUrlInfoApiResponse?> AddUrlsGetUrlInfoOrDefaultAsync(string url, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddUrlsGetUrlInfoAsync(url, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get information about a URL. Returns metadata such as the normalized URL, URL type, and whether the client can parse it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUrlsGetUrlInfoApiResponse"/>&gt;</returns>
        public async Task<IAddUrlsGetUrlInfoApiResponse> AddUrlsGetUrlInfoAsync(string url, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddUrlsGetUrlInfo(url);

                FormatAddUrlsGetUrlInfo(ref url);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_urls/get_url_info"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_urls/get_url_info");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["url"] = ClientUtils.ParameterToString(url);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddUrlsGetUrlInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddUrlsGetUrlInfoApiResponse>();
                        AddUrlsGetUrlInfoApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_urls/get_url_info", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddUrlsGetUrlInfoDefaultImplementation(apiResponseLocalVar, url);

                        Events.ExecuteOnAddUrlsGetUrlInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddUrlsGetUrlInfoDefaultImplementation(e, "/add_urls/get_url_info", uriBuilderLocalVar.Path, url);
                Events.ExecuteOnErrorAddUrlsGetUrlInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddUrlsGetUrlInfoApiResponse"/>
        /// </summary>
        public partial class AddUrlsGetUrlInfoApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddUrlsGetUrlInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddUrlsGetUrlInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddUrlsGetUrlInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUrlsGetUrlInfoApiResponse(ILogger<AddUrlsGetUrlInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddUrlsGetUrlInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUrlsGetUrlInfoApiResponse(ILogger<AddUrlsGetUrlInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.UrlInfo? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.UrlInfo>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.UrlInfo? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
