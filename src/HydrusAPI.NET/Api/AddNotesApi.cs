// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using HydrusAPI.NET.Client;
using HydrusAPI.NET.Model;
using System.Diagnostics.CodeAnalysis;

namespace HydrusAPI.NET.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAddNotesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AddNotesApiEvents Events { get; }

        /// <summary>
        /// Remove notes associated with a file
        /// </summary>
        /// <remarks>
        /// Deletes one or more named notes from a specified file by hash or file ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addNotesDeleteNotesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddNotesDeleteNotesApiResponse"/>&gt;</returns>
        Task<IAddNotesDeleteNotesApiResponse> AddNotesDeleteNotesAsync(AddNotesDeleteNotesRequest? addNotesDeleteNotesRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove notes associated with a file
        /// </summary>
        /// <remarks>
        /// Deletes one or more named notes from a specified file by hash or file ID.
        /// </remarks>
        /// <param name="addNotesDeleteNotesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddNotesDeleteNotesApiResponse"/>?&gt;</returns>
        Task<IAddNotesDeleteNotesApiResponse?> AddNotesDeleteNotesOrDefaultAsync(AddNotesDeleteNotesRequest? addNotesDeleteNotesRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add or update notes associated with a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addNotesSetNotesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddNotesSetNotesApiResponse"/>&gt;</returns>
        Task<IAddNotesSetNotesApiResponse> AddNotesSetNotesAsync(AddNotesSetNotesRequest addNotesSetNotesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add or update notes associated with a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="addNotesSetNotesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddNotesSetNotesApiResponse"/>?&gt;</returns>
        Task<IAddNotesSetNotesApiResponse?> AddNotesSetNotesOrDefaultAsync(AddNotesSetNotesRequest addNotesSetNotesRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddNotesDeleteNotesApiResponse"/>
    /// </summary>
    public interface IAddNotesDeleteNotesApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IAddNotesSetNotesApiResponse"/>
    /// </summary>
    public interface IAddNotesSetNotesApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.AddNotesSetNotes200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AddNotesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddNotesDeleteNotes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddNotesDeleteNotes;

        internal void ExecuteOnAddNotesDeleteNotes(AddNotesApi.AddNotesDeleteNotesApiResponse apiResponse)
        {
            OnAddNotesDeleteNotes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddNotesDeleteNotes(Exception exception)
        {
            OnErrorAddNotesDeleteNotes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddNotesSetNotes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddNotesSetNotes;

        internal void ExecuteOnAddNotesSetNotes(AddNotesApi.AddNotesSetNotesApiResponse apiResponse)
        {
            OnAddNotesSetNotes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddNotesSetNotes(Exception exception)
        {
            OnErrorAddNotesSetNotes?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AddNotesApi : IAddNotesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AddNotesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AddNotesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddNotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddNotesApi(ILogger<AddNotesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AddNotesApiEvents addNotesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AddNotesApi>();
            HttpClient = httpClient;
            Events = addNotesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatAddNotesDeleteNotes(AddNotesDeleteNotesRequest? addNotesDeleteNotesRequest);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addNotesDeleteNotesRequest"></param>
        private void AfterAddNotesDeleteNotesDefaultImplementation(IAddNotesDeleteNotesApiResponse apiResponseLocalVar, AddNotesDeleteNotesRequest? addNotesDeleteNotesRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddNotesDeleteNotes(ref suppressDefaultLog, apiResponseLocalVar, addNotesDeleteNotesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addNotesDeleteNotesRequest"></param>
        partial void AfterAddNotesDeleteNotes(ref bool suppressDefaultLog, IAddNotesDeleteNotesApiResponse apiResponseLocalVar, AddNotesDeleteNotesRequest? addNotesDeleteNotesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addNotesDeleteNotesRequest"></param>
        private void OnErrorAddNotesDeleteNotesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddNotesDeleteNotesRequest? addNotesDeleteNotesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddNotesDeleteNotes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addNotesDeleteNotesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addNotesDeleteNotesRequest"></param>
        partial void OnErrorAddNotesDeleteNotes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddNotesDeleteNotesRequest? addNotesDeleteNotesRequest);

        /// <summary>
        /// Remove notes associated with a file Deletes one or more named notes from a specified file by hash or file ID.
        /// </summary>
        /// <param name="addNotesDeleteNotesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddNotesDeleteNotesApiResponse"/>&gt;</returns>
        public async Task<IAddNotesDeleteNotesApiResponse?> AddNotesDeleteNotesOrDefaultAsync(AddNotesDeleteNotesRequest? addNotesDeleteNotesRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddNotesDeleteNotesAsync(addNotesDeleteNotesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove notes associated with a file Deletes one or more named notes from a specified file by hash or file ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addNotesDeleteNotesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddNotesDeleteNotesApiResponse"/>&gt;</returns>
        public async Task<IAddNotesDeleteNotesApiResponse> AddNotesDeleteNotesAsync(AddNotesDeleteNotesRequest? addNotesDeleteNotesRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatAddNotesDeleteNotes(addNotesDeleteNotesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_notes/delete_notes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_notes/delete_notes");

                    httpRequestMessageLocalVar.Content = (addNotesDeleteNotesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addNotesDeleteNotesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddNotesDeleteNotesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddNotesDeleteNotesApiResponse>();

                        AddNotesDeleteNotesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_notes/delete_notes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddNotesDeleteNotesDefaultImplementation(apiResponseLocalVar, addNotesDeleteNotesRequest);

                        Events.ExecuteOnAddNotesDeleteNotes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddNotesDeleteNotesDefaultImplementation(e, "/add_notes/delete_notes", uriBuilderLocalVar.Path, addNotesDeleteNotesRequest);
                Events.ExecuteOnErrorAddNotesDeleteNotes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddNotesDeleteNotesApiResponse"/>
        /// </summary>
        public partial class AddNotesDeleteNotesApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddNotesDeleteNotesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddNotesDeleteNotesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddNotesDeleteNotesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddNotesDeleteNotesApiResponse(ILogger<AddNotesDeleteNotesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddNotesSetNotes(AddNotesSetNotesRequest addNotesSetNotesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addNotesSetNotesRequest"></param>
        /// <returns></returns>
        private void ValidateAddNotesSetNotes(AddNotesSetNotesRequest addNotesSetNotesRequest)
        {
            if (addNotesSetNotesRequest == null)
                throw new ArgumentNullException(nameof(addNotesSetNotesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addNotesSetNotesRequest"></param>
        private void AfterAddNotesSetNotesDefaultImplementation(IAddNotesSetNotesApiResponse apiResponseLocalVar, AddNotesSetNotesRequest addNotesSetNotesRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddNotesSetNotes(ref suppressDefaultLog, apiResponseLocalVar, addNotesSetNotesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addNotesSetNotesRequest"></param>
        partial void AfterAddNotesSetNotes(ref bool suppressDefaultLog, IAddNotesSetNotesApiResponse apiResponseLocalVar, AddNotesSetNotesRequest addNotesSetNotesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addNotesSetNotesRequest"></param>
        private void OnErrorAddNotesSetNotesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddNotesSetNotesRequest addNotesSetNotesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddNotesSetNotes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addNotesSetNotesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addNotesSetNotesRequest"></param>
        partial void OnErrorAddNotesSetNotes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddNotesSetNotesRequest addNotesSetNotesRequest);

        /// <summary>
        /// Add or update notes associated with a file 
        /// </summary>
        /// <param name="addNotesSetNotesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddNotesSetNotesApiResponse"/>&gt;</returns>
        public async Task<IAddNotesSetNotesApiResponse?> AddNotesSetNotesOrDefaultAsync(AddNotesSetNotesRequest addNotesSetNotesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddNotesSetNotesAsync(addNotesSetNotesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add or update notes associated with a file 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addNotesSetNotesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddNotesSetNotesApiResponse"/>&gt;</returns>
        public async Task<IAddNotesSetNotesApiResponse> AddNotesSetNotesAsync(AddNotesSetNotesRequest addNotesSetNotesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddNotesSetNotes(addNotesSetNotesRequest);

                FormatAddNotesSetNotes(addNotesSetNotesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/add_notes/set_notes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/add_notes/set_notes");

                    httpRequestMessageLocalVar.Content = (addNotesSetNotesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addNotesSetNotesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddNotesSetNotesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddNotesSetNotesApiResponse>();

                        AddNotesSetNotesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/add_notes/set_notes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddNotesSetNotesDefaultImplementation(apiResponseLocalVar, addNotesSetNotesRequest);

                        Events.ExecuteOnAddNotesSetNotes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddNotesSetNotesDefaultImplementation(e, "/add_notes/set_notes", uriBuilderLocalVar.Path, addNotesSetNotesRequest);
                Events.ExecuteOnErrorAddNotesSetNotes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddNotesSetNotesApiResponse"/>
        /// </summary>
        public partial class AddNotesSetNotesApiResponse : HydrusAPI.NET.Client.ApiResponse, IAddNotesSetNotesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddNotesSetNotesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddNotesSetNotesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddNotesSetNotesApiResponse(ILogger<AddNotesSetNotesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.AddNotesSetNotes200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.AddNotesSetNotes200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.AddNotesSetNotes200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
