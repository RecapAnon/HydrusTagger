// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using HydrusAPI.NET.Client;
using HydrusAPI.NET.Model;
using System.Diagnostics.CodeAnalysis;

namespace HydrusAPI.NET.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IManageServicesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ManageServicesApiEvents Events { get; }

        /// <summary>
        /// Start the job to upload a service&#39;s pending content
        /// </summary>
        /// <remarks>
        /// Starts the upload job for a service&#39;s pending content. Returns immediately after initiating the job.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manageServicesCommitPendingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesCommitPendingApiResponse"/>&gt;</returns>
        Task<IManageServicesCommitPendingApiResponse> ManageServicesCommitPendingAsync(ManageServicesCommitPendingRequest manageServicesCommitPendingRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Start the job to upload a service&#39;s pending content
        /// </summary>
        /// <remarks>
        /// Starts the upload job for a service&#39;s pending content. Returns immediately after initiating the job.
        /// </remarks>
        /// <param name="manageServicesCommitPendingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesCommitPendingApiResponse"/>?&gt;</returns>
        Task<IManageServicesCommitPendingApiResponse?> ManageServicesCommitPendingOrDefaultAsync(ManageServicesCommitPendingRequest manageServicesCommitPendingRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Forget all pending content for a service
        /// </summary>
        /// <remarks>
        /// Clears all pending content for a specified service, similar to clicking &#39;forget&#39; in the client UI.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manageServicesForgetPendingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesForgetPendingApiResponse"/>&gt;</returns>
        Task<IManageServicesForgetPendingApiResponse> ManageServicesForgetPendingAsync(ManageServicesForgetPendingRequest manageServicesForgetPendingRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Forget all pending content for a service
        /// </summary>
        /// <remarks>
        /// Clears all pending content for a specified service, similar to clicking &#39;forget&#39; in the client UI.
        /// </remarks>
        /// <param name="manageServicesForgetPendingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesForgetPendingApiResponse"/>?&gt;</returns>
        Task<IManageServicesForgetPendingApiResponse?> ManageServicesForgetPendingOrDefaultAsync(ManageServicesForgetPendingRequest manageServicesForgetPendingRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the counts of pending content for each upload-capable service
        /// </summary>
        /// <remarks>
        /// Returns a JSON object with pending content counts for all upload-capable services. Includes [The Services Object](#services_object).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesGetPendingCountsApiResponse"/>&gt;</returns>
        Task<IManageServicesGetPendingCountsApiResponse> ManageServicesGetPendingCountsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the counts of pending content for each upload-capable service
        /// </summary>
        /// <remarks>
        /// Returns a JSON object with pending content counts for all upload-capable services. Includes [The Services Object](#services_object).
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesGetPendingCountsApiResponse"/>?&gt;</returns>
        Task<IManageServicesGetPendingCountsApiResponse?> ManageServicesGetPendingCountsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IManageServicesCommitPendingApiResponse"/>
    /// </summary>
    public interface IManageServicesCommitPendingApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManageServicesForgetPendingApiResponse"/>
    /// </summary>
    public interface IManageServicesForgetPendingApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManageServicesGetPendingCountsApiResponse"/>
    /// </summary>
    public interface IManageServicesGetPendingCountsApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.ManageServicesGetPendingCounts200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ManageServicesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManageServicesCommitPending;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManageServicesCommitPending;

        internal void ExecuteOnManageServicesCommitPending(ManageServicesApi.ManageServicesCommitPendingApiResponse apiResponse)
        {
            OnManageServicesCommitPending?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManageServicesCommitPending(Exception exception)
        {
            OnErrorManageServicesCommitPending?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManageServicesForgetPending;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManageServicesForgetPending;

        internal void ExecuteOnManageServicesForgetPending(ManageServicesApi.ManageServicesForgetPendingApiResponse apiResponse)
        {
            OnManageServicesForgetPending?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManageServicesForgetPending(Exception exception)
        {
            OnErrorManageServicesForgetPending?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManageServicesGetPendingCounts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManageServicesGetPendingCounts;

        internal void ExecuteOnManageServicesGetPendingCounts(ManageServicesApi.ManageServicesGetPendingCountsApiResponse apiResponse)
        {
            OnManageServicesGetPendingCounts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManageServicesGetPendingCounts(Exception exception)
        {
            OnErrorManageServicesGetPendingCounts?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ManageServicesApi : IManageServicesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ManageServicesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ManageServicesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageServicesApi(ILogger<ManageServicesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ManageServicesApiEvents manageServicesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ManageServicesApi>();
            HttpClient = httpClient;
            Events = manageServicesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatManageServicesCommitPending(ManageServicesCommitPendingRequest manageServicesCommitPendingRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="manageServicesCommitPendingRequest"></param>
        /// <returns></returns>
        private void ValidateManageServicesCommitPending(ManageServicesCommitPendingRequest manageServicesCommitPendingRequest)
        {
            if (manageServicesCommitPendingRequest == null)
                throw new ArgumentNullException(nameof(manageServicesCommitPendingRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manageServicesCommitPendingRequest"></param>
        private void AfterManageServicesCommitPendingDefaultImplementation(IManageServicesCommitPendingApiResponse apiResponseLocalVar, ManageServicesCommitPendingRequest manageServicesCommitPendingRequest)
        {
            bool suppressDefaultLog = false;
            AfterManageServicesCommitPending(ref suppressDefaultLog, apiResponseLocalVar, manageServicesCommitPendingRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manageServicesCommitPendingRequest"></param>
        partial void AfterManageServicesCommitPending(ref bool suppressDefaultLog, IManageServicesCommitPendingApiResponse apiResponseLocalVar, ManageServicesCommitPendingRequest manageServicesCommitPendingRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manageServicesCommitPendingRequest"></param>
        private void OnErrorManageServicesCommitPendingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManageServicesCommitPendingRequest manageServicesCommitPendingRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManageServicesCommitPending(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, manageServicesCommitPendingRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manageServicesCommitPendingRequest"></param>
        partial void OnErrorManageServicesCommitPending(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManageServicesCommitPendingRequest manageServicesCommitPendingRequest);

        /// <summary>
        /// Start the job to upload a service&#39;s pending content Starts the upload job for a service&#39;s pending content. Returns immediately after initiating the job.
        /// </summary>
        /// <param name="manageServicesCommitPendingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesCommitPendingApiResponse"/>&gt;</returns>
        public async Task<IManageServicesCommitPendingApiResponse?> ManageServicesCommitPendingOrDefaultAsync(ManageServicesCommitPendingRequest manageServicesCommitPendingRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManageServicesCommitPendingAsync(manageServicesCommitPendingRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Start the job to upload a service&#39;s pending content Starts the upload job for a service&#39;s pending content. Returns immediately after initiating the job.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manageServicesCommitPendingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesCommitPendingApiResponse"/>&gt;</returns>
        public async Task<IManageServicesCommitPendingApiResponse> ManageServicesCommitPendingAsync(ManageServicesCommitPendingRequest manageServicesCommitPendingRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManageServicesCommitPending(manageServicesCommitPendingRequest);

                FormatManageServicesCommitPending(manageServicesCommitPendingRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_services/commit_pending"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_services/commit_pending");

                    httpRequestMessageLocalVar.Content = (manageServicesCommitPendingRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(manageServicesCommitPendingRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManageServicesCommitPendingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManageServicesCommitPendingApiResponse>();
                        ManageServicesCommitPendingApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_services/commit_pending", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManageServicesCommitPendingDefaultImplementation(apiResponseLocalVar, manageServicesCommitPendingRequest);

                        Events.ExecuteOnManageServicesCommitPending(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManageServicesCommitPendingDefaultImplementation(e, "/manage_services/commit_pending", uriBuilderLocalVar.Path, manageServicesCommitPendingRequest);
                Events.ExecuteOnErrorManageServicesCommitPending(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManageServicesCommitPendingApiResponse"/>
        /// </summary>
        public partial class ManageServicesCommitPendingApiResponse : HydrusAPI.NET.Client.ApiResponse, IManageServicesCommitPendingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManageServicesCommitPendingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManageServicesCommitPendingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageServicesCommitPendingApiResponse(ILogger<ManageServicesCommitPendingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManageServicesCommitPendingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageServicesCommitPendingApiResponse(ILogger<ManageServicesCommitPendingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManageServicesForgetPending(ManageServicesForgetPendingRequest manageServicesForgetPendingRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="manageServicesForgetPendingRequest"></param>
        /// <returns></returns>
        private void ValidateManageServicesForgetPending(ManageServicesForgetPendingRequest manageServicesForgetPendingRequest)
        {
            if (manageServicesForgetPendingRequest == null)
                throw new ArgumentNullException(nameof(manageServicesForgetPendingRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manageServicesForgetPendingRequest"></param>
        private void AfterManageServicesForgetPendingDefaultImplementation(IManageServicesForgetPendingApiResponse apiResponseLocalVar, ManageServicesForgetPendingRequest manageServicesForgetPendingRequest)
        {
            bool suppressDefaultLog = false;
            AfterManageServicesForgetPending(ref suppressDefaultLog, apiResponseLocalVar, manageServicesForgetPendingRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manageServicesForgetPendingRequest"></param>
        partial void AfterManageServicesForgetPending(ref bool suppressDefaultLog, IManageServicesForgetPendingApiResponse apiResponseLocalVar, ManageServicesForgetPendingRequest manageServicesForgetPendingRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manageServicesForgetPendingRequest"></param>
        private void OnErrorManageServicesForgetPendingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManageServicesForgetPendingRequest manageServicesForgetPendingRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManageServicesForgetPending(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, manageServicesForgetPendingRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manageServicesForgetPendingRequest"></param>
        partial void OnErrorManageServicesForgetPending(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManageServicesForgetPendingRequest manageServicesForgetPendingRequest);

        /// <summary>
        /// Forget all pending content for a service Clears all pending content for a specified service, similar to clicking &#39;forget&#39; in the client UI.
        /// </summary>
        /// <param name="manageServicesForgetPendingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesForgetPendingApiResponse"/>&gt;</returns>
        public async Task<IManageServicesForgetPendingApiResponse?> ManageServicesForgetPendingOrDefaultAsync(ManageServicesForgetPendingRequest manageServicesForgetPendingRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManageServicesForgetPendingAsync(manageServicesForgetPendingRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Forget all pending content for a service Clears all pending content for a specified service, similar to clicking &#39;forget&#39; in the client UI.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manageServicesForgetPendingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesForgetPendingApiResponse"/>&gt;</returns>
        public async Task<IManageServicesForgetPendingApiResponse> ManageServicesForgetPendingAsync(ManageServicesForgetPendingRequest manageServicesForgetPendingRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManageServicesForgetPending(manageServicesForgetPendingRequest);

                FormatManageServicesForgetPending(manageServicesForgetPendingRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_services/forget_pending"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_services/forget_pending");

                    httpRequestMessageLocalVar.Content = (manageServicesForgetPendingRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(manageServicesForgetPendingRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManageServicesForgetPendingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManageServicesForgetPendingApiResponse>();
                        ManageServicesForgetPendingApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_services/forget_pending", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManageServicesForgetPendingDefaultImplementation(apiResponseLocalVar, manageServicesForgetPendingRequest);

                        Events.ExecuteOnManageServicesForgetPending(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManageServicesForgetPendingDefaultImplementation(e, "/manage_services/forget_pending", uriBuilderLocalVar.Path, manageServicesForgetPendingRequest);
                Events.ExecuteOnErrorManageServicesForgetPending(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManageServicesForgetPendingApiResponse"/>
        /// </summary>
        public partial class ManageServicesForgetPendingApiResponse : HydrusAPI.NET.Client.ApiResponse, IManageServicesForgetPendingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManageServicesForgetPendingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManageServicesForgetPendingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageServicesForgetPendingApiResponse(ILogger<ManageServicesForgetPendingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManageServicesForgetPendingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageServicesForgetPendingApiResponse(ILogger<ManageServicesForgetPendingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterManageServicesGetPendingCountsDefaultImplementation(IManageServicesGetPendingCountsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterManageServicesGetPendingCounts(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterManageServicesGetPendingCounts(ref bool suppressDefaultLog, IManageServicesGetPendingCountsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorManageServicesGetPendingCountsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManageServicesGetPendingCounts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorManageServicesGetPendingCounts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get the counts of pending content for each upload-capable service Returns a JSON object with pending content counts for all upload-capable services. Includes [The Services Object](#services_object).
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesGetPendingCountsApiResponse"/>&gt;</returns>
        public async Task<IManageServicesGetPendingCountsApiResponse?> ManageServicesGetPendingCountsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManageServicesGetPendingCountsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the counts of pending content for each upload-capable service Returns a JSON object with pending content counts for all upload-capable services. Includes [The Services Object](#services_object).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageServicesGetPendingCountsApiResponse"/>&gt;</returns>
        public async Task<IManageServicesGetPendingCountsApiResponse> ManageServicesGetPendingCountsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_services/get_pending_counts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_services/get_pending_counts");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ManageServicesGetPendingCountsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManageServicesGetPendingCountsApiResponse>();
                        ManageServicesGetPendingCountsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_services/get_pending_counts", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterManageServicesGetPendingCountsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnManageServicesGetPendingCounts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManageServicesGetPendingCountsDefaultImplementation(e, "/manage_services/get_pending_counts", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorManageServicesGetPendingCounts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManageServicesGetPendingCountsApiResponse"/>
        /// </summary>
        public partial class ManageServicesGetPendingCountsApiResponse : HydrusAPI.NET.Client.ApiResponse, IManageServicesGetPendingCountsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManageServicesGetPendingCountsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManageServicesGetPendingCountsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageServicesGetPendingCountsApiResponse(ILogger<ManageServicesGetPendingCountsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ManageServicesGetPendingCountsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageServicesGetPendingCountsApiResponse(ILogger<ManageServicesGetPendingCountsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.ManageServicesGetPendingCounts200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.ManageServicesGetPendingCounts200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.ManageServicesGetPendingCounts200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
