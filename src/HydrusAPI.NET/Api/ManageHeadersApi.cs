// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using HydrusAPI.NET.Client;
using HydrusAPI.NET.Model;
using System.Diagnostics.CodeAnalysis;

namespace HydrusAPI.NET.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IManageHeadersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ManageHeadersApiEvents Events { get; }

        /// <summary>
        /// Get custom HTTP headers
        /// </summary>
        /// <remarks>
        /// Retrieves the custom HTTP headers for a specified domain or globally.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersGetHeadersApiResponse"/>&gt;</returns>
        Task<IManageHeadersGetHeadersApiResponse> ManageHeadersGetHeadersAsync(Option<string> domain = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get custom HTTP headers
        /// </summary>
        /// <remarks>
        /// Retrieves the custom HTTP headers for a specified domain or globally.
        /// </remarks>
        /// <param name="domain"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersGetHeadersApiResponse"/>?&gt;</returns>
        Task<IManageHeadersGetHeadersApiResponse?> ManageHeadersGetHeadersOrDefaultAsync(Option<string> domain = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Manages custom HTTP headers for domains or globally
        /// </summary>
        /// <remarks>
        /// Sets or deletes custom HTTP headers for a specific domain or globally. Requires Manage Cookies and Headers permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersSetHeadersApiResponse"/>&gt;</returns>
        Task<IManageHeadersSetHeadersApiResponse> ManageHeadersSetHeadersAsync(ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Manages custom HTTP headers for domains or globally
        /// </summary>
        /// <remarks>
        /// Sets or deletes custom HTTP headers for a specific domain or globally. Requires Manage Cookies and Headers permission.
        /// </remarks>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersSetHeadersApiResponse"/>?&gt;</returns>
        Task<IManageHeadersSetHeadersApiResponse?> ManageHeadersSetHeadersOrDefaultAsync(ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sets the global User-Agent for the client
        /// </summary>
        /// <remarks>
        /// This endpoint allows setting or resetting the global User-Agent string used by the Hydrus client. This is useful for mimicking a specific browser or resetting to the default.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersSetUserAgentApiResponse"/>&gt;</returns>
        Task<IManageHeadersSetUserAgentApiResponse> ManageHeadersSetUserAgentAsync(ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sets the global User-Agent for the client
        /// </summary>
        /// <remarks>
        /// This endpoint allows setting or resetting the global User-Agent string used by the Hydrus client. This is useful for mimicking a specific browser or resetting to the default.
        /// </remarks>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersSetUserAgentApiResponse"/>?&gt;</returns>
        Task<IManageHeadersSetUserAgentApiResponse?> ManageHeadersSetUserAgentOrDefaultAsync(ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IManageHeadersGetHeadersApiResponse"/>
    /// </summary>
    public interface IManageHeadersGetHeadersApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.ManageHeadersGetHeaders200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManageHeadersSetHeadersApiResponse"/>
    /// </summary>
    public interface IManageHeadersSetHeadersApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.ManageHeadersSetHeaders200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IManageHeadersSetUserAgentApiResponse"/>
    /// </summary>
    public interface IManageHeadersSetUserAgentApiResponse : HydrusAPI.NET.Client.IApiResponse, IOk<HydrusAPI.NET.Model.ManageHeadersSetHeaders200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ManageHeadersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManageHeadersGetHeaders;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManageHeadersGetHeaders;

        internal void ExecuteOnManageHeadersGetHeaders(ManageHeadersApi.ManageHeadersGetHeadersApiResponse apiResponse)
        {
            OnManageHeadersGetHeaders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManageHeadersGetHeaders(Exception exception)
        {
            OnErrorManageHeadersGetHeaders?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManageHeadersSetHeaders;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManageHeadersSetHeaders;

        internal void ExecuteOnManageHeadersSetHeaders(ManageHeadersApi.ManageHeadersSetHeadersApiResponse apiResponse)
        {
            OnManageHeadersSetHeaders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManageHeadersSetHeaders(Exception exception)
        {
            OnErrorManageHeadersSetHeaders?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnManageHeadersSetUserAgent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorManageHeadersSetUserAgent;

        internal void ExecuteOnManageHeadersSetUserAgent(ManageHeadersApi.ManageHeadersSetUserAgentApiResponse apiResponse)
        {
            OnManageHeadersSetUserAgent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorManageHeadersSetUserAgent(Exception exception)
        {
            OnErrorManageHeadersSetUserAgent?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ManageHeadersApi : IManageHeadersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ManageHeadersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ManageHeadersApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageHeadersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageHeadersApi(ILogger<ManageHeadersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ManageHeadersApiEvents manageHeadersApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ManageHeadersApi>();
            HttpClient = httpClient;
            Events = manageHeadersApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatManageHeadersGetHeaders(ref Option<string> domain);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="domain"></param>
        /// <returns></returns>
        private void ValidateManageHeadersGetHeaders(Option<string> domain)
        {
            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="domain"></param>
        private void AfterManageHeadersGetHeadersDefaultImplementation(IManageHeadersGetHeadersApiResponse apiResponseLocalVar, Option<string> domain)
        {
            bool suppressDefaultLog = false;
            AfterManageHeadersGetHeaders(ref suppressDefaultLog, apiResponseLocalVar, domain);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="domain"></param>
        partial void AfterManageHeadersGetHeaders(ref bool suppressDefaultLog, IManageHeadersGetHeadersApiResponse apiResponseLocalVar, Option<string> domain);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="domain"></param>
        private void OnErrorManageHeadersGetHeadersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> domain)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManageHeadersGetHeaders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, domain);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="domain"></param>
        partial void OnErrorManageHeadersGetHeaders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> domain);

        /// <summary>
        /// Get custom HTTP headers Retrieves the custom HTTP headers for a specified domain or globally.
        /// </summary>
        /// <param name="domain"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersGetHeadersApiResponse"/>&gt;</returns>
        public async Task<IManageHeadersGetHeadersApiResponse?> ManageHeadersGetHeadersOrDefaultAsync(Option<string> domain = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManageHeadersGetHeadersAsync(domain, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get custom HTTP headers Retrieves the custom HTTP headers for a specified domain or globally.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersGetHeadersApiResponse"/>&gt;</returns>
        public async Task<IManageHeadersGetHeadersApiResponse> ManageHeadersGetHeadersAsync(Option<string> domain = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManageHeadersGetHeaders(domain);

                FormatManageHeadersGetHeaders(ref domain);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_headers/get_headers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_headers/get_headers");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (domain.IsSet)
                        parseQueryStringLocalVar["domain"] = ClientUtils.ParameterToString(domain.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ManageHeadersGetHeadersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManageHeadersGetHeadersApiResponse>();

                        ManageHeadersGetHeadersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_headers/get_headers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterManageHeadersGetHeadersDefaultImplementation(apiResponseLocalVar, domain);

                        Events.ExecuteOnManageHeadersGetHeaders(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManageHeadersGetHeadersDefaultImplementation(e, "/manage_headers/get_headers", uriBuilderLocalVar.Path, domain);
                Events.ExecuteOnErrorManageHeadersGetHeaders(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManageHeadersGetHeadersApiResponse"/>
        /// </summary>
        public partial class ManageHeadersGetHeadersApiResponse : HydrusAPI.NET.Client.ApiResponse, IManageHeadersGetHeadersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManageHeadersGetHeadersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManageHeadersGetHeadersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageHeadersGetHeadersApiResponse(ILogger<ManageHeadersGetHeadersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.ManageHeadersGetHeaders200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.ManageHeadersGetHeaders200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.ManageHeadersGetHeaders200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManageHeadersSetHeaders(ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        /// <returns></returns>
        private void ValidateManageHeadersSetHeaders(ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest)
        {
            if (manageHeadersSetHeadersRequest == null)
                throw new ArgumentNullException(nameof(manageHeadersSetHeadersRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        private void AfterManageHeadersSetHeadersDefaultImplementation(IManageHeadersSetHeadersApiResponse apiResponseLocalVar, ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest)
        {
            bool suppressDefaultLog = false;
            AfterManageHeadersSetHeaders(ref suppressDefaultLog, apiResponseLocalVar, manageHeadersSetHeadersRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        partial void AfterManageHeadersSetHeaders(ref bool suppressDefaultLog, IManageHeadersSetHeadersApiResponse apiResponseLocalVar, ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        private void OnErrorManageHeadersSetHeadersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManageHeadersSetHeaders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, manageHeadersSetHeadersRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        partial void OnErrorManageHeadersSetHeaders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest);

        /// <summary>
        /// Manages custom HTTP headers for domains or globally Sets or deletes custom HTTP headers for a specific domain or globally. Requires Manage Cookies and Headers permission.
        /// </summary>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersSetHeadersApiResponse"/>&gt;</returns>
        public async Task<IManageHeadersSetHeadersApiResponse?> ManageHeadersSetHeadersOrDefaultAsync(ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManageHeadersSetHeadersAsync(manageHeadersSetHeadersRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Manages custom HTTP headers for domains or globally Sets or deletes custom HTTP headers for a specific domain or globally. Requires Manage Cookies and Headers permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersSetHeadersApiResponse"/>&gt;</returns>
        public async Task<IManageHeadersSetHeadersApiResponse> ManageHeadersSetHeadersAsync(ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManageHeadersSetHeaders(manageHeadersSetHeadersRequest);

                FormatManageHeadersSetHeaders(manageHeadersSetHeadersRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_headers/set_headers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_headers/set_headers");

                    httpRequestMessageLocalVar.Content = (manageHeadersSetHeadersRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(manageHeadersSetHeadersRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ManageHeadersSetHeadersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManageHeadersSetHeadersApiResponse>();

                        ManageHeadersSetHeadersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_headers/set_headers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterManageHeadersSetHeadersDefaultImplementation(apiResponseLocalVar, manageHeadersSetHeadersRequest);

                        Events.ExecuteOnManageHeadersSetHeaders(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManageHeadersSetHeadersDefaultImplementation(e, "/manage_headers/set_headers", uriBuilderLocalVar.Path, manageHeadersSetHeadersRequest);
                Events.ExecuteOnErrorManageHeadersSetHeaders(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManageHeadersSetHeadersApiResponse"/>
        /// </summary>
        public partial class ManageHeadersSetHeadersApiResponse : HydrusAPI.NET.Client.ApiResponse, IManageHeadersSetHeadersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManageHeadersSetHeadersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManageHeadersSetHeadersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageHeadersSetHeadersApiResponse(ILogger<ManageHeadersSetHeadersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.ManageHeadersSetHeaders200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.ManageHeadersSetHeaders200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.ManageHeadersSetHeaders200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatManageHeadersSetUserAgent(ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        /// <returns></returns>
        private void ValidateManageHeadersSetUserAgent(ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest)
        {
            if (manageHeadersSetUserAgentRequest == null)
                throw new ArgumentNullException(nameof(manageHeadersSetUserAgentRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        private void AfterManageHeadersSetUserAgentDefaultImplementation(IManageHeadersSetUserAgentApiResponse apiResponseLocalVar, ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest)
        {
            bool suppressDefaultLog = false;
            AfterManageHeadersSetUserAgent(ref suppressDefaultLog, apiResponseLocalVar, manageHeadersSetUserAgentRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        partial void AfterManageHeadersSetUserAgent(ref bool suppressDefaultLog, IManageHeadersSetUserAgentApiResponse apiResponseLocalVar, ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        private void OnErrorManageHeadersSetUserAgentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorManageHeadersSetUserAgent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, manageHeadersSetUserAgentRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        partial void OnErrorManageHeadersSetUserAgent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest);

        /// <summary>
        /// Sets the global User-Agent for the client This endpoint allows setting or resetting the global User-Agent string used by the Hydrus client. This is useful for mimicking a specific browser or resetting to the default.
        /// </summary>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersSetUserAgentApiResponse"/>&gt;</returns>
        public async Task<IManageHeadersSetUserAgentApiResponse?> ManageHeadersSetUserAgentOrDefaultAsync(ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ManageHeadersSetUserAgentAsync(manageHeadersSetUserAgentRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Sets the global User-Agent for the client This endpoint allows setting or resetting the global User-Agent string used by the Hydrus client. This is useful for mimicking a specific browser or resetting to the default.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IManageHeadersSetUserAgentApiResponse"/>&gt;</returns>
        public async Task<IManageHeadersSetUserAgentApiResponse> ManageHeadersSetUserAgentAsync(ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateManageHeadersSetUserAgent(manageHeadersSetUserAgentRequest);

                FormatManageHeadersSetUserAgent(manageHeadersSetUserAgentRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/manage_headers/set_user_agent"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/manage_headers/set_user_agent");

                    httpRequestMessageLocalVar.Content = (manageHeadersSetUserAgentRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(manageHeadersSetUserAgentRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ManageHeadersSetUserAgentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ManageHeadersSetUserAgentApiResponse>();

                        ManageHeadersSetUserAgentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/manage_headers/set_user_agent", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterManageHeadersSetUserAgentDefaultImplementation(apiResponseLocalVar, manageHeadersSetUserAgentRequest);

                        Events.ExecuteOnManageHeadersSetUserAgent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorManageHeadersSetUserAgentDefaultImplementation(e, "/manage_headers/set_user_agent", uriBuilderLocalVar.Path, manageHeadersSetUserAgentRequest);
                Events.ExecuteOnErrorManageHeadersSetUserAgent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ManageHeadersSetUserAgentApiResponse"/>
        /// </summary>
        public partial class ManageHeadersSetUserAgentApiResponse : HydrusAPI.NET.Client.ApiResponse, IManageHeadersSetUserAgentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ManageHeadersSetUserAgentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ManageHeadersSetUserAgentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ManageHeadersSetUserAgentApiResponse(ILogger<ManageHeadersSetUserAgentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public HydrusAPI.NET.Model.ManageHeadersSetHeaders200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<HydrusAPI.NET.Model.ManageHeadersSetHeaders200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out HydrusAPI.NET.Model.ManageHeadersSetHeaders200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
