// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using HydrusAPI.NET.Client;
using HydrusAPI.NET.Model;
using System.Diagnostics.CodeAnalysis;

namespace HydrusAPI.NET.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEditTimesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EditTimesApiEvents Events { get; }

        /// <summary>
        /// Increment file viewtime statistics
        /// </summary>
        /// <remarks>
        /// Adds a file view to the file viewing statistics system.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="incrementFileViewtimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesIncrementFileViewtimeApiResponse"/>&gt;</returns>
        Task<IEditTimesIncrementFileViewtimeApiResponse> EditTimesIncrementFileViewtimeAsync(IncrementFileViewtimeRequest? incrementFileViewtimeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Increment file viewtime statistics
        /// </summary>
        /// <remarks>
        /// Adds a file view to the file viewing statistics system.
        /// </remarks>
        /// <param name="incrementFileViewtimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesIncrementFileViewtimeApiResponse"/>?&gt;</returns>
        Task<IEditTimesIncrementFileViewtimeApiResponse?> EditTimesIncrementFileViewtimeOrDefaultAsync(IncrementFileViewtimeRequest? incrementFileViewtimeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set fixed values in the file viewing statistics system
        /// </summary>
        /// <remarks>
        /// This endpoint allows setting fixed values in the file viewing statistics system. Recommended for maintenance, migration, or reset scenarios.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="editTimesSetFileViewtimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesSetFileViewtimeApiResponse"/>&gt;</returns>
        Task<IEditTimesSetFileViewtimeApiResponse> EditTimesSetFileViewtimeAsync(EditTimesSetFileViewtimeRequest? editTimesSetFileViewtimeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set fixed values in the file viewing statistics system
        /// </summary>
        /// <remarks>
        /// This endpoint allows setting fixed values in the file viewing statistics system. Recommended for maintenance, migration, or reset scenarios.
        /// </remarks>
        /// <param name="editTimesSetFileViewtimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesSetFileViewtimeApiResponse"/>?&gt;</returns>
        Task<IEditTimesSetFileViewtimeApiResponse?> EditTimesSetFileViewtimeOrDefaultAsync(EditTimesSetFileViewtimeRequest? editTimesSetFileViewtimeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add or remove timestamps associated with a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="editTimesSetTimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesSetTimeApiResponse"/>&gt;</returns>
        Task<IEditTimesSetTimeApiResponse> EditTimesSetTimeAsync(EditTimesSetTimeRequest? editTimesSetTimeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add or remove timestamps associated with a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="editTimesSetTimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesSetTimeApiResponse"/>?&gt;</returns>
        Task<IEditTimesSetTimeApiResponse?> EditTimesSetTimeOrDefaultAsync(EditTimesSetTimeRequest? editTimesSetTimeRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEditTimesIncrementFileViewtimeApiResponse"/>
    /// </summary>
    public interface IEditTimesIncrementFileViewtimeApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEditTimesSetFileViewtimeApiResponse"/>
    /// </summary>
    public interface IEditTimesSetFileViewtimeApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 419 CustomHttpStatusCode419
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode419 { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEditTimesSetTimeApiResponse"/>
    /// </summary>
    public interface IEditTimesSetTimeApiResponse : HydrusAPI.NET.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EditTimesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditTimesIncrementFileViewtime;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditTimesIncrementFileViewtime;

        internal void ExecuteOnEditTimesIncrementFileViewtime(EditTimesApi.EditTimesIncrementFileViewtimeApiResponse apiResponse)
        {
            OnEditTimesIncrementFileViewtime?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditTimesIncrementFileViewtime(Exception exception)
        {
            OnErrorEditTimesIncrementFileViewtime?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditTimesSetFileViewtime;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditTimesSetFileViewtime;

        internal void ExecuteOnEditTimesSetFileViewtime(EditTimesApi.EditTimesSetFileViewtimeApiResponse apiResponse)
        {
            OnEditTimesSetFileViewtime?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditTimesSetFileViewtime(Exception exception)
        {
            OnErrorEditTimesSetFileViewtime?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditTimesSetTime;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditTimesSetTime;

        internal void ExecuteOnEditTimesSetTime(EditTimesApi.EditTimesSetTimeApiResponse apiResponse)
        {
            OnEditTimesSetTime?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditTimesSetTime(Exception exception)
        {
            OnErrorEditTimesSetTime?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EditTimesApi : IEditTimesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EditTimesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EditTimesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EditTimesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EditTimesApi(ILogger<EditTimesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EditTimesApiEvents editTimesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EditTimesApi>();
            HttpClient = httpClient;
            Events = editTimesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatEditTimesIncrementFileViewtime(IncrementFileViewtimeRequest? incrementFileViewtimeRequest);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="incrementFileViewtimeRequest"></param>
        private void AfterEditTimesIncrementFileViewtimeDefaultImplementation(IEditTimesIncrementFileViewtimeApiResponse apiResponseLocalVar, IncrementFileViewtimeRequest? incrementFileViewtimeRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditTimesIncrementFileViewtime(ref suppressDefaultLog, apiResponseLocalVar, incrementFileViewtimeRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="incrementFileViewtimeRequest"></param>
        partial void AfterEditTimesIncrementFileViewtime(ref bool suppressDefaultLog, IEditTimesIncrementFileViewtimeApiResponse apiResponseLocalVar, IncrementFileViewtimeRequest? incrementFileViewtimeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="incrementFileViewtimeRequest"></param>
        private void OnErrorEditTimesIncrementFileViewtimeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IncrementFileViewtimeRequest? incrementFileViewtimeRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEditTimesIncrementFileViewtime(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, incrementFileViewtimeRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="incrementFileViewtimeRequest"></param>
        partial void OnErrorEditTimesIncrementFileViewtime(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IncrementFileViewtimeRequest? incrementFileViewtimeRequest);

        /// <summary>
        /// Increment file viewtime statistics Adds a file view to the file viewing statistics system.
        /// </summary>
        /// <param name="incrementFileViewtimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesIncrementFileViewtimeApiResponse"/>&gt;</returns>
        public async Task<IEditTimesIncrementFileViewtimeApiResponse?> EditTimesIncrementFileViewtimeOrDefaultAsync(IncrementFileViewtimeRequest? incrementFileViewtimeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditTimesIncrementFileViewtimeAsync(incrementFileViewtimeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Increment file viewtime statistics Adds a file view to the file viewing statistics system.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="incrementFileViewtimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesIncrementFileViewtimeApiResponse"/>&gt;</returns>
        public async Task<IEditTimesIncrementFileViewtimeApiResponse> EditTimesIncrementFileViewtimeAsync(IncrementFileViewtimeRequest? incrementFileViewtimeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEditTimesIncrementFileViewtime(incrementFileViewtimeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/edit_times/increment_file_viewtime"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/edit_times/increment_file_viewtime");

                    httpRequestMessageLocalVar.Content = (incrementFileViewtimeRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(incrementFileViewtimeRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditTimesIncrementFileViewtimeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditTimesIncrementFileViewtimeApiResponse>();

                        EditTimesIncrementFileViewtimeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edit_times/increment_file_viewtime", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditTimesIncrementFileViewtimeDefaultImplementation(apiResponseLocalVar, incrementFileViewtimeRequest);

                        Events.ExecuteOnEditTimesIncrementFileViewtime(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditTimesIncrementFileViewtimeDefaultImplementation(e, "/edit_times/increment_file_viewtime", uriBuilderLocalVar.Path, incrementFileViewtimeRequest);
                Events.ExecuteOnErrorEditTimesIncrementFileViewtime(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditTimesIncrementFileViewtimeApiResponse"/>
        /// </summary>
        public partial class EditTimesIncrementFileViewtimeApiResponse : HydrusAPI.NET.Client.ApiResponse, IEditTimesIncrementFileViewtimeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditTimesIncrementFileViewtimeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditTimesIncrementFileViewtimeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditTimesIncrementFileViewtimeApiResponse(ILogger<EditTimesIncrementFileViewtimeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEditTimesSetFileViewtime(EditTimesSetFileViewtimeRequest? editTimesSetFileViewtimeRequest);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="editTimesSetFileViewtimeRequest"></param>
        private void AfterEditTimesSetFileViewtimeDefaultImplementation(IEditTimesSetFileViewtimeApiResponse apiResponseLocalVar, EditTimesSetFileViewtimeRequest? editTimesSetFileViewtimeRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditTimesSetFileViewtime(ref suppressDefaultLog, apiResponseLocalVar, editTimesSetFileViewtimeRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="editTimesSetFileViewtimeRequest"></param>
        partial void AfterEditTimesSetFileViewtime(ref bool suppressDefaultLog, IEditTimesSetFileViewtimeApiResponse apiResponseLocalVar, EditTimesSetFileViewtimeRequest? editTimesSetFileViewtimeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="editTimesSetFileViewtimeRequest"></param>
        private void OnErrorEditTimesSetFileViewtimeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EditTimesSetFileViewtimeRequest? editTimesSetFileViewtimeRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEditTimesSetFileViewtime(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, editTimesSetFileViewtimeRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="editTimesSetFileViewtimeRequest"></param>
        partial void OnErrorEditTimesSetFileViewtime(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EditTimesSetFileViewtimeRequest? editTimesSetFileViewtimeRequest);

        /// <summary>
        /// Set fixed values in the file viewing statistics system This endpoint allows setting fixed values in the file viewing statistics system. Recommended for maintenance, migration, or reset scenarios.
        /// </summary>
        /// <param name="editTimesSetFileViewtimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesSetFileViewtimeApiResponse"/>&gt;</returns>
        public async Task<IEditTimesSetFileViewtimeApiResponse?> EditTimesSetFileViewtimeOrDefaultAsync(EditTimesSetFileViewtimeRequest? editTimesSetFileViewtimeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditTimesSetFileViewtimeAsync(editTimesSetFileViewtimeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set fixed values in the file viewing statistics system This endpoint allows setting fixed values in the file viewing statistics system. Recommended for maintenance, migration, or reset scenarios.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="editTimesSetFileViewtimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesSetFileViewtimeApiResponse"/>&gt;</returns>
        public async Task<IEditTimesSetFileViewtimeApiResponse> EditTimesSetFileViewtimeAsync(EditTimesSetFileViewtimeRequest? editTimesSetFileViewtimeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEditTimesSetFileViewtime(editTimesSetFileViewtimeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/edit_times/set_file_viewtime"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/edit_times/set_file_viewtime");

                    httpRequestMessageLocalVar.Content = (editTimesSetFileViewtimeRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(editTimesSetFileViewtimeRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditTimesSetFileViewtimeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditTimesSetFileViewtimeApiResponse>();

                        EditTimesSetFileViewtimeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edit_times/set_file_viewtime", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditTimesSetFileViewtimeDefaultImplementation(apiResponseLocalVar, editTimesSetFileViewtimeRequest);

                        Events.ExecuteOnEditTimesSetFileViewtime(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditTimesSetFileViewtimeDefaultImplementation(e, "/edit_times/set_file_viewtime", uriBuilderLocalVar.Path, editTimesSetFileViewtimeRequest);
                Events.ExecuteOnErrorEditTimesSetFileViewtime(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditTimesSetFileViewtimeApiResponse"/>
        /// </summary>
        public partial class EditTimesSetFileViewtimeApiResponse : HydrusAPI.NET.Client.ApiResponse, IEditTimesSetFileViewtimeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditTimesSetFileViewtimeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditTimesSetFileViewtimeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditTimesSetFileViewtimeApiResponse(ILogger<EditTimesSetFileViewtimeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 419 CustomHttpStatusCode419
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode419 => 419 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEditTimesSetTime(EditTimesSetTimeRequest? editTimesSetTimeRequest);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="editTimesSetTimeRequest"></param>
        private void AfterEditTimesSetTimeDefaultImplementation(IEditTimesSetTimeApiResponse apiResponseLocalVar, EditTimesSetTimeRequest? editTimesSetTimeRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditTimesSetTime(ref suppressDefaultLog, apiResponseLocalVar, editTimesSetTimeRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="editTimesSetTimeRequest"></param>
        partial void AfterEditTimesSetTime(ref bool suppressDefaultLog, IEditTimesSetTimeApiResponse apiResponseLocalVar, EditTimesSetTimeRequest? editTimesSetTimeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="editTimesSetTimeRequest"></param>
        private void OnErrorEditTimesSetTimeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EditTimesSetTimeRequest? editTimesSetTimeRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEditTimesSetTime(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, editTimesSetTimeRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="editTimesSetTimeRequest"></param>
        partial void OnErrorEditTimesSetTime(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EditTimesSetTimeRequest? editTimesSetTimeRequest);

        /// <summary>
        /// Add or remove timestamps associated with a file. 
        /// </summary>
        /// <param name="editTimesSetTimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesSetTimeApiResponse"/>&gt;</returns>
        public async Task<IEditTimesSetTimeApiResponse?> EditTimesSetTimeOrDefaultAsync(EditTimesSetTimeRequest? editTimesSetTimeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditTimesSetTimeAsync(editTimesSetTimeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add or remove timestamps associated with a file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="editTimesSetTimeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditTimesSetTimeApiResponse"/>&gt;</returns>
        public async Task<IEditTimesSetTimeApiResponse> EditTimesSetTimeAsync(EditTimesSetTimeRequest? editTimesSetTimeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEditTimesSetTime(editTimesSetTimeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/edit_times/set_time"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/edit_times/set_time");

                    httpRequestMessageLocalVar.Content = (editTimesSetTimeRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(editTimesSetTimeRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Access-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Hydrus-Client-API-Session-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditTimesSetTimeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditTimesSetTimeApiResponse>();

                        EditTimesSetTimeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edit_times/set_time", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditTimesSetTimeDefaultImplementation(apiResponseLocalVar, editTimesSetTimeRequest);

                        Events.ExecuteOnEditTimesSetTime(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditTimesSetTimeDefaultImplementation(e, "/edit_times/set_time", uriBuilderLocalVar.Path, editTimesSetTimeRequest);
                Events.ExecuteOnErrorEditTimesSetTime(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditTimesSetTimeApiResponse"/>
        /// </summary>
        public partial class EditTimesSetTimeApiResponse : HydrusAPI.NET.Client.ApiResponse, IEditTimesSetTimeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditTimesSetTimeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditTimesSetTimeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditTimesSetTimeApiResponse(ILogger<EditTimesSetTimeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
