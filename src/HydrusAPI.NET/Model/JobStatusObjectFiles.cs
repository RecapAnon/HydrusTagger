// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// File attachments for the job.
    /// </summary>
    public partial class JobStatusObjectFiles : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatusObjectFiles" /> class.
        /// </summary>
        /// <param name="label">Label for attached files.</param>
        /// <param name="hashes">hashes</param>
        [JsonConstructor]
        public JobStatusObjectFiles(Option<string?> label = default, Option<List<string>?> hashes = default)
        {
            LabelOption = label;
            HashesOption = hashes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Label
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LabelOption { get; private set; }

        /// <summary>
        /// Label for attached files.
        /// </summary>
        /// <value>Label for attached files.</value>
        [JsonPropertyName("label")]
        public string? Label { get { return this.LabelOption; } set { this.LabelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hashes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> HashesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hashes
        /// </summary>
        [JsonPropertyName("hashes")]
        public List<string>? Hashes { get { return this.HashesOption; } set { this.HashesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobStatusObjectFiles {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Hashes: ").Append(Hashes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobStatusObjectFiles" />
    /// </summary>
    public class JobStatusObjectFilesJsonConverter : JsonConverter<JobStatusObjectFiles>
    {
        /// <summary>
        /// Deserializes json to <see cref="JobStatusObjectFiles" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override JobStatusObjectFiles Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> label = default;
            Option<List<string>?> hashes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "label":
                            label = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hashes":
                            hashes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (label.IsSet && label.Value == null)
                throw new ArgumentNullException(nameof(label), "Property is not nullable for class JobStatusObjectFiles.");

            if (hashes.IsSet && hashes.Value == null)
                throw new ArgumentNullException(nameof(hashes), "Property is not nullable for class JobStatusObjectFiles.");

            return new JobStatusObjectFiles(label, hashes);
        }

        /// <summary>
        /// Serializes a <see cref="JobStatusObjectFiles" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobStatusObjectFiles"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, JobStatusObjectFiles jobStatusObjectFiles, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, jobStatusObjectFiles, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="JobStatusObjectFiles" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobStatusObjectFiles"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, JobStatusObjectFiles jobStatusObjectFiles, JsonSerializerOptions jsonSerializerOptions)
        {
            if (jobStatusObjectFiles.LabelOption.IsSet && jobStatusObjectFiles.Label == null)
                throw new ArgumentNullException(nameof(jobStatusObjectFiles.Label), "Property is required for class JobStatusObjectFiles.");

            if (jobStatusObjectFiles.HashesOption.IsSet && jobStatusObjectFiles.Hashes == null)
                throw new ArgumentNullException(nameof(jobStatusObjectFiles.Hashes), "Property is required for class JobStatusObjectFiles.");

            if (jobStatusObjectFiles.LabelOption.IsSet)
                writer.WriteString("label", jobStatusObjectFiles.Label);

            if (jobStatusObjectFiles.HashesOption.IsSet)
            {
                writer.WritePropertyName("hashes");
                JsonSerializer.Serialize(writer, jobStatusObjectFiles.Hashes, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The JobStatusObjectFilesSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(JobStatusObjectFiles))]
    public partial class JobStatusObjectFilesSerializationContext : JsonSerializerContext { }
}
