// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner
    /// </summary>
    public partial class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner" /> class.
        /// </summary>
        /// <param name="hashA">Hexadecimal SHA256 hash of file A.</param>
        /// <param name="hashB">Hexadecimal SHA256 hash of file B.</param>
        /// <param name="relationship">Relationship type.</param>
        /// <param name="doDefaultContentMerge">Whether to apply the user&#39;s default content merge settings.</param>
        /// <param name="deleteA">Whether to delete file A in the same operation. (default to false)</param>
        /// <param name="deleteB">Whether to delete file B in the same operation. (default to false)</param>
        [JsonConstructor]
        public ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner(string hashA, string hashB, RelationshipEnum relationship, bool doDefaultContentMerge, Option<bool?> deleteA = default, Option<bool?> deleteB = default)
        {
            HashA = hashA;
            HashB = hashB;
            Relationship = relationship;
            DoDefaultContentMerge = doDefaultContentMerge;
            DeleteAOption = deleteA;
            DeleteBOption = deleteB;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Relationship type.
        /// </summary>
        /// <value>Relationship type.</value>
        public enum RelationshipEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_7 for value: 7
            /// </summary>
            NUMBER_7 = 7
        }

        /// <summary>
        /// Returns a <see cref="RelationshipEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RelationshipEnum RelationshipEnumFromString(string value)
        {
            if (value.Equals((0).ToString()))
                return RelationshipEnum.NUMBER_0;

            if (value.Equals((1).ToString()))
                return RelationshipEnum.NUMBER_1;

            if (value.Equals((2).ToString()))
                return RelationshipEnum.NUMBER_2;

            if (value.Equals((3).ToString()))
                return RelationshipEnum.NUMBER_3;

            if (value.Equals((4).ToString()))
                return RelationshipEnum.NUMBER_4;

            if (value.Equals((7).ToString()))
                return RelationshipEnum.NUMBER_7;

            throw new NotImplementedException($"Could not convert value to type RelationshipEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RelationshipEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RelationshipEnum? RelationshipEnumFromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return RelationshipEnum.NUMBER_0;

            if (value.Equals((1).ToString()))
                return RelationshipEnum.NUMBER_1;

            if (value.Equals((2).ToString()))
                return RelationshipEnum.NUMBER_2;

            if (value.Equals((3).ToString()))
                return RelationshipEnum.NUMBER_3;

            if (value.Equals((4).ToString()))
                return RelationshipEnum.NUMBER_4;

            if (value.Equals((7).ToString()))
                return RelationshipEnum.NUMBER_7;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RelationshipEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static int RelationshipEnumToJsonValue(RelationshipEnum value)
        {
            return (int) value;
        }

        /// <summary>
        /// Relationship type.
        /// </summary>
        /// <value>Relationship type.</value>
        [JsonPropertyName("relationship")]
        public RelationshipEnum Relationship { get; set; }

        /// <summary>
        /// Hexadecimal SHA256 hash of file A.
        /// </summary>
        /// <value>Hexadecimal SHA256 hash of file A.</value>
        [JsonPropertyName("hash_a")]
        public string HashA { get; set; }

        /// <summary>
        /// Hexadecimal SHA256 hash of file B.
        /// </summary>
        /// <value>Hexadecimal SHA256 hash of file B.</value>
        [JsonPropertyName("hash_b")]
        public string HashB { get; set; }

        /// <summary>
        /// Whether to apply the user&#39;s default content merge settings.
        /// </summary>
        /// <value>Whether to apply the user&#39;s default content merge settings.</value>
        [JsonPropertyName("do_default_content_merge")]
        public bool DoDefaultContentMerge { get; set; }

        /// <summary>
        /// Used to track the state of DeleteA
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeleteAOption { get; private set; }

        /// <summary>
        /// Whether to delete file A in the same operation.
        /// </summary>
        /// <value>Whether to delete file A in the same operation.</value>
        [JsonPropertyName("delete_a")]
        public bool? DeleteA { get { return this.DeleteAOption; } set { this.DeleteAOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeleteB
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeleteBOption { get; private set; }

        /// <summary>
        /// Whether to delete file B in the same operation.
        /// </summary>
        /// <value>Whether to delete file B in the same operation.</value>
        [JsonPropertyName("delete_b")]
        public bool? DeleteB { get { return this.DeleteBOption; } set { this.DeleteBOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner {\n");
            sb.Append("  HashA: ").Append(HashA).Append("\n");
            sb.Append("  HashB: ").Append(HashB).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  DoDefaultContentMerge: ").Append(DoDefaultContentMerge).Append("\n");
            sb.Append("  DeleteA: ").Append(DeleteA).Append("\n");
            sb.Append("  DeleteB: ").Append(DeleteB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner" />
    /// </summary>
    public class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInnerJsonConverter : JsonConverter<ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> hashA = default;
            Option<string?> hashB = default;
            Option<ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.RelationshipEnum?> relationship = default;
            Option<bool?> doDefaultContentMerge = default;
            Option<bool?> deleteA = default;
            Option<bool?> deleteB = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hash_a":
                            hashA = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hash_b":
                            hashB = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "relationship":
                            relationship = new Option<ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.RelationshipEnum?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.RelationshipEnum?)null : (ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.RelationshipEnum)utf8JsonReader.GetInt32());
                            break;
                        case "do_default_content_merge":
                            doDefaultContentMerge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "delete_a":
                            deleteA = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "delete_b":
                            deleteB = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!hashA.IsSet)
                throw new ArgumentException("Property is required for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.", nameof(hashA));

            if (!hashB.IsSet)
                throw new ArgumentException("Property is required for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.", nameof(hashB));

            if (!relationship.IsSet)
                throw new ArgumentException("Property is required for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.", nameof(relationship));

            if (!doDefaultContentMerge.IsSet)
                throw new ArgumentException("Property is required for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.", nameof(doDefaultContentMerge));

            if (hashA.IsSet && hashA.Value == null)
                throw new ArgumentNullException(nameof(hashA), "Property is not nullable for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.");

            if (hashB.IsSet && hashB.Value == null)
                throw new ArgumentNullException(nameof(hashB), "Property is not nullable for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.");

            if (relationship.IsSet && relationship.Value == null)
                throw new ArgumentNullException(nameof(relationship), "Property is not nullable for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.");

            if (doDefaultContentMerge.IsSet && doDefaultContentMerge.Value == null)
                throw new ArgumentNullException(nameof(doDefaultContentMerge), "Property is not nullable for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.");

            if (deleteA.IsSet && deleteA.Value == null)
                throw new ArgumentNullException(nameof(deleteA), "Property is not nullable for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.");

            if (deleteB.IsSet && deleteB.Value == null)
                throw new ArgumentNullException(nameof(deleteB), "Property is not nullable for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.");

            return new ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner(hashA.Value!, hashB.Value!, relationship.Value!.Value!, doDefaultContentMerge.Value!.Value!, deleteA, deleteB);
        }

        /// <summary>
        /// Serializes a <see cref="ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.HashA == null)
                throw new ArgumentNullException(nameof(manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.HashA), "Property is required for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.");

            if (manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.HashB == null)
                throw new ArgumentNullException(nameof(manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.HashB), "Property is required for class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.");

            writer.WriteString("hash_a", manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.HashA);

            writer.WriteString("hash_b", manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.HashB);

            writer.WriteNumber("relationship", ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.RelationshipEnumToJsonValue(manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.Relationship));

            writer.WriteBoolean("do_default_content_merge", manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.DoDefaultContentMerge);

            if (manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.DeleteAOption.IsSet)
                writer.WriteBoolean("delete_a", manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.DeleteAOption.Value!.Value);

            if (manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.DeleteBOption.IsSet)
                writer.WriteBoolean("delete_b", manageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner.DeleteBOption.Value!.Value);
        }
    }

    /// <summary>
    /// The ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInner))]
    public partial class ManageFileRelationshipsSetFileRelationshipsRequestRelationshipsInnerSerializationContext : JsonSerializerContext { }
}
