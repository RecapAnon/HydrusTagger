// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManageHeadersSetHeadersRequest
    /// </summary>
    public partial class ManageHeadersSetHeadersRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManageHeadersSetHeadersRequest" /> class.
        /// </summary>
        /// <param name="domain">The specific domain to set headers for. If null or omitted, applies globally.</param>
        /// <param name="headers">headers</param>
        [JsonConstructor]
        public ManageHeadersSetHeadersRequest(Option<string?> domain = default, Option<Dictionary<string, ManageHeadersSetHeadersRequestHeadersValue>?> headers = default)
        {
            DomainOption = domain;
            HeadersOption = headers;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Domain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomainOption { get; private set; }

        /// <summary>
        /// The specific domain to set headers for. If null or omitted, applies globally.
        /// </summary>
        /// <value>The specific domain to set headers for. If null or omitted, applies globally.</value>
        [JsonPropertyName("domain")]
        public string? Domain { get { return this.DomainOption; } set { this.DomainOption = new(value); } }

        /// <summary>
        /// Used to track the state of Headers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, ManageHeadersSetHeadersRequestHeadersValue>?> HeadersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [JsonPropertyName("headers")]
        public Dictionary<string, ManageHeadersSetHeadersRequestHeadersValue>? Headers { get { return this.HeadersOption; } set { this.HeadersOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManageHeadersSetHeadersRequest {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManageHeadersSetHeadersRequest" />
    /// </summary>
    public class ManageHeadersSetHeadersRequestJsonConverter : JsonConverter<ManageHeadersSetHeadersRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManageHeadersSetHeadersRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManageHeadersSetHeadersRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> domain = default;
            Option<Dictionary<string, ManageHeadersSetHeadersRequestHeadersValue>?> headers = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domain":
                            domain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "headers":
                            headers = new Option<Dictionary<string, ManageHeadersSetHeadersRequestHeadersValue>?>(JsonSerializer.Deserialize<Dictionary<string, ManageHeadersSetHeadersRequestHeadersValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class ManageHeadersSetHeadersRequest.");

            if (headers.IsSet && headers.Value == null)
                throw new ArgumentNullException(nameof(headers), "Property is not nullable for class ManageHeadersSetHeadersRequest.");

            return new ManageHeadersSetHeadersRequest(domain, headers);
        }

        /// <summary>
        /// Serializes a <see cref="ManageHeadersSetHeadersRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, manageHeadersSetHeadersRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManageHeadersSetHeadersRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageHeadersSetHeadersRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManageHeadersSetHeadersRequest manageHeadersSetHeadersRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (manageHeadersSetHeadersRequest.DomainOption.IsSet && manageHeadersSetHeadersRequest.Domain == null)
                throw new ArgumentNullException(nameof(manageHeadersSetHeadersRequest.Domain), "Property is required for class ManageHeadersSetHeadersRequest.");

            if (manageHeadersSetHeadersRequest.HeadersOption.IsSet && manageHeadersSetHeadersRequest.Headers == null)
                throw new ArgumentNullException(nameof(manageHeadersSetHeadersRequest.Headers), "Property is required for class ManageHeadersSetHeadersRequest.");

            if (manageHeadersSetHeadersRequest.DomainOption.IsSet)
                writer.WriteString("domain", manageHeadersSetHeadersRequest.Domain);

            if (manageHeadersSetHeadersRequest.HeadersOption.IsSet)
            {
                writer.WritePropertyName("headers");
                JsonSerializer.Serialize(writer, manageHeadersSetHeadersRequest.Headers, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The ManageHeadersSetHeadersRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManageHeadersSetHeadersRequest))]
    public partial class ManageHeadersSetHeadersRequestSerializationContext : JsonSerializerContext { }
}
