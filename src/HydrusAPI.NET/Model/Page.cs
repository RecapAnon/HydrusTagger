// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// Page
    /// </summary>
    public partial class Page : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Page" /> class.
        /// </summary>
        /// <param name="name">The full text on the page tab.</param>
        /// <param name="pageKey">Unique identifier for the page.</param>
        /// <param name="pageState">State of the page (0 ready, 1 initialising, 2 searching/loading, 3 search cancelled).</param>
        /// <param name="pageType">Type of the page (e.g., 6 File search, 10 Page of pages).</param>
        /// <param name="isMediaPage">Whether the page holds thumbnails.</param>
        /// <param name="selected">Whether the page is currently in view.</param>
        /// <param name="pages">pages</param>
        [JsonConstructor]
        public Page(Option<string?> name = default, Option<string?> pageKey = default, Option<int?> pageState = default, Option<int?> pageType = default, Option<bool?> isMediaPage = default, Option<bool?> selected = default, Option<List<Page>?> pages = default)
        {
            NameOption = name;
            PageKeyOption = pageKey;
            PageStateOption = pageState;
            PageTypeOption = pageType;
            IsMediaPageOption = isMediaPage;
            SelectedOption = selected;
            PagesOption = pages;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The full text on the page tab.
        /// </summary>
        /// <value>The full text on the page tab.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PageKeyOption { get; private set; }

        /// <summary>
        /// Unique identifier for the page.
        /// </summary>
        /// <value>Unique identifier for the page.</value>
        [JsonPropertyName("page_key")]
        public string? PageKey { get { return this.PageKeyOption; } set { this.PageKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageStateOption { get; private set; }

        /// <summary>
        /// State of the page (0 ready, 1 initialising, 2 searching/loading, 3 search cancelled).
        /// </summary>
        /// <value>State of the page (0 ready, 1 initialising, 2 searching/loading, 3 search cancelled).</value>
        [JsonPropertyName("page_state")]
        public int? PageState { get { return this.PageStateOption; } set { this.PageStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageTypeOption { get; private set; }

        /// <summary>
        /// Type of the page (e.g., 6 File search, 10 Page of pages).
        /// </summary>
        /// <value>Type of the page (e.g., 6 File search, 10 Page of pages).</value>
        [JsonPropertyName("page_type")]
        public int? PageType { get { return this.PageTypeOption; } set { this.PageTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsMediaPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsMediaPageOption { get; private set; }

        /// <summary>
        /// Whether the page holds thumbnails.
        /// </summary>
        /// <value>Whether the page holds thumbnails.</value>
        [JsonPropertyName("is_media_page")]
        public bool? IsMediaPage { get { return this.IsMediaPageOption; } set { this.IsMediaPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Selected
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SelectedOption { get; private set; }

        /// <summary>
        /// Whether the page is currently in view.
        /// </summary>
        /// <value>Whether the page is currently in view.</value>
        [JsonPropertyName("selected")]
        public bool? Selected { get { return this.SelectedOption; } set { this.SelectedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Page>?> PagesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [JsonPropertyName("pages")]
        public List<Page>? Pages { get { return this.PagesOption; } set { this.PagesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Page {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PageKey: ").Append(PageKey).Append("\n");
            sb.Append("  PageState: ").Append(PageState).Append("\n");
            sb.Append("  PageType: ").Append(PageType).Append("\n");
            sb.Append("  IsMediaPage: ").Append(IsMediaPage).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Page" />
    /// </summary>
    public class PageJsonConverter : JsonConverter<Page>
    {
        /// <summary>
        /// Deserializes json to <see cref="Page" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Page Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> pageKey = default;
            Option<int?> pageState = default;
            Option<int?> pageType = default;
            Option<bool?> isMediaPage = default;
            Option<bool?> selected = default;
            Option<List<Page>?> pages = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "page_key":
                            pageKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "page_state":
                            pageState = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "page_type":
                            pageType = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_media_page":
                            isMediaPage = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "selected":
                            selected = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "pages":
                            pages = new Option<List<Page>?>(JsonSerializer.Deserialize<List<Page>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Page.");

            if (pageKey.IsSet && pageKey.Value == null)
                throw new ArgumentNullException(nameof(pageKey), "Property is not nullable for class Page.");

            if (pageState.IsSet && pageState.Value == null)
                throw new ArgumentNullException(nameof(pageState), "Property is not nullable for class Page.");

            if (pageType.IsSet && pageType.Value == null)
                throw new ArgumentNullException(nameof(pageType), "Property is not nullable for class Page.");

            if (isMediaPage.IsSet && isMediaPage.Value == null)
                throw new ArgumentNullException(nameof(isMediaPage), "Property is not nullable for class Page.");

            if (selected.IsSet && selected.Value == null)
                throw new ArgumentNullException(nameof(selected), "Property is not nullable for class Page.");

            if (pages.IsSet && pages.Value == null)
                throw new ArgumentNullException(nameof(pages), "Property is not nullable for class Page.");

            return new Page(name, pageKey, pageState, pageType, isMediaPage, selected, pages);
        }

        /// <summary>
        /// Serializes a <see cref="Page" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="page"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Page page, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, page, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Page" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="page"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Page page, JsonSerializerOptions jsonSerializerOptions)
        {
            if (page.NameOption.IsSet && page.Name == null)
                throw new ArgumentNullException(nameof(page.Name), "Property is required for class Page.");

            if (page.PageKeyOption.IsSet && page.PageKey == null)
                throw new ArgumentNullException(nameof(page.PageKey), "Property is required for class Page.");

            if (page.PagesOption.IsSet && page.Pages == null)
                throw new ArgumentNullException(nameof(page.Pages), "Property is required for class Page.");

            if (page.NameOption.IsSet)
                writer.WriteString("name", page.Name);

            if (page.PageKeyOption.IsSet)
                writer.WriteString("page_key", page.PageKey);

            if (page.PageStateOption.IsSet)
                writer.WriteNumber("page_state", page.PageStateOption.Value!.Value);

            if (page.PageTypeOption.IsSet)
                writer.WriteNumber("page_type", page.PageTypeOption.Value!.Value);

            if (page.IsMediaPageOption.IsSet)
                writer.WriteBoolean("is_media_page", page.IsMediaPageOption.Value!.Value);

            if (page.SelectedOption.IsSet)
                writer.WriteBoolean("selected", page.SelectedOption.Value!.Value);

            if (page.PagesOption.IsSet)
            {
                writer.WritePropertyName("pages");
                JsonSerializer.Serialize(writer, page.Pages, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The PageSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Page))]
    public partial class PageSerializationContext : JsonSerializerContext { }
}
