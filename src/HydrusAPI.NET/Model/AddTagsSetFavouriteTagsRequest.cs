// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// AddTagsSetFavouriteTagsRequest
    /// </summary>
    public partial class AddTagsSetFavouriteTagsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTagsSetFavouriteTagsRequest" /> class.
        /// </summary>
        /// <param name="set">If provided, this list will completely overwrite the existing favourite tags.</param>
        /// <param name="add">Optional. A list of tags to add to the current favourite tags.</param>
        /// <param name="remove">Optional. A list of tags to remove from the current favourite tags.</param>
        [JsonConstructor]
        public AddTagsSetFavouriteTagsRequest(Option<List<string>?> set = default, Option<List<string>?> add = default, Option<List<string>?> remove = default)
        {
            SetOption = set;
            AddOption = add;
            RemoveOption = remove;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Set
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> SetOption { get; private set; }

        /// <summary>
        /// If provided, this list will completely overwrite the existing favourite tags.
        /// </summary>
        /// <value>If provided, this list will completely overwrite the existing favourite tags.</value>
        [JsonPropertyName("set")]
        public List<string>? Set { get { return this.SetOption; } set { this.SetOption = new(value); } }

        /// <summary>
        /// Used to track the state of Add
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AddOption { get; private set; }

        /// <summary>
        /// Optional. A list of tags to add to the current favourite tags.
        /// </summary>
        /// <value>Optional. A list of tags to add to the current favourite tags.</value>
        [JsonPropertyName("add")]
        public List<string>? Add { get { return this.AddOption; } set { this.AddOption = new(value); } }

        /// <summary>
        /// Used to track the state of Remove
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> RemoveOption { get; private set; }

        /// <summary>
        /// Optional. A list of tags to remove from the current favourite tags.
        /// </summary>
        /// <value>Optional. A list of tags to remove from the current favourite tags.</value>
        [JsonPropertyName("remove")]
        public List<string>? Remove { get { return this.RemoveOption; } set { this.RemoveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddTagsSetFavouriteTagsRequest {\n");
            sb.Append("  Set: ").Append(Set).Append("\n");
            sb.Append("  Add: ").Append(Add).Append("\n");
            sb.Append("  Remove: ").Append(Remove).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddTagsSetFavouriteTagsRequest" />
    /// </summary>
    public class AddTagsSetFavouriteTagsRequestJsonConverter : JsonConverter<AddTagsSetFavouriteTagsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddTagsSetFavouriteTagsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddTagsSetFavouriteTagsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> set = default;
            Option<List<string>?> add = default;
            Option<List<string>?> remove = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "set":
                            set = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "add":
                            add = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "remove":
                            remove = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (set.IsSet && set.Value == null)
                throw new ArgumentNullException(nameof(set), "Property is not nullable for class AddTagsSetFavouriteTagsRequest.");

            if (add.IsSet && add.Value == null)
                throw new ArgumentNullException(nameof(add), "Property is not nullable for class AddTagsSetFavouriteTagsRequest.");

            if (remove.IsSet && remove.Value == null)
                throw new ArgumentNullException(nameof(remove), "Property is not nullable for class AddTagsSetFavouriteTagsRequest.");

            return new AddTagsSetFavouriteTagsRequest(set, add, remove);
        }

        /// <summary>
        /// Serializes a <see cref="AddTagsSetFavouriteTagsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addTagsSetFavouriteTagsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddTagsSetFavouriteTagsRequest addTagsSetFavouriteTagsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addTagsSetFavouriteTagsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddTagsSetFavouriteTagsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addTagsSetFavouriteTagsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddTagsSetFavouriteTagsRequest addTagsSetFavouriteTagsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addTagsSetFavouriteTagsRequest.SetOption.IsSet && addTagsSetFavouriteTagsRequest.Set == null)
                throw new ArgumentNullException(nameof(addTagsSetFavouriteTagsRequest.Set), "Property is required for class AddTagsSetFavouriteTagsRequest.");

            if (addTagsSetFavouriteTagsRequest.AddOption.IsSet && addTagsSetFavouriteTagsRequest.Add == null)
                throw new ArgumentNullException(nameof(addTagsSetFavouriteTagsRequest.Add), "Property is required for class AddTagsSetFavouriteTagsRequest.");

            if (addTagsSetFavouriteTagsRequest.RemoveOption.IsSet && addTagsSetFavouriteTagsRequest.Remove == null)
                throw new ArgumentNullException(nameof(addTagsSetFavouriteTagsRequest.Remove), "Property is required for class AddTagsSetFavouriteTagsRequest.");

            if (addTagsSetFavouriteTagsRequest.SetOption.IsSet)
            {
                writer.WritePropertyName("set");
                JsonSerializer.Serialize(writer, addTagsSetFavouriteTagsRequest.Set, jsonSerializerOptions);
            }
            if (addTagsSetFavouriteTagsRequest.AddOption.IsSet)
            {
                writer.WritePropertyName("add");
                JsonSerializer.Serialize(writer, addTagsSetFavouriteTagsRequest.Add, jsonSerializerOptions);
            }
            if (addTagsSetFavouriteTagsRequest.RemoveOption.IsSet)
            {
                writer.WritePropertyName("remove");
                JsonSerializer.Serialize(writer, addTagsSetFavouriteTagsRequest.Remove, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The AddTagsSetFavouriteTagsRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddTagsSetFavouriteTagsRequest))]
    public partial class AddTagsSetFavouriteTagsRequestSerializationContext : JsonSerializerContext { }
}
