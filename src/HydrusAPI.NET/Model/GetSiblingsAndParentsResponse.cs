// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// GetSiblingsAndParentsResponse
    /// </summary>
    public partial class GetSiblingsAndParentsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSiblingsAndParentsResponse" /> class.
        /// </summary>
        /// <param name="services">services</param>
        /// <param name="tags">tags</param>
        [JsonConstructor]
        public GetSiblingsAndParentsResponse(Dictionary<string, Service>? services = default, Dictionary<string, Dictionary<string, GetSiblingsAndParentsResponseTagsValueValue>>? tags = default)
        {
            Services = services;
            Tags = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [JsonPropertyName("services")]
        public Dictionary<string, Service>? Services { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public Dictionary<string, Dictionary<string, GetSiblingsAndParentsResponseTagsValueValue>>? Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSiblingsAndParentsResponse {\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSiblingsAndParentsResponse" />
    /// </summary>
    public class GetSiblingsAndParentsResponseJsonConverter : JsonConverter<GetSiblingsAndParentsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSiblingsAndParentsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSiblingsAndParentsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, Service>?> services = default;
            Option<Dictionary<string, Dictionary<string, GetSiblingsAndParentsResponseTagsValueValue>>?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "services":
                            services = new Option<Dictionary<string, Service>?>(JsonSerializer.Deserialize<Dictionary<string, Service>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            tags = new Option<Dictionary<string, Dictionary<string, GetSiblingsAndParentsResponseTagsValueValue>>?>(JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, GetSiblingsAndParentsResponseTagsValueValue>>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!services.IsSet)
                throw new ArgumentException("Property is required for class GetSiblingsAndParentsResponse.", nameof(services));

            if (!tags.IsSet)
                throw new ArgumentException("Property is required for class GetSiblingsAndParentsResponse.", nameof(tags));

            return new GetSiblingsAndParentsResponse(services.Value!, tags.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetSiblingsAndParentsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSiblingsAndParentsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSiblingsAndParentsResponse getSiblingsAndParentsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSiblingsAndParentsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSiblingsAndParentsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSiblingsAndParentsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSiblingsAndParentsResponse getSiblingsAndParentsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSiblingsAndParentsResponse.Services != null)
            {
                writer.WritePropertyName("services");
                JsonSerializer.Serialize(writer, getSiblingsAndParentsResponse.Services, jsonSerializerOptions);
            }
            else
                writer.WriteNull("services");
            if (getSiblingsAndParentsResponse.Tags != null)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, getSiblingsAndParentsResponse.Tags, jsonSerializerOptions);
            }
            else
                writer.WriteNull("tags");
        }
    }

    /// <summary>
    /// The GetSiblingsAndParentsResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetSiblingsAndParentsResponse))]
    public partial class GetSiblingsAndParentsResponseSerializationContext : JsonSerializerContext { }
}
