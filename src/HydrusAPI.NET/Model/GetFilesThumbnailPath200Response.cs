// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// GetFilesThumbnailPath200Response
    /// </summary>
    public partial class GetFilesThumbnailPath200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFilesThumbnailPath200Response" /> class.
        /// </summary>
        /// <param name="path">The file system path to the thumbnail.</param>
        /// <param name="filetype">The MIME type of the thumbnail (e.g., &#x60;image/png&#x60; or &#x60;image/jpeg&#x60;).</param>
        [JsonConstructor]
        public GetFilesThumbnailPath200Response(string path, Option<string?> filetype = default)
        {
            Path = path;
            FiletypeOption = filetype;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The file system path to the thumbnail.
        /// </summary>
        /// <value>The file system path to the thumbnail.</value>
        [JsonPropertyName("path")]
        public string Path { get; set; }

        /// <summary>
        /// Used to track the state of Filetype
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FiletypeOption { get; private set; }

        /// <summary>
        /// The MIME type of the thumbnail (e.g., &#x60;image/png&#x60; or &#x60;image/jpeg&#x60;).
        /// </summary>
        /// <value>The MIME type of the thumbnail (e.g., &#x60;image/png&#x60; or &#x60;image/jpeg&#x60;).</value>
        /* <example>image/png</example> */
        [JsonPropertyName("filetype")]
        public string? Filetype { get { return this.FiletypeOption; } set { this.FiletypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetFilesThumbnailPath200Response {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Filetype: ").Append(Filetype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetFilesThumbnailPath200Response" />
    /// </summary>
    public class GetFilesThumbnailPath200ResponseJsonConverter : JsonConverter<GetFilesThumbnailPath200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetFilesThumbnailPath200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetFilesThumbnailPath200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> path = default;
            Option<string?> filetype = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "filetype":
                            filetype = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!path.IsSet)
                throw new ArgumentException("Property is required for class GetFilesThumbnailPath200Response.", nameof(path));

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class GetFilesThumbnailPath200Response.");

            if (filetype.IsSet && filetype.Value == null)
                throw new ArgumentNullException(nameof(filetype), "Property is not nullable for class GetFilesThumbnailPath200Response.");

            return new GetFilesThumbnailPath200Response(path.Value!, filetype);
        }

        /// <summary>
        /// Serializes a <see cref="GetFilesThumbnailPath200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getFilesThumbnailPath200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetFilesThumbnailPath200Response getFilesThumbnailPath200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getFilesThumbnailPath200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetFilesThumbnailPath200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getFilesThumbnailPath200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetFilesThumbnailPath200Response getFilesThumbnailPath200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getFilesThumbnailPath200Response.Path == null)
                throw new ArgumentNullException(nameof(getFilesThumbnailPath200Response.Path), "Property is required for class GetFilesThumbnailPath200Response.");

            if (getFilesThumbnailPath200Response.FiletypeOption.IsSet && getFilesThumbnailPath200Response.Filetype == null)
                throw new ArgumentNullException(nameof(getFilesThumbnailPath200Response.Filetype), "Property is required for class GetFilesThumbnailPath200Response.");

            writer.WriteString("path", getFilesThumbnailPath200Response.Path);

            if (getFilesThumbnailPath200Response.FiletypeOption.IsSet)
                writer.WriteString("filetype", getFilesThumbnailPath200Response.Filetype);
        }
    }

    /// <summary>
    /// The GetFilesThumbnailPath200ResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetFilesThumbnailPath200Response))]
    public partial class GetFilesThumbnailPath200ResponseSerializationContext : JsonSerializerContext { }
}
