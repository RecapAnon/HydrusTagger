// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// EditTimesSetTimeRequest
    /// </summary>
    public partial class EditTimesSetTimeRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditTimesSetTimeRequest" /> class.
        /// </summary>
        /// <param name="timestampType">The type of timestamp you are editing.</param>
        /// <param name="fileId">A numerical file id.</param>
        /// <param name="fileIds">A list of numerical file ids.</param>
        /// <param name="hash">A hexadecimal SHA256 hash.</param>
        /// <param name="hashes">A list of hexadecimal SHA256 hashes.</param>
        /// <param name="timestamp">timestamp</param>
        /// <param name="timestampMs">timestampMs</param>
        /// <param name="fileServiceKey">Hexadecimal, the file service you are editing in &#39;imported&#39;/&#39;deleted&#39;/&#39;previously imported&#39;.</param>
        /// <param name="canvasType">Int, the canvas type you are editing in &#39;last viewed&#39;.</param>
        /// <param name="domain">String, the domain you are editing in &#39;modified (web domain)&#39;.</param>
        [JsonConstructor]
        public EditTimesSetTimeRequest(int timestampType, Option<int?> fileId = default, Option<List<int>?> fileIds = default, Option<string?> hash = default, Option<List<string>?> hashes = default, Option<decimal?> timestamp = default, Option<int?> timestampMs = default, Option<string?> fileServiceKey = default, Option<int?> canvasType = default, Option<string?> domain = default)
        {
            TimestampType = timestampType;
            FileIdOption = fileId;
            FileIdsOption = fileIds;
            HashOption = hash;
            HashesOption = hashes;
            TimestampOption = timestamp;
            TimestampMsOption = timestampMs;
            FileServiceKeyOption = fileServiceKey;
            CanvasTypeOption = canvasType;
            DomainOption = domain;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of timestamp you are editing.
        /// </summary>
        /// <value>The type of timestamp you are editing.</value>
        [JsonPropertyName("timestamp_type")]
        public int TimestampType { get; set; }

        /// <summary>
        /// Used to track the state of FileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileIdOption { get; private set; }

        /// <summary>
        /// A numerical file id.
        /// </summary>
        /// <value>A numerical file id.</value>
        [JsonPropertyName("file_id")]
        public int? FileId { get { return this.FileIdOption; } set { this.FileIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> FileIdsOption { get; private set; }

        /// <summary>
        /// A list of numerical file ids.
        /// </summary>
        /// <value>A list of numerical file ids.</value>
        [JsonPropertyName("file_ids")]
        public List<int>? FileIds { get { return this.FileIdsOption; } set { this.FileIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// A hexadecimal SHA256 hash.
        /// </summary>
        /// <value>A hexadecimal SHA256 hash.</value>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hashes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> HashesOption { get; private set; }

        /// <summary>
        /// A list of hexadecimal SHA256 hashes.
        /// </summary>
        /// <value>A list of hexadecimal SHA256 hashes.</value>
        [JsonPropertyName("hashes")]
        public List<string>? Hashes { get { return this.HashesOption; } set { this.HashesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [JsonPropertyName("timestamp")]
        public decimal? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimestampMs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimestampMsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TimestampMs
        /// </summary>
        [JsonPropertyName("timestamp_ms")]
        public int? TimestampMs { get { return this.TimestampMsOption; } set { this.TimestampMsOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileServiceKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileServiceKeyOption { get; private set; }

        /// <summary>
        /// Hexadecimal, the file service you are editing in &#39;imported&#39;/&#39;deleted&#39;/&#39;previously imported&#39;.
        /// </summary>
        /// <value>Hexadecimal, the file service you are editing in &#39;imported&#39;/&#39;deleted&#39;/&#39;previously imported&#39;.</value>
        [JsonPropertyName("file_service_key")]
        public string? FileServiceKey { get { return this.FileServiceKeyOption; } set { this.FileServiceKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of CanvasType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CanvasTypeOption { get; private set; }

        /// <summary>
        /// Int, the canvas type you are editing in &#39;last viewed&#39;.
        /// </summary>
        /// <value>Int, the canvas type you are editing in &#39;last viewed&#39;.</value>
        [JsonPropertyName("canvas_type")]
        public int? CanvasType { get { return this.CanvasTypeOption; } set { this.CanvasTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Domain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomainOption { get; private set; }

        /// <summary>
        /// String, the domain you are editing in &#39;modified (web domain)&#39;.
        /// </summary>
        /// <value>String, the domain you are editing in &#39;modified (web domain)&#39;.</value>
        [JsonPropertyName("domain")]
        public string? Domain { get { return this.DomainOption; } set { this.DomainOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EditTimesSetTimeRequest {\n");
            sb.Append("  TimestampType: ").Append(TimestampType).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Hashes: ").Append(Hashes).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TimestampMs: ").Append(TimestampMs).Append("\n");
            sb.Append("  FileServiceKey: ").Append(FileServiceKey).Append("\n");
            sb.Append("  CanvasType: ").Append(CanvasType).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EditTimesSetTimeRequest" />
    /// </summary>
    public class EditTimesSetTimeRequestJsonConverter : JsonConverter<EditTimesSetTimeRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="EditTimesSetTimeRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EditTimesSetTimeRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> timestampType = default;
            Option<int?> fileId = default;
            Option<List<int>?> fileIds = default;
            Option<string?> hash = default;
            Option<List<string>?> hashes = default;
            Option<decimal?> timestamp = default;
            Option<int?> timestampMs = default;
            Option<string?> fileServiceKey = default;
            Option<int?> canvasType = default;
            Option<string?> domain = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "timestamp_type":
                            timestampType = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_id":
                            fileId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_ids":
                            fileIds = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hashes":
                            hashes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "timestamp":
                            timestamp = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "timestamp_ms":
                            timestampMs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_service_key":
                            fileServiceKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "canvas_type":
                            canvasType = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "domain":
                            domain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!timestampType.IsSet)
                throw new ArgumentException("Property is required for class EditTimesSetTimeRequest.", nameof(timestampType));

            if (timestampType.IsSet && timestampType.Value == null)
                throw new ArgumentNullException(nameof(timestampType), "Property is not nullable for class EditTimesSetTimeRequest.");

            if (fileId.IsSet && fileId.Value == null)
                throw new ArgumentNullException(nameof(fileId), "Property is not nullable for class EditTimesSetTimeRequest.");

            if (fileIds.IsSet && fileIds.Value == null)
                throw new ArgumentNullException(nameof(fileIds), "Property is not nullable for class EditTimesSetTimeRequest.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class EditTimesSetTimeRequest.");

            if (hashes.IsSet && hashes.Value == null)
                throw new ArgumentNullException(nameof(hashes), "Property is not nullable for class EditTimesSetTimeRequest.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class EditTimesSetTimeRequest.");

            if (timestampMs.IsSet && timestampMs.Value == null)
                throw new ArgumentNullException(nameof(timestampMs), "Property is not nullable for class EditTimesSetTimeRequest.");

            if (fileServiceKey.IsSet && fileServiceKey.Value == null)
                throw new ArgumentNullException(nameof(fileServiceKey), "Property is not nullable for class EditTimesSetTimeRequest.");

            if (canvasType.IsSet && canvasType.Value == null)
                throw new ArgumentNullException(nameof(canvasType), "Property is not nullable for class EditTimesSetTimeRequest.");

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class EditTimesSetTimeRequest.");

            return new EditTimesSetTimeRequest(timestampType.Value!.Value!, fileId, fileIds, hash, hashes, timestamp, timestampMs, fileServiceKey, canvasType, domain);
        }

        /// <summary>
        /// Serializes a <see cref="EditTimesSetTimeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="editTimesSetTimeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EditTimesSetTimeRequest editTimesSetTimeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, editTimesSetTimeRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EditTimesSetTimeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="editTimesSetTimeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EditTimesSetTimeRequest editTimesSetTimeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (editTimesSetTimeRequest.FileIdsOption.IsSet && editTimesSetTimeRequest.FileIds == null)
                throw new ArgumentNullException(nameof(editTimesSetTimeRequest.FileIds), "Property is required for class EditTimesSetTimeRequest.");

            if (editTimesSetTimeRequest.HashOption.IsSet && editTimesSetTimeRequest.Hash == null)
                throw new ArgumentNullException(nameof(editTimesSetTimeRequest.Hash), "Property is required for class EditTimesSetTimeRequest.");

            if (editTimesSetTimeRequest.HashesOption.IsSet && editTimesSetTimeRequest.Hashes == null)
                throw new ArgumentNullException(nameof(editTimesSetTimeRequest.Hashes), "Property is required for class EditTimesSetTimeRequest.");

            if (editTimesSetTimeRequest.FileServiceKeyOption.IsSet && editTimesSetTimeRequest.FileServiceKey == null)
                throw new ArgumentNullException(nameof(editTimesSetTimeRequest.FileServiceKey), "Property is required for class EditTimesSetTimeRequest.");

            if (editTimesSetTimeRequest.DomainOption.IsSet && editTimesSetTimeRequest.Domain == null)
                throw new ArgumentNullException(nameof(editTimesSetTimeRequest.Domain), "Property is required for class EditTimesSetTimeRequest.");

            writer.WriteNumber("timestamp_type", editTimesSetTimeRequest.TimestampType);

            if (editTimesSetTimeRequest.FileIdOption.IsSet)
                writer.WriteNumber("file_id", editTimesSetTimeRequest.FileIdOption.Value!.Value);

            if (editTimesSetTimeRequest.FileIdsOption.IsSet)
            {
                writer.WritePropertyName("file_ids");
                JsonSerializer.Serialize(writer, editTimesSetTimeRequest.FileIds, jsonSerializerOptions);
            }
            if (editTimesSetTimeRequest.HashOption.IsSet)
                writer.WriteString("hash", editTimesSetTimeRequest.Hash);

            if (editTimesSetTimeRequest.HashesOption.IsSet)
            {
                writer.WritePropertyName("hashes");
                JsonSerializer.Serialize(writer, editTimesSetTimeRequest.Hashes, jsonSerializerOptions);
            }
            if (editTimesSetTimeRequest.TimestampOption.IsSet)
                writer.WriteNumber("timestamp", editTimesSetTimeRequest.TimestampOption.Value!.Value);

            if (editTimesSetTimeRequest.TimestampMsOption.IsSet)
                writer.WriteNumber("timestamp_ms", editTimesSetTimeRequest.TimestampMsOption.Value!.Value);

            if (editTimesSetTimeRequest.FileServiceKeyOption.IsSet)
                writer.WriteString("file_service_key", editTimesSetTimeRequest.FileServiceKey);

            if (editTimesSetTimeRequest.CanvasTypeOption.IsSet)
                writer.WriteNumber("canvas_type", editTimesSetTimeRequest.CanvasTypeOption.Value!.Value);

            if (editTimesSetTimeRequest.DomainOption.IsSet)
                writer.WriteString("domain", editTimesSetTimeRequest.Domain);
        }
    }

    /// <summary>
    /// The EditTimesSetTimeRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(EditTimesSetTimeRequest))]
    public partial class EditTimesSetTimeRequestSerializationContext : JsonSerializerContext { }
}
