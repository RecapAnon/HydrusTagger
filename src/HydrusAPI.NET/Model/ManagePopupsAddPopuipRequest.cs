// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManagePopupsAddPopuipRequest
    /// </summary>
    public partial class ManagePopupsAddPopuipRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagePopupsAddPopuipRequest" /> class.
        /// </summary>
        /// <param name="statusText1">First status text line for the popup.</param>
        /// <param name="isCancellable">Whether the popup job can be cancelled.</param>
        /// <param name="isPausable">Whether the popup job can be paused.</param>
        /// <param name="attachedFilesMergable">Whether attached files can be merged.</param>
        /// <param name="statusTitle">The title of the job status popup.</param>
        /// <param name="statusText2">Second status text line for the popup.</param>
        /// <param name="popupGauge1">A gauge represented as a two-element array [current, max].</param>
        /// <param name="popupGauge2">A second gauge represented as a two-element array [current, max].</param>
        /// <param name="apiData">Optional JSON object to associate with the popup.</param>
        /// <param name="filesLabel">Label for the attached files (required if files are provided).</param>
        /// <param name="hashes">Array of SHA256 hashes of files to attach to the job status.</param>
        [JsonConstructor]
        public ManagePopupsAddPopuipRequest(string statusText1, Option<bool?> isCancellable = default, Option<bool?> isPausable = default, Option<bool?> attachedFilesMergable = default, Option<string?> statusTitle = default, Option<string?> statusText2 = default, Option<List<int>?> popupGauge1 = default, Option<List<int>?> popupGauge2 = default, Option<Object?> apiData = default, Option<string?> filesLabel = default, Option<List<string>?> hashes = default)
        {
            StatusText1 = statusText1;
            IsCancellableOption = isCancellable;
            IsPausableOption = isPausable;
            AttachedFilesMergableOption = attachedFilesMergable;
            StatusTitleOption = statusTitle;
            StatusText2Option = statusText2;
            PopupGauge1Option = popupGauge1;
            PopupGauge2Option = popupGauge2;
            ApiDataOption = apiData;
            FilesLabelOption = filesLabel;
            HashesOption = hashes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// First status text line for the popup.
        /// </summary>
        /// <value>First status text line for the popup.</value>
        [JsonPropertyName("status_text_1")]
        public string StatusText1 { get; set; }

        /// <summary>
        /// Used to track the state of IsCancellable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCancellableOption { get; private set; }

        /// <summary>
        /// Whether the popup job can be cancelled.
        /// </summary>
        /// <value>Whether the popup job can be cancelled.</value>
        [JsonPropertyName("is_cancellable")]
        public bool? IsCancellable { get { return this.IsCancellableOption; } set { this.IsCancellableOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPausable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPausableOption { get; private set; }

        /// <summary>
        /// Whether the popup job can be paused.
        /// </summary>
        /// <value>Whether the popup job can be paused.</value>
        [JsonPropertyName("is_pausable")]
        public bool? IsPausable { get { return this.IsPausableOption; } set { this.IsPausableOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttachedFilesMergable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AttachedFilesMergableOption { get; private set; }

        /// <summary>
        /// Whether attached files can be merged.
        /// </summary>
        /// <value>Whether attached files can be merged.</value>
        [JsonPropertyName("attached_files_mergable")]
        public bool? AttachedFilesMergable { get { return this.AttachedFilesMergableOption; } set { this.AttachedFilesMergableOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusTitleOption { get; private set; }

        /// <summary>
        /// The title of the job status popup.
        /// </summary>
        /// <value>The title of the job status popup.</value>
        [JsonPropertyName("status_title")]
        public string? StatusTitle { get { return this.StatusTitleOption; } set { this.StatusTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusText2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusText2Option { get; private set; }

        /// <summary>
        /// Second status text line for the popup.
        /// </summary>
        /// <value>Second status text line for the popup.</value>
        [JsonPropertyName("status_text_2")]
        public string? StatusText2 { get { return this.StatusText2Option; } set { this.StatusText2Option = new(value); } }

        /// <summary>
        /// Used to track the state of PopupGauge1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> PopupGauge1Option { get; private set; }

        /// <summary>
        /// A gauge represented as a two-element array [current, max].
        /// </summary>
        /// <value>A gauge represented as a two-element array [current, max].</value>
        [JsonPropertyName("popup_gauge_1")]
        public List<int>? PopupGauge1 { get { return this.PopupGauge1Option; } set { this.PopupGauge1Option = new(value); } }

        /// <summary>
        /// Used to track the state of PopupGauge2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> PopupGauge2Option { get; private set; }

        /// <summary>
        /// A second gauge represented as a two-element array [current, max].
        /// </summary>
        /// <value>A second gauge represented as a two-element array [current, max].</value>
        [JsonPropertyName("popup_gauge_2")]
        public List<int>? PopupGauge2 { get { return this.PopupGauge2Option; } set { this.PopupGauge2Option = new(value); } }

        /// <summary>
        /// Used to track the state of ApiData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ApiDataOption { get; private set; }

        /// <summary>
        /// Optional JSON object to associate with the popup.
        /// </summary>
        /// <value>Optional JSON object to associate with the popup.</value>
        [JsonPropertyName("api_data")]
        public Object? ApiData { get { return this.ApiDataOption; } set { this.ApiDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of FilesLabel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FilesLabelOption { get; private set; }

        /// <summary>
        /// Label for the attached files (required if files are provided).
        /// </summary>
        /// <value>Label for the attached files (required if files are provided).</value>
        [JsonPropertyName("files_label")]
        public string? FilesLabel { get { return this.FilesLabelOption; } set { this.FilesLabelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hashes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> HashesOption { get; private set; }

        /// <summary>
        /// Array of SHA256 hashes of files to attach to the job status.
        /// </summary>
        /// <value>Array of SHA256 hashes of files to attach to the job status.</value>
        [JsonPropertyName("hashes")]
        public List<string>? Hashes { get { return this.HashesOption; } set { this.HashesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagePopupsAddPopuipRequest {\n");
            sb.Append("  StatusText1: ").Append(StatusText1).Append("\n");
            sb.Append("  IsCancellable: ").Append(IsCancellable).Append("\n");
            sb.Append("  IsPausable: ").Append(IsPausable).Append("\n");
            sb.Append("  AttachedFilesMergable: ").Append(AttachedFilesMergable).Append("\n");
            sb.Append("  StatusTitle: ").Append(StatusTitle).Append("\n");
            sb.Append("  StatusText2: ").Append(StatusText2).Append("\n");
            sb.Append("  PopupGauge1: ").Append(PopupGauge1).Append("\n");
            sb.Append("  PopupGauge2: ").Append(PopupGauge2).Append("\n");
            sb.Append("  ApiData: ").Append(ApiData).Append("\n");
            sb.Append("  FilesLabel: ").Append(FilesLabel).Append("\n");
            sb.Append("  Hashes: ").Append(Hashes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManagePopupsAddPopuipRequest" />
    /// </summary>
    public class ManagePopupsAddPopuipRequestJsonConverter : JsonConverter<ManagePopupsAddPopuipRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManagePopupsAddPopuipRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManagePopupsAddPopuipRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> statusText1 = default;
            Option<bool?> isCancellable = default;
            Option<bool?> isPausable = default;
            Option<bool?> attachedFilesMergable = default;
            Option<string?> statusTitle = default;
            Option<string?> statusText2 = default;
            Option<List<int>?> popupGauge1 = default;
            Option<List<int>?> popupGauge2 = default;
            Option<Object?> apiData = default;
            Option<string?> filesLabel = default;
            Option<List<string>?> hashes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status_text_1":
                            statusText1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_cancellable":
                            isCancellable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_pausable":
                            isPausable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "attached_files_mergable":
                            attachedFilesMergable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "status_title":
                            statusTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status_text_2":
                            statusText2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "popup_gauge_1":
                            popupGauge1 = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "popup_gauge_2":
                            popupGauge2 = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "api_data":
                            apiData = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "files_label":
                            filesLabel = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hashes":
                            hashes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!statusText1.IsSet)
                throw new ArgumentException("Property is required for class ManagePopupsAddPopuipRequest.", nameof(statusText1));

            if (statusText1.IsSet && statusText1.Value == null)
                throw new ArgumentNullException(nameof(statusText1), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            if (isCancellable.IsSet && isCancellable.Value == null)
                throw new ArgumentNullException(nameof(isCancellable), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            if (isPausable.IsSet && isPausable.Value == null)
                throw new ArgumentNullException(nameof(isPausable), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            if (attachedFilesMergable.IsSet && attachedFilesMergable.Value == null)
                throw new ArgumentNullException(nameof(attachedFilesMergable), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            if (statusTitle.IsSet && statusTitle.Value == null)
                throw new ArgumentNullException(nameof(statusTitle), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            if (statusText2.IsSet && statusText2.Value == null)
                throw new ArgumentNullException(nameof(statusText2), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            if (popupGauge1.IsSet && popupGauge1.Value == null)
                throw new ArgumentNullException(nameof(popupGauge1), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            if (popupGauge2.IsSet && popupGauge2.Value == null)
                throw new ArgumentNullException(nameof(popupGauge2), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            if (apiData.IsSet && apiData.Value == null)
                throw new ArgumentNullException(nameof(apiData), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            if (filesLabel.IsSet && filesLabel.Value == null)
                throw new ArgumentNullException(nameof(filesLabel), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            if (hashes.IsSet && hashes.Value == null)
                throw new ArgumentNullException(nameof(hashes), "Property is not nullable for class ManagePopupsAddPopuipRequest.");

            return new ManagePopupsAddPopuipRequest(statusText1.Value!, isCancellable, isPausable, attachedFilesMergable, statusTitle, statusText2, popupGauge1, popupGauge2, apiData, filesLabel, hashes);
        }

        /// <summary>
        /// Serializes a <see cref="ManagePopupsAddPopuipRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="managePopupsAddPopuipRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, managePopupsAddPopuipRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManagePopupsAddPopuipRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="managePopupsAddPopuipRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManagePopupsAddPopuipRequest managePopupsAddPopuipRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (managePopupsAddPopuipRequest.StatusText1 == null)
                throw new ArgumentNullException(nameof(managePopupsAddPopuipRequest.StatusText1), "Property is required for class ManagePopupsAddPopuipRequest.");

            if (managePopupsAddPopuipRequest.StatusTitleOption.IsSet && managePopupsAddPopuipRequest.StatusTitle == null)
                throw new ArgumentNullException(nameof(managePopupsAddPopuipRequest.StatusTitle), "Property is required for class ManagePopupsAddPopuipRequest.");

            if (managePopupsAddPopuipRequest.StatusText2Option.IsSet && managePopupsAddPopuipRequest.StatusText2 == null)
                throw new ArgumentNullException(nameof(managePopupsAddPopuipRequest.StatusText2), "Property is required for class ManagePopupsAddPopuipRequest.");

            if (managePopupsAddPopuipRequest.PopupGauge1Option.IsSet && managePopupsAddPopuipRequest.PopupGauge1 == null)
                throw new ArgumentNullException(nameof(managePopupsAddPopuipRequest.PopupGauge1), "Property is required for class ManagePopupsAddPopuipRequest.");

            if (managePopupsAddPopuipRequest.PopupGauge2Option.IsSet && managePopupsAddPopuipRequest.PopupGauge2 == null)
                throw new ArgumentNullException(nameof(managePopupsAddPopuipRequest.PopupGauge2), "Property is required for class ManagePopupsAddPopuipRequest.");

            if (managePopupsAddPopuipRequest.ApiDataOption.IsSet && managePopupsAddPopuipRequest.ApiData == null)
                throw new ArgumentNullException(nameof(managePopupsAddPopuipRequest.ApiData), "Property is required for class ManagePopupsAddPopuipRequest.");

            if (managePopupsAddPopuipRequest.FilesLabelOption.IsSet && managePopupsAddPopuipRequest.FilesLabel == null)
                throw new ArgumentNullException(nameof(managePopupsAddPopuipRequest.FilesLabel), "Property is required for class ManagePopupsAddPopuipRequest.");

            if (managePopupsAddPopuipRequest.HashesOption.IsSet && managePopupsAddPopuipRequest.Hashes == null)
                throw new ArgumentNullException(nameof(managePopupsAddPopuipRequest.Hashes), "Property is required for class ManagePopupsAddPopuipRequest.");

            writer.WriteString("status_text_1", managePopupsAddPopuipRequest.StatusText1);

            if (managePopupsAddPopuipRequest.IsCancellableOption.IsSet)
                writer.WriteBoolean("is_cancellable", managePopupsAddPopuipRequest.IsCancellableOption.Value!.Value);

            if (managePopupsAddPopuipRequest.IsPausableOption.IsSet)
                writer.WriteBoolean("is_pausable", managePopupsAddPopuipRequest.IsPausableOption.Value!.Value);

            if (managePopupsAddPopuipRequest.AttachedFilesMergableOption.IsSet)
                writer.WriteBoolean("attached_files_mergable", managePopupsAddPopuipRequest.AttachedFilesMergableOption.Value!.Value);

            if (managePopupsAddPopuipRequest.StatusTitleOption.IsSet)
                writer.WriteString("status_title", managePopupsAddPopuipRequest.StatusTitle);

            if (managePopupsAddPopuipRequest.StatusText2Option.IsSet)
                writer.WriteString("status_text_2", managePopupsAddPopuipRequest.StatusText2);

            if (managePopupsAddPopuipRequest.PopupGauge1Option.IsSet)
            {
                writer.WritePropertyName("popup_gauge_1");
                JsonSerializer.Serialize(writer, managePopupsAddPopuipRequest.PopupGauge1, jsonSerializerOptions);
            }
            if (managePopupsAddPopuipRequest.PopupGauge2Option.IsSet)
            {
                writer.WritePropertyName("popup_gauge_2");
                JsonSerializer.Serialize(writer, managePopupsAddPopuipRequest.PopupGauge2, jsonSerializerOptions);
            }
            if (managePopupsAddPopuipRequest.ApiDataOption.IsSet)
            {
                writer.WritePropertyName("api_data");
                JsonSerializer.Serialize(writer, managePopupsAddPopuipRequest.ApiData, jsonSerializerOptions);
            }
            if (managePopupsAddPopuipRequest.FilesLabelOption.IsSet)
                writer.WriteString("files_label", managePopupsAddPopuipRequest.FilesLabel);

            if (managePopupsAddPopuipRequest.HashesOption.IsSet)
            {
                writer.WritePropertyName("hashes");
                JsonSerializer.Serialize(writer, managePopupsAddPopuipRequest.Hashes, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The ManagePopupsAddPopuipRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManagePopupsAddPopuipRequest))]
    public partial class ManagePopupsAddPopuipRequestSerializationContext : JsonSerializerContext { }
}
