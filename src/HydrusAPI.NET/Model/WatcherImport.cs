// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// WatcherImport
    /// </summary>
    public partial class WatcherImport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WatcherImport" /> class.
        /// </summary>
        /// <param name="url">url</param>
        /// <param name="watcherKey">watcherKey</param>
        /// <param name="created">created</param>
        /// <param name="lastCheckTime">lastCheckTime</param>
        /// <param name="nextCheckTime">nextCheckTime</param>
        /// <param name="filesPaused">filesPaused</param>
        /// <param name="checkingPaused">checkingPaused</param>
        /// <param name="checkingStatus">checkingStatus</param>
        /// <param name="subject">subject</param>
        /// <param name="imports">imports</param>
        /// <param name="galleryLog">galleryLog</param>
        [JsonConstructor]
        public WatcherImport(Option<string?> url = default, Option<string?> watcherKey = default, Option<int?> created = default, Option<int?> lastCheckTime = default, Option<int?> nextCheckTime = default, Option<bool?> filesPaused = default, Option<bool?> checkingPaused = default, Option<int?> checkingStatus = default, Option<string?> subject = default, Option<ImportInfo?> imports = default, Option<ImportInfo?> galleryLog = default)
        {
            UrlOption = url;
            WatcherKeyOption = watcherKey;
            CreatedOption = created;
            LastCheckTimeOption = lastCheckTime;
            NextCheckTimeOption = nextCheckTime;
            FilesPausedOption = filesPaused;
            CheckingPausedOption = checkingPaused;
            CheckingStatusOption = checkingStatus;
            SubjectOption = subject;
            ImportsOption = imports;
            GalleryLogOption = galleryLog;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        /* <example>https://someimageboard.net/m/123456</example> */
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of WatcherKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WatcherKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets WatcherKey
        /// </summary>
        /* <example>cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85</example> */
        [JsonPropertyName("watcher_key")]
        public string? WatcherKey { get { return this.WatcherKeyOption; } set { this.WatcherKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Created
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CreatedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        /* <example>1566164269</example> */
        [JsonPropertyName("created")]
        public int? Created { get { return this.CreatedOption; } set { this.CreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastCheckTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LastCheckTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastCheckTime
        /// </summary>
        /* <example>1566164272</example> */
        [JsonPropertyName("last_check_time")]
        public int? LastCheckTime { get { return this.LastCheckTimeOption; } set { this.LastCheckTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of NextCheckTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NextCheckTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets NextCheckTime
        /// </summary>
        /* <example>1566174272</example> */
        [JsonPropertyName("next_check_time")]
        public int? NextCheckTime { get { return this.NextCheckTimeOption; } set { this.NextCheckTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FilesPaused
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FilesPausedOption { get; private set; }

        /// <summary>
        /// Gets or Sets FilesPaused
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("files_paused")]
        public bool? FilesPaused { get { return this.FilesPausedOption; } set { this.FilesPausedOption = new(value); } }

        /// <summary>
        /// Used to track the state of CheckingPaused
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckingPausedOption { get; private set; }

        /// <summary>
        /// Gets or Sets CheckingPaused
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("checking_paused")]
        public bool? CheckingPaused { get { return this.CheckingPausedOption; } set { this.CheckingPausedOption = new(value); } }

        /// <summary>
        /// Used to track the state of CheckingStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CheckingStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets CheckingStatus
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("checking_status")]
        public int? CheckingStatus { get { return this.CheckingStatusOption; } set { this.CheckingStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        /* <example>gundam pictures</example> */
        [JsonPropertyName("subject")]
        public string? Subject { get { return this.SubjectOption; } set { this.SubjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of Imports
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ImportInfo?> ImportsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Imports
        /// </summary>
        [JsonPropertyName("imports")]
        public ImportInfo? Imports { get { return this.ImportsOption; } set { this.ImportsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GalleryLog
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ImportInfo?> GalleryLogOption { get; private set; }

        /// <summary>
        /// Gets or Sets GalleryLog
        /// </summary>
        [JsonPropertyName("gallery_log")]
        public ImportInfo? GalleryLog { get { return this.GalleryLogOption; } set { this.GalleryLogOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WatcherImport {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  WatcherKey: ").Append(WatcherKey).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  LastCheckTime: ").Append(LastCheckTime).Append("\n");
            sb.Append("  NextCheckTime: ").Append(NextCheckTime).Append("\n");
            sb.Append("  FilesPaused: ").Append(FilesPaused).Append("\n");
            sb.Append("  CheckingPaused: ").Append(CheckingPaused).Append("\n");
            sb.Append("  CheckingStatus: ").Append(CheckingStatus).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Imports: ").Append(Imports).Append("\n");
            sb.Append("  GalleryLog: ").Append(GalleryLog).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WatcherImport" />
    /// </summary>
    public class WatcherImportJsonConverter : JsonConverter<WatcherImport>
    {
        /// <summary>
        /// Deserializes json to <see cref="WatcherImport" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WatcherImport Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> url = default;
            Option<string?> watcherKey = default;
            Option<int?> created = default;
            Option<int?> lastCheckTime = default;
            Option<int?> nextCheckTime = default;
            Option<bool?> filesPaused = default;
            Option<bool?> checkingPaused = default;
            Option<int?> checkingStatus = default;
            Option<string?> subject = default;
            Option<ImportInfo?> imports = default;
            Option<ImportInfo?> galleryLog = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "watcher_key":
                            watcherKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created":
                            created = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "last_check_time":
                            lastCheckTime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "next_check_time":
                            nextCheckTime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "files_paused":
                            filesPaused = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "checking_paused":
                            checkingPaused = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "checking_status":
                            checkingStatus = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "imports":
                            imports = new Option<ImportInfo?>(JsonSerializer.Deserialize<ImportInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "gallery_log":
                            galleryLog = new Option<ImportInfo?>(JsonSerializer.Deserialize<ImportInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class WatcherImport.");

            if (watcherKey.IsSet && watcherKey.Value == null)
                throw new ArgumentNullException(nameof(watcherKey), "Property is not nullable for class WatcherImport.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class WatcherImport.");

            if (lastCheckTime.IsSet && lastCheckTime.Value == null)
                throw new ArgumentNullException(nameof(lastCheckTime), "Property is not nullable for class WatcherImport.");

            if (nextCheckTime.IsSet && nextCheckTime.Value == null)
                throw new ArgumentNullException(nameof(nextCheckTime), "Property is not nullable for class WatcherImport.");

            if (filesPaused.IsSet && filesPaused.Value == null)
                throw new ArgumentNullException(nameof(filesPaused), "Property is not nullable for class WatcherImport.");

            if (checkingPaused.IsSet && checkingPaused.Value == null)
                throw new ArgumentNullException(nameof(checkingPaused), "Property is not nullable for class WatcherImport.");

            if (checkingStatus.IsSet && checkingStatus.Value == null)
                throw new ArgumentNullException(nameof(checkingStatus), "Property is not nullable for class WatcherImport.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class WatcherImport.");

            if (imports.IsSet && imports.Value == null)
                throw new ArgumentNullException(nameof(imports), "Property is not nullable for class WatcherImport.");

            if (galleryLog.IsSet && galleryLog.Value == null)
                throw new ArgumentNullException(nameof(galleryLog), "Property is not nullable for class WatcherImport.");

            return new WatcherImport(url, watcherKey, created, lastCheckTime, nextCheckTime, filesPaused, checkingPaused, checkingStatus, subject, imports, galleryLog);
        }

        /// <summary>
        /// Serializes a <see cref="WatcherImport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="watcherImport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WatcherImport watcherImport, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, watcherImport, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WatcherImport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="watcherImport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WatcherImport watcherImport, JsonSerializerOptions jsonSerializerOptions)
        {
            if (watcherImport.UrlOption.IsSet && watcherImport.Url == null)
                throw new ArgumentNullException(nameof(watcherImport.Url), "Property is required for class WatcherImport.");

            if (watcherImport.WatcherKeyOption.IsSet && watcherImport.WatcherKey == null)
                throw new ArgumentNullException(nameof(watcherImport.WatcherKey), "Property is required for class WatcherImport.");

            if (watcherImport.SubjectOption.IsSet && watcherImport.Subject == null)
                throw new ArgumentNullException(nameof(watcherImport.Subject), "Property is required for class WatcherImport.");

            if (watcherImport.ImportsOption.IsSet && watcherImport.Imports == null)
                throw new ArgumentNullException(nameof(watcherImport.Imports), "Property is required for class WatcherImport.");

            if (watcherImport.GalleryLogOption.IsSet && watcherImport.GalleryLog == null)
                throw new ArgumentNullException(nameof(watcherImport.GalleryLog), "Property is required for class WatcherImport.");

            if (watcherImport.UrlOption.IsSet)
                writer.WriteString("url", watcherImport.Url);

            if (watcherImport.WatcherKeyOption.IsSet)
                writer.WriteString("watcher_key", watcherImport.WatcherKey);

            if (watcherImport.CreatedOption.IsSet)
                writer.WriteNumber("created", watcherImport.CreatedOption.Value!.Value);

            if (watcherImport.LastCheckTimeOption.IsSet)
                writer.WriteNumber("last_check_time", watcherImport.LastCheckTimeOption.Value!.Value);

            if (watcherImport.NextCheckTimeOption.IsSet)
                writer.WriteNumber("next_check_time", watcherImport.NextCheckTimeOption.Value!.Value);

            if (watcherImport.FilesPausedOption.IsSet)
                writer.WriteBoolean("files_paused", watcherImport.FilesPausedOption.Value!.Value);

            if (watcherImport.CheckingPausedOption.IsSet)
                writer.WriteBoolean("checking_paused", watcherImport.CheckingPausedOption.Value!.Value);

            if (watcherImport.CheckingStatusOption.IsSet)
                writer.WriteNumber("checking_status", watcherImport.CheckingStatusOption.Value!.Value);

            if (watcherImport.SubjectOption.IsSet)
                writer.WriteString("subject", watcherImport.Subject);

            if (watcherImport.ImportsOption.IsSet)
            {
                writer.WritePropertyName("imports");
                JsonSerializer.Serialize(writer, watcherImport.Imports, jsonSerializerOptions);
            }
            if (watcherImport.GalleryLogOption.IsSet)
            {
                writer.WritePropertyName("gallery_log");
                JsonSerializer.Serialize(writer, watcherImport.GalleryLog, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The WatcherImportSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(WatcherImport))]
    public partial class WatcherImportSerializationContext : JsonSerializerContext { }
}
