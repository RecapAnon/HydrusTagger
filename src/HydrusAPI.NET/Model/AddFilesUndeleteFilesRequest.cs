// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// AddFilesUndeleteFilesRequest
    /// </summary>
    public partial class AddFilesUndeleteFilesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddFilesUndeleteFilesRequest" /> class.
        /// </summary>
        /// <param name="fileId">A single file ID to undelete.</param>
        /// <param name="fileIds">fileIds</param>
        /// <param name="hash">A SHA256 hash of a file to undelete.</param>
        /// <param name="hashes">hashes</param>
        /// <param name="fileServiceKey">Optional file service key (hexadecimal) to restrict undeletion to. Defaults to \&quot;all my files\&quot;. </param>
        /// <param name="fileServiceKeys">fileServiceKeys</param>
        /// <param name="deletedFileServiceKey">Optional deleted file service key (hexadecimal) to restrict undeletion from. </param>
        /// <param name="deletedFileServiceKeys">deletedFileServiceKeys</param>
        [JsonConstructor]
        public AddFilesUndeleteFilesRequest(Option<int?> fileId = default, Option<List<int>?> fileIds = default, Option<string?> hash = default, Option<List<string>?> hashes = default, Option<string?> fileServiceKey = default, Option<List<string>?> fileServiceKeys = default, Option<string?> deletedFileServiceKey = default, Option<List<string>?> deletedFileServiceKeys = default)
        {
            FileIdOption = fileId;
            FileIdsOption = fileIds;
            HashOption = hash;
            HashesOption = hashes;
            FileServiceKeyOption = fileServiceKey;
            FileServiceKeysOption = fileServiceKeys;
            DeletedFileServiceKeyOption = deletedFileServiceKey;
            DeletedFileServiceKeysOption = deletedFileServiceKeys;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileIdOption { get; private set; }

        /// <summary>
        /// A single file ID to undelete.
        /// </summary>
        /// <value>A single file ID to undelete.</value>
        [JsonPropertyName("file_id")]
        public int? FileId { get { return this.FileIdOption; } set { this.FileIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> FileIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileIds
        /// </summary>
        [JsonPropertyName("file_ids")]
        public List<int>? FileIds { get { return this.FileIdsOption; } set { this.FileIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// A SHA256 hash of a file to undelete.
        /// </summary>
        /// <value>A SHA256 hash of a file to undelete.</value>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hashes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> HashesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hashes
        /// </summary>
        [JsonPropertyName("hashes")]
        public List<string>? Hashes { get { return this.HashesOption; } set { this.HashesOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileServiceKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileServiceKeyOption { get; private set; }

        /// <summary>
        /// Optional file service key (hexadecimal) to restrict undeletion to. Defaults to \&quot;all my files\&quot;. 
        /// </summary>
        /// <value>Optional file service key (hexadecimal) to restrict undeletion to. Defaults to \&quot;all my files\&quot;. </value>
        [JsonPropertyName("file_service_key")]
        public string? FileServiceKey { get { return this.FileServiceKeyOption; } set { this.FileServiceKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileServiceKeys
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> FileServiceKeysOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileServiceKeys
        /// </summary>
        [JsonPropertyName("file_service_keys")]
        public List<string>? FileServiceKeys { get { return this.FileServiceKeysOption; } set { this.FileServiceKeysOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeletedFileServiceKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeletedFileServiceKeyOption { get; private set; }

        /// <summary>
        /// Optional deleted file service key (hexadecimal) to restrict undeletion from. 
        /// </summary>
        /// <value>Optional deleted file service key (hexadecimal) to restrict undeletion from. </value>
        [JsonPropertyName("deleted_file_service_key")]
        public string? DeletedFileServiceKey { get { return this.DeletedFileServiceKeyOption; } set { this.DeletedFileServiceKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeletedFileServiceKeys
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> DeletedFileServiceKeysOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeletedFileServiceKeys
        /// </summary>
        [JsonPropertyName("deleted_file_service_keys")]
        public List<string>? DeletedFileServiceKeys { get { return this.DeletedFileServiceKeysOption; } set { this.DeletedFileServiceKeysOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddFilesUndeleteFilesRequest {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Hashes: ").Append(Hashes).Append("\n");
            sb.Append("  FileServiceKey: ").Append(FileServiceKey).Append("\n");
            sb.Append("  FileServiceKeys: ").Append(FileServiceKeys).Append("\n");
            sb.Append("  DeletedFileServiceKey: ").Append(DeletedFileServiceKey).Append("\n");
            sb.Append("  DeletedFileServiceKeys: ").Append(DeletedFileServiceKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddFilesUndeleteFilesRequest" />
    /// </summary>
    public class AddFilesUndeleteFilesRequestJsonConverter : JsonConverter<AddFilesUndeleteFilesRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddFilesUndeleteFilesRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddFilesUndeleteFilesRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> fileId = default;
            Option<List<int>?> fileIds = default;
            Option<string?> hash = default;
            Option<List<string>?> hashes = default;
            Option<string?> fileServiceKey = default;
            Option<List<string>?> fileServiceKeys = default;
            Option<string?> deletedFileServiceKey = default;
            Option<List<string>?> deletedFileServiceKeys = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "file_id":
                            fileId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_ids":
                            fileIds = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hashes":
                            hashes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "file_service_key":
                            fileServiceKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "file_service_keys":
                            fileServiceKeys = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "deleted_file_service_key":
                            deletedFileServiceKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deleted_file_service_keys":
                            deletedFileServiceKeys = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fileId.IsSet && fileId.Value == null)
                throw new ArgumentNullException(nameof(fileId), "Property is not nullable for class AddFilesUndeleteFilesRequest.");

            if (fileIds.IsSet && fileIds.Value == null)
                throw new ArgumentNullException(nameof(fileIds), "Property is not nullable for class AddFilesUndeleteFilesRequest.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class AddFilesUndeleteFilesRequest.");

            if (hashes.IsSet && hashes.Value == null)
                throw new ArgumentNullException(nameof(hashes), "Property is not nullable for class AddFilesUndeleteFilesRequest.");

            if (fileServiceKey.IsSet && fileServiceKey.Value == null)
                throw new ArgumentNullException(nameof(fileServiceKey), "Property is not nullable for class AddFilesUndeleteFilesRequest.");

            if (fileServiceKeys.IsSet && fileServiceKeys.Value == null)
                throw new ArgumentNullException(nameof(fileServiceKeys), "Property is not nullable for class AddFilesUndeleteFilesRequest.");

            if (deletedFileServiceKey.IsSet && deletedFileServiceKey.Value == null)
                throw new ArgumentNullException(nameof(deletedFileServiceKey), "Property is not nullable for class AddFilesUndeleteFilesRequest.");

            if (deletedFileServiceKeys.IsSet && deletedFileServiceKeys.Value == null)
                throw new ArgumentNullException(nameof(deletedFileServiceKeys), "Property is not nullable for class AddFilesUndeleteFilesRequest.");

            return new AddFilesUndeleteFilesRequest(fileId, fileIds, hash, hashes, fileServiceKey, fileServiceKeys, deletedFileServiceKey, deletedFileServiceKeys);
        }

        /// <summary>
        /// Serializes a <see cref="AddFilesUndeleteFilesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addFilesUndeleteFilesRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddFilesUndeleteFilesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addFilesUndeleteFilesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddFilesUndeleteFilesRequest addFilesUndeleteFilesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addFilesUndeleteFilesRequest.FileIdsOption.IsSet && addFilesUndeleteFilesRequest.FileIds == null)
                throw new ArgumentNullException(nameof(addFilesUndeleteFilesRequest.FileIds), "Property is required for class AddFilesUndeleteFilesRequest.");

            if (addFilesUndeleteFilesRequest.HashOption.IsSet && addFilesUndeleteFilesRequest.Hash == null)
                throw new ArgumentNullException(nameof(addFilesUndeleteFilesRequest.Hash), "Property is required for class AddFilesUndeleteFilesRequest.");

            if (addFilesUndeleteFilesRequest.HashesOption.IsSet && addFilesUndeleteFilesRequest.Hashes == null)
                throw new ArgumentNullException(nameof(addFilesUndeleteFilesRequest.Hashes), "Property is required for class AddFilesUndeleteFilesRequest.");

            if (addFilesUndeleteFilesRequest.FileServiceKeyOption.IsSet && addFilesUndeleteFilesRequest.FileServiceKey == null)
                throw new ArgumentNullException(nameof(addFilesUndeleteFilesRequest.FileServiceKey), "Property is required for class AddFilesUndeleteFilesRequest.");

            if (addFilesUndeleteFilesRequest.FileServiceKeysOption.IsSet && addFilesUndeleteFilesRequest.FileServiceKeys == null)
                throw new ArgumentNullException(nameof(addFilesUndeleteFilesRequest.FileServiceKeys), "Property is required for class AddFilesUndeleteFilesRequest.");

            if (addFilesUndeleteFilesRequest.DeletedFileServiceKeyOption.IsSet && addFilesUndeleteFilesRequest.DeletedFileServiceKey == null)
                throw new ArgumentNullException(nameof(addFilesUndeleteFilesRequest.DeletedFileServiceKey), "Property is required for class AddFilesUndeleteFilesRequest.");

            if (addFilesUndeleteFilesRequest.DeletedFileServiceKeysOption.IsSet && addFilesUndeleteFilesRequest.DeletedFileServiceKeys == null)
                throw new ArgumentNullException(nameof(addFilesUndeleteFilesRequest.DeletedFileServiceKeys), "Property is required for class AddFilesUndeleteFilesRequest.");

            if (addFilesUndeleteFilesRequest.FileIdOption.IsSet)
                writer.WriteNumber("file_id", addFilesUndeleteFilesRequest.FileIdOption.Value!.Value);

            if (addFilesUndeleteFilesRequest.FileIdsOption.IsSet)
            {
                writer.WritePropertyName("file_ids");
                JsonSerializer.Serialize(writer, addFilesUndeleteFilesRequest.FileIds, jsonSerializerOptions);
            }
            if (addFilesUndeleteFilesRequest.HashOption.IsSet)
                writer.WriteString("hash", addFilesUndeleteFilesRequest.Hash);

            if (addFilesUndeleteFilesRequest.HashesOption.IsSet)
            {
                writer.WritePropertyName("hashes");
                JsonSerializer.Serialize(writer, addFilesUndeleteFilesRequest.Hashes, jsonSerializerOptions);
            }
            if (addFilesUndeleteFilesRequest.FileServiceKeyOption.IsSet)
                writer.WriteString("file_service_key", addFilesUndeleteFilesRequest.FileServiceKey);

            if (addFilesUndeleteFilesRequest.FileServiceKeysOption.IsSet)
            {
                writer.WritePropertyName("file_service_keys");
                JsonSerializer.Serialize(writer, addFilesUndeleteFilesRequest.FileServiceKeys, jsonSerializerOptions);
            }
            if (addFilesUndeleteFilesRequest.DeletedFileServiceKeyOption.IsSet)
                writer.WriteString("deleted_file_service_key", addFilesUndeleteFilesRequest.DeletedFileServiceKey);

            if (addFilesUndeleteFilesRequest.DeletedFileServiceKeysOption.IsSet)
            {
                writer.WritePropertyName("deleted_file_service_keys");
                JsonSerializer.Serialize(writer, addFilesUndeleteFilesRequest.DeletedFileServiceKeys, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The AddFilesUndeleteFilesRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddFilesUndeleteFilesRequest))]
    public partial class AddFilesUndeleteFilesRequestSerializationContext : JsonSerializerContext { }
}
