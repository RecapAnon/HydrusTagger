// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// AddUrlsAssociateUrlRequest
    /// </summary>
    public partial class AddUrlsAssociateUrlRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddUrlsAssociateUrlRequest" /> class.
        /// </summary>
        /// <param name="fileId">fileId</param>
        /// <param name="fileIds">fileIds</param>
        /// <param name="hash">hash</param>
        /// <param name="hashes">hashes</param>
        /// <param name="urlToAdd">urlToAdd</param>
        /// <param name="urlsToAdd">urlsToAdd</param>
        /// <param name="urlToDelete">urlToDelete</param>
        /// <param name="urlsToDelete">urlsToDelete</param>
        /// <param name="normaliseUrls">normaliseUrls (default to true)</param>
        [JsonConstructor]
        public AddUrlsAssociateUrlRequest(Option<int?> fileId = default, Option<List<int>?> fileIds = default, Option<string?> hash = default, Option<List<string>?> hashes = default, Option<string?> urlToAdd = default, Option<List<string>?> urlsToAdd = default, Option<string?> urlToDelete = default, Option<List<string>?> urlsToDelete = default, Option<bool?> normaliseUrls = default)
        {
            FileIdOption = fileId;
            FileIdsOption = fileIds;
            HashOption = hash;
            HashesOption = hashes;
            UrlToAddOption = urlToAdd;
            UrlsToAddOption = urlsToAdd;
            UrlToDeleteOption = urlToDelete;
            UrlsToDeleteOption = urlsToDelete;
            NormaliseUrlsOption = normaliseUrls;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [JsonPropertyName("file_id")]
        public int? FileId { get { return this.FileIdOption; } set { this.FileIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> FileIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileIds
        /// </summary>
        [JsonPropertyName("file_ids")]
        public List<int>? FileIds { get { return this.FileIdsOption; } set { this.FileIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        /* <example>529af82eee3660008a51823ee4ca0c40d1b4d59b6e2f7418e8b23f2d9c01b1fb</example> */
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hashes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> HashesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hashes
        /// </summary>
        [JsonPropertyName("hashes")]
        public List<string>? Hashes { get { return this.HashesOption; } set { this.HashesOption = new(value); } }

        /// <summary>
        /// Used to track the state of UrlToAdd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlToAddOption { get; private set; }

        /// <summary>
        /// Gets or Sets UrlToAdd
        /// </summary>
        [JsonPropertyName("url_to_add")]
        public string? UrlToAdd { get { return this.UrlToAddOption; } set { this.UrlToAddOption = new(value); } }

        /// <summary>
        /// Used to track the state of UrlsToAdd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> UrlsToAddOption { get; private set; }

        /// <summary>
        /// Gets or Sets UrlsToAdd
        /// </summary>
        [JsonPropertyName("urls_to_add")]
        public List<string>? UrlsToAdd { get { return this.UrlsToAddOption; } set { this.UrlsToAddOption = new(value); } }

        /// <summary>
        /// Used to track the state of UrlToDelete
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlToDeleteOption { get; private set; }

        /// <summary>
        /// Gets or Sets UrlToDelete
        /// </summary>
        [JsonPropertyName("url_to_delete")]
        public string? UrlToDelete { get { return this.UrlToDeleteOption; } set { this.UrlToDeleteOption = new(value); } }

        /// <summary>
        /// Used to track the state of UrlsToDelete
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> UrlsToDeleteOption { get; private set; }

        /// <summary>
        /// Gets or Sets UrlsToDelete
        /// </summary>
        [JsonPropertyName("urls_to_delete")]
        public List<string>? UrlsToDelete { get { return this.UrlsToDeleteOption; } set { this.UrlsToDeleteOption = new(value); } }

        /// <summary>
        /// Used to track the state of NormaliseUrls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NormaliseUrlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NormaliseUrls
        /// </summary>
        [JsonPropertyName("normalise_urls")]
        public bool? NormaliseUrls { get { return this.NormaliseUrlsOption; } set { this.NormaliseUrlsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddUrlsAssociateUrlRequest {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Hashes: ").Append(Hashes).Append("\n");
            sb.Append("  UrlToAdd: ").Append(UrlToAdd).Append("\n");
            sb.Append("  UrlsToAdd: ").Append(UrlsToAdd).Append("\n");
            sb.Append("  UrlToDelete: ").Append(UrlToDelete).Append("\n");
            sb.Append("  UrlsToDelete: ").Append(UrlsToDelete).Append("\n");
            sb.Append("  NormaliseUrls: ").Append(NormaliseUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddUrlsAssociateUrlRequest" />
    /// </summary>
    public class AddUrlsAssociateUrlRequestJsonConverter : JsonConverter<AddUrlsAssociateUrlRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddUrlsAssociateUrlRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddUrlsAssociateUrlRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> fileId = default;
            Option<List<int>?> fileIds = default;
            Option<string?> hash = default;
            Option<List<string>?> hashes = default;
            Option<string?> urlToAdd = default;
            Option<List<string>?> urlsToAdd = default;
            Option<string?> urlToDelete = default;
            Option<List<string>?> urlsToDelete = default;
            Option<bool?> normaliseUrls = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "file_id":
                            fileId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_ids":
                            fileIds = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hashes":
                            hashes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "url_to_add":
                            urlToAdd = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "urls_to_add":
                            urlsToAdd = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "url_to_delete":
                            urlToDelete = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "urls_to_delete":
                            urlsToDelete = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "normalise_urls":
                            normaliseUrls = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fileIds.IsSet && fileIds.Value == null)
                throw new ArgumentNullException(nameof(fileIds), "Property is not nullable for class AddUrlsAssociateUrlRequest.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class AddUrlsAssociateUrlRequest.");

            if (hashes.IsSet && hashes.Value == null)
                throw new ArgumentNullException(nameof(hashes), "Property is not nullable for class AddUrlsAssociateUrlRequest.");

            if (urlToAdd.IsSet && urlToAdd.Value == null)
                throw new ArgumentNullException(nameof(urlToAdd), "Property is not nullable for class AddUrlsAssociateUrlRequest.");

            if (urlsToAdd.IsSet && urlsToAdd.Value == null)
                throw new ArgumentNullException(nameof(urlsToAdd), "Property is not nullable for class AddUrlsAssociateUrlRequest.");

            if (urlToDelete.IsSet && urlToDelete.Value == null)
                throw new ArgumentNullException(nameof(urlToDelete), "Property is not nullable for class AddUrlsAssociateUrlRequest.");

            if (urlsToDelete.IsSet && urlsToDelete.Value == null)
                throw new ArgumentNullException(nameof(urlsToDelete), "Property is not nullable for class AddUrlsAssociateUrlRequest.");

            if (normaliseUrls.IsSet && normaliseUrls.Value == null)
                throw new ArgumentNullException(nameof(normaliseUrls), "Property is not nullable for class AddUrlsAssociateUrlRequest.");

            return new AddUrlsAssociateUrlRequest(fileId, fileIds, hash, hashes, urlToAdd, urlsToAdd, urlToDelete, urlsToDelete, normaliseUrls);
        }

        /// <summary>
        /// Serializes a <see cref="AddUrlsAssociateUrlRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addUrlsAssociateUrlRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddUrlsAssociateUrlRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addUrlsAssociateUrlRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddUrlsAssociateUrlRequest addUrlsAssociateUrlRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addUrlsAssociateUrlRequest.FileIdsOption.IsSet && addUrlsAssociateUrlRequest.FileIds == null)
                throw new ArgumentNullException(nameof(addUrlsAssociateUrlRequest.FileIds), "Property is required for class AddUrlsAssociateUrlRequest.");

            if (addUrlsAssociateUrlRequest.HashOption.IsSet && addUrlsAssociateUrlRequest.Hash == null)
                throw new ArgumentNullException(nameof(addUrlsAssociateUrlRequest.Hash), "Property is required for class AddUrlsAssociateUrlRequest.");

            if (addUrlsAssociateUrlRequest.HashesOption.IsSet && addUrlsAssociateUrlRequest.Hashes == null)
                throw new ArgumentNullException(nameof(addUrlsAssociateUrlRequest.Hashes), "Property is required for class AddUrlsAssociateUrlRequest.");

            if (addUrlsAssociateUrlRequest.UrlToAddOption.IsSet && addUrlsAssociateUrlRequest.UrlToAdd == null)
                throw new ArgumentNullException(nameof(addUrlsAssociateUrlRequest.UrlToAdd), "Property is required for class AddUrlsAssociateUrlRequest.");

            if (addUrlsAssociateUrlRequest.UrlsToAddOption.IsSet && addUrlsAssociateUrlRequest.UrlsToAdd == null)
                throw new ArgumentNullException(nameof(addUrlsAssociateUrlRequest.UrlsToAdd), "Property is required for class AddUrlsAssociateUrlRequest.");

            if (addUrlsAssociateUrlRequest.UrlToDeleteOption.IsSet && addUrlsAssociateUrlRequest.UrlToDelete == null)
                throw new ArgumentNullException(nameof(addUrlsAssociateUrlRequest.UrlToDelete), "Property is required for class AddUrlsAssociateUrlRequest.");

            if (addUrlsAssociateUrlRequest.UrlsToDeleteOption.IsSet && addUrlsAssociateUrlRequest.UrlsToDelete == null)
                throw new ArgumentNullException(nameof(addUrlsAssociateUrlRequest.UrlsToDelete), "Property is required for class AddUrlsAssociateUrlRequest.");

            if (addUrlsAssociateUrlRequest.FileIdOption.IsSet)
                if (addUrlsAssociateUrlRequest.FileIdOption.Value != null)
                    writer.WriteNumber("file_id", addUrlsAssociateUrlRequest.FileIdOption.Value!.Value);
                else
                    writer.WriteNull("file_id");

            if (addUrlsAssociateUrlRequest.FileIdsOption.IsSet)
            {
                writer.WritePropertyName("file_ids");
                JsonSerializer.Serialize(writer, addUrlsAssociateUrlRequest.FileIds, jsonSerializerOptions);
            }
            if (addUrlsAssociateUrlRequest.HashOption.IsSet)
                writer.WriteString("hash", addUrlsAssociateUrlRequest.Hash);

            if (addUrlsAssociateUrlRequest.HashesOption.IsSet)
            {
                writer.WritePropertyName("hashes");
                JsonSerializer.Serialize(writer, addUrlsAssociateUrlRequest.Hashes, jsonSerializerOptions);
            }
            if (addUrlsAssociateUrlRequest.UrlToAddOption.IsSet)
                writer.WriteString("url_to_add", addUrlsAssociateUrlRequest.UrlToAdd);

            if (addUrlsAssociateUrlRequest.UrlsToAddOption.IsSet)
            {
                writer.WritePropertyName("urls_to_add");
                JsonSerializer.Serialize(writer, addUrlsAssociateUrlRequest.UrlsToAdd, jsonSerializerOptions);
            }
            if (addUrlsAssociateUrlRequest.UrlToDeleteOption.IsSet)
                writer.WriteString("url_to_delete", addUrlsAssociateUrlRequest.UrlToDelete);

            if (addUrlsAssociateUrlRequest.UrlsToDeleteOption.IsSet)
            {
                writer.WritePropertyName("urls_to_delete");
                JsonSerializer.Serialize(writer, addUrlsAssociateUrlRequest.UrlsToDelete, jsonSerializerOptions);
            }
            if (addUrlsAssociateUrlRequest.NormaliseUrlsOption.IsSet)
                writer.WriteBoolean("normalise_urls", addUrlsAssociateUrlRequest.NormaliseUrlsOption.Value!.Value);
        }
    }

    /// <summary>
    /// The AddUrlsAssociateUrlRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddUrlsAssociateUrlRequest))]
    public partial class AddUrlsAssociateUrlRequestSerializationContext : JsonSerializerContext { }
}
