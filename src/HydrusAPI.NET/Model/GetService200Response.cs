// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// GetService200Response
    /// </summary>
    public partial class GetService200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetService200Response" /> class.
        /// </summary>
        /// <param name="service">service</param>
        [JsonConstructor]
        public GetService200Response(Option<GetService200ResponseService?> service = default)
        {
            ServiceOption = service;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Service
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetService200ResponseService?> ServiceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [JsonPropertyName("service")]
        public GetService200ResponseService? Service { get { return this.ServiceOption; } set { this.ServiceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetService200Response {\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetService200Response" />
    /// </summary>
    public class GetService200ResponseJsonConverter : JsonConverter<GetService200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetService200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetService200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GetService200ResponseService?> service = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "service":
                            service = new Option<GetService200ResponseService?>(JsonSerializer.Deserialize<GetService200ResponseService>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (service.IsSet && service.Value == null)
                throw new ArgumentNullException(nameof(service), "Property is not nullable for class GetService200Response.");

            return new GetService200Response(service);
        }

        /// <summary>
        /// Serializes a <see cref="GetService200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getService200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetService200Response getService200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getService200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetService200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getService200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetService200Response getService200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getService200Response.ServiceOption.IsSet && getService200Response.Service == null)
                throw new ArgumentNullException(nameof(getService200Response.Service), "Property is required for class GetService200Response.");

            if (getService200Response.ServiceOption.IsSet)
            {
                writer.WritePropertyName("service");
                JsonSerializer.Serialize(writer, getService200Response.Service, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The GetService200ResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetService200Response))]
    public partial class GetService200ResponseSerializationContext : JsonSerializerContext { }
}
