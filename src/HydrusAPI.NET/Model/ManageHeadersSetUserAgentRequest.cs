// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManageHeadersSetUserAgentRequest
    /// </summary>
    public partial class ManageHeadersSetUserAgentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManageHeadersSetUserAgentRequest" /> class.
        /// </summary>
        /// <param name="userAgent">The User-Agent string to be set. If empty, the default User-Agent will be restored.</param>
        [JsonConstructor]
        public ManageHeadersSetUserAgentRequest(Option<string?> userAgent = default)
        {
            UserAgentOption = userAgent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of UserAgent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserAgentOption { get; private set; }

        /// <summary>
        /// The User-Agent string to be set. If empty, the default User-Agent will be restored.
        /// </summary>
        /// <value>The User-Agent string to be set. If empty, the default User-Agent will be restored.</value>
        [JsonPropertyName("user-agent")]
        public string? UserAgent { get { return this.UserAgentOption; } set { this.UserAgentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManageHeadersSetUserAgentRequest {\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManageHeadersSetUserAgentRequest" />
    /// </summary>
    public class ManageHeadersSetUserAgentRequestJsonConverter : JsonConverter<ManageHeadersSetUserAgentRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManageHeadersSetUserAgentRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManageHeadersSetUserAgentRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userAgent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "user-agent":
                            userAgent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (userAgent.IsSet && userAgent.Value == null)
                throw new ArgumentNullException(nameof(userAgent), "Property is not nullable for class ManageHeadersSetUserAgentRequest.");

            return new ManageHeadersSetUserAgentRequest(userAgent);
        }

        /// <summary>
        /// Serializes a <see cref="ManageHeadersSetUserAgentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, manageHeadersSetUserAgentRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManageHeadersSetUserAgentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageHeadersSetUserAgentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManageHeadersSetUserAgentRequest manageHeadersSetUserAgentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (manageHeadersSetUserAgentRequest.UserAgentOption.IsSet && manageHeadersSetUserAgentRequest.UserAgent == null)
                throw new ArgumentNullException(nameof(manageHeadersSetUserAgentRequest.UserAgent), "Property is required for class ManageHeadersSetUserAgentRequest.");

            if (manageHeadersSetUserAgentRequest.UserAgentOption.IsSet)
                writer.WriteString("user-agent", manageHeadersSetUserAgentRequest.UserAgent);
        }
    }

    /// <summary>
    /// The ManageHeadersSetUserAgentRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManageHeadersSetUserAgentRequest))]
    public partial class ManageHeadersSetUserAgentRequestSerializationContext : JsonSerializerContext { }
}
