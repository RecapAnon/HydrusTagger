// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManageFileRelationshipsGetPotentialPairs200Response
    /// </summary>
    public partial class ManageFileRelationshipsGetPotentialPairs200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManageFileRelationshipsGetPotentialPairs200Response" /> class.
        /// </summary>
        /// <param name="potentialDuplicatePairs">A list of pairs, each containing two SHA256 hashes representing potential duplicates.</param>
        [JsonConstructor]
        public ManageFileRelationshipsGetPotentialPairs200Response(Option<List<List<string>>?> potentialDuplicatePairs = default)
        {
            PotentialDuplicatePairsOption = potentialDuplicatePairs;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PotentialDuplicatePairs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<List<string>>?> PotentialDuplicatePairsOption { get; private set; }

        /// <summary>
        /// A list of pairs, each containing two SHA256 hashes representing potential duplicates.
        /// </summary>
        /// <value>A list of pairs, each containing two SHA256 hashes representing potential duplicates.</value>
        [JsonPropertyName("potential_duplicate_pairs")]
        public List<List<string>>? PotentialDuplicatePairs { get { return this.PotentialDuplicatePairsOption; } set { this.PotentialDuplicatePairsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManageFileRelationshipsGetPotentialPairs200Response {\n");
            sb.Append("  PotentialDuplicatePairs: ").Append(PotentialDuplicatePairs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManageFileRelationshipsGetPotentialPairs200Response" />
    /// </summary>
    public class ManageFileRelationshipsGetPotentialPairs200ResponseJsonConverter : JsonConverter<ManageFileRelationshipsGetPotentialPairs200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManageFileRelationshipsGetPotentialPairs200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManageFileRelationshipsGetPotentialPairs200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<List<string>>?> potentialDuplicatePairs = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "potential_duplicate_pairs":
                            potentialDuplicatePairs = new Option<List<List<string>>?>(JsonSerializer.Deserialize<List<List<string>>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (potentialDuplicatePairs.IsSet && potentialDuplicatePairs.Value == null)
                throw new ArgumentNullException(nameof(potentialDuplicatePairs), "Property is not nullable for class ManageFileRelationshipsGetPotentialPairs200Response.");

            return new ManageFileRelationshipsGetPotentialPairs200Response(potentialDuplicatePairs);
        }

        /// <summary>
        /// Serializes a <see cref="ManageFileRelationshipsGetPotentialPairs200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageFileRelationshipsGetPotentialPairs200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManageFileRelationshipsGetPotentialPairs200Response manageFileRelationshipsGetPotentialPairs200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, manageFileRelationshipsGetPotentialPairs200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManageFileRelationshipsGetPotentialPairs200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageFileRelationshipsGetPotentialPairs200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManageFileRelationshipsGetPotentialPairs200Response manageFileRelationshipsGetPotentialPairs200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (manageFileRelationshipsGetPotentialPairs200Response.PotentialDuplicatePairsOption.IsSet && manageFileRelationshipsGetPotentialPairs200Response.PotentialDuplicatePairs == null)
                throw new ArgumentNullException(nameof(manageFileRelationshipsGetPotentialPairs200Response.PotentialDuplicatePairs), "Property is required for class ManageFileRelationshipsGetPotentialPairs200Response.");

            if (manageFileRelationshipsGetPotentialPairs200Response.PotentialDuplicatePairsOption.IsSet)
            {
                writer.WritePropertyName("potential_duplicate_pairs");
                JsonSerializer.Serialize(writer, manageFileRelationshipsGetPotentialPairs200Response.PotentialDuplicatePairs, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The ManageFileRelationshipsGetPotentialPairs200ResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManageFileRelationshipsGetPotentialPairs200Response))]
    public partial class ManageFileRelationshipsGetPotentialPairs200ResponseSerializationContext : JsonSerializerContext { }
}
