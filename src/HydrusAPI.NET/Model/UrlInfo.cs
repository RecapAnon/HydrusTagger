// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// UrlInfo
    /// </summary>
    public partial class UrlInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlInfo" /> class.
        /// </summary>
        /// <param name="requestUrl">The URL used for server requests, potentially including ephemeral tokens or redirect paths.</param>
        /// <param name="normalisedUrl">The normalized version of the URL used for comparison and storage.</param>
        /// <param name="urlType">The type of URL, as determined by the client.</param>
        /// <param name="urlTypeString">A human-readable string describing the URL type.</param>
        /// <param name="matchName">The name of the matching URL class, if one exists.</param>
        /// <param name="canParse">Whether the client can parse the URL into meaningful content.</param>
        [JsonConstructor]
        public UrlInfo(Option<string?> requestUrl = default, Option<string?> normalisedUrl = default, Option<UrlTypeEnum?> urlType = default, Option<string?> urlTypeString = default, Option<string?> matchName = default, Option<bool?> canParse = default)
        {
            RequestUrlOption = requestUrl;
            NormalisedUrlOption = normalisedUrl;
            UrlTypeOption = urlType;
            UrlTypeStringOption = urlTypeString;
            MatchNameOption = matchName;
            CanParseOption = canParse;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of URL, as determined by the client.
        /// </summary>
        /// <value>The type of URL, as determined by the client.</value>
        public enum UrlTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5
        }

        /// <summary>
        /// Returns a <see cref="UrlTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static UrlTypeEnum UrlTypeEnumFromString(string value)
        {
            if (value.Equals((0).ToString()))
                return UrlTypeEnum.NUMBER_0;

            if (value.Equals((2).ToString()))
                return UrlTypeEnum.NUMBER_2;

            if (value.Equals((3).ToString()))
                return UrlTypeEnum.NUMBER_3;

            if (value.Equals((4).ToString()))
                return UrlTypeEnum.NUMBER_4;

            if (value.Equals((5).ToString()))
                return UrlTypeEnum.NUMBER_5;

            throw new NotImplementedException($"Could not convert value to type UrlTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="UrlTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UrlTypeEnum? UrlTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return UrlTypeEnum.NUMBER_0;

            if (value.Equals((2).ToString()))
                return UrlTypeEnum.NUMBER_2;

            if (value.Equals((3).ToString()))
                return UrlTypeEnum.NUMBER_3;

            if (value.Equals((4).ToString()))
                return UrlTypeEnum.NUMBER_4;

            if (value.Equals((5).ToString()))
                return UrlTypeEnum.NUMBER_5;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UrlTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static int UrlTypeEnumToJsonValue(UrlTypeEnum value)
        {
            return (int) value;
        }

        /// <summary>
        /// Used to track the state of UrlType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UrlTypeEnum?> UrlTypeOption { get; private set; }

        /// <summary>
        /// The type of URL, as determined by the client.
        /// </summary>
        /// <value>The type of URL, as determined by the client.</value>
        [JsonPropertyName("url_type")]
        public UrlTypeEnum? UrlType { get { return this.UrlTypeOption; } set { this.UrlTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequestUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RequestUrlOption { get; private set; }

        /// <summary>
        /// The URL used for server requests, potentially including ephemeral tokens or redirect paths.
        /// </summary>
        /// <value>The URL used for server requests, potentially including ephemeral tokens or redirect paths.</value>
        [JsonPropertyName("request_url")]
        public string? RequestUrl { get { return this.RequestUrlOption; } set { this.RequestUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of NormalisedUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NormalisedUrlOption { get; private set; }

        /// <summary>
        /// The normalized version of the URL used for comparison and storage.
        /// </summary>
        /// <value>The normalized version of the URL used for comparison and storage.</value>
        [JsonPropertyName("normalised_url")]
        public string? NormalisedUrl { get { return this.NormalisedUrlOption; } set { this.NormalisedUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of UrlTypeString
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlTypeStringOption { get; private set; }

        /// <summary>
        /// A human-readable string describing the URL type.
        /// </summary>
        /// <value>A human-readable string describing the URL type.</value>
        [JsonPropertyName("url_type_string")]
        public string? UrlTypeString { get { return this.UrlTypeStringOption; } set { this.UrlTypeStringOption = new(value); } }

        /// <summary>
        /// Used to track the state of MatchName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MatchNameOption { get; private set; }

        /// <summary>
        /// The name of the matching URL class, if one exists.
        /// </summary>
        /// <value>The name of the matching URL class, if one exists.</value>
        [JsonPropertyName("match_name")]
        public string? MatchName { get { return this.MatchNameOption; } set { this.MatchNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CanParse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CanParseOption { get; private set; }

        /// <summary>
        /// Whether the client can parse the URL into meaningful content.
        /// </summary>
        /// <value>Whether the client can parse the URL into meaningful content.</value>
        [JsonPropertyName("can_parse")]
        public bool? CanParse { get { return this.CanParseOption; } set { this.CanParseOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UrlInfo {\n");
            sb.Append("  RequestUrl: ").Append(RequestUrl).Append("\n");
            sb.Append("  NormalisedUrl: ").Append(NormalisedUrl).Append("\n");
            sb.Append("  UrlType: ").Append(UrlType).Append("\n");
            sb.Append("  UrlTypeString: ").Append(UrlTypeString).Append("\n");
            sb.Append("  MatchName: ").Append(MatchName).Append("\n");
            sb.Append("  CanParse: ").Append(CanParse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UrlInfo" />
    /// </summary>
    public class UrlInfoJsonConverter : JsonConverter<UrlInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="UrlInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UrlInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> requestUrl = default;
            Option<string?> normalisedUrl = default;
            Option<UrlInfo.UrlTypeEnum?> urlType = default;
            Option<string?> urlTypeString = default;
            Option<string?> matchName = default;
            Option<bool?> canParse = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "request_url":
                            requestUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "normalised_url":
                            normalisedUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url_type":
                            urlType = new Option<UrlInfo.UrlTypeEnum?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (UrlInfo.UrlTypeEnum?)null : (UrlInfo.UrlTypeEnum)utf8JsonReader.GetInt32());
                            break;
                        case "url_type_string":
                            urlTypeString = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "match_name":
                            matchName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "can_parse":
                            canParse = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (requestUrl.IsSet && requestUrl.Value == null)
                throw new ArgumentNullException(nameof(requestUrl), "Property is not nullable for class UrlInfo.");

            if (normalisedUrl.IsSet && normalisedUrl.Value == null)
                throw new ArgumentNullException(nameof(normalisedUrl), "Property is not nullable for class UrlInfo.");

            if (urlType.IsSet && urlType.Value == null)
                throw new ArgumentNullException(nameof(urlType), "Property is not nullable for class UrlInfo.");

            if (urlTypeString.IsSet && urlTypeString.Value == null)
                throw new ArgumentNullException(nameof(urlTypeString), "Property is not nullable for class UrlInfo.");

            if (matchName.IsSet && matchName.Value == null)
                throw new ArgumentNullException(nameof(matchName), "Property is not nullable for class UrlInfo.");

            if (canParse.IsSet && canParse.Value == null)
                throw new ArgumentNullException(nameof(canParse), "Property is not nullable for class UrlInfo.");

            return new UrlInfo(requestUrl, normalisedUrl, urlType, urlTypeString, matchName, canParse);
        }

        /// <summary>
        /// Serializes a <see cref="UrlInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="urlInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UrlInfo urlInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, urlInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UrlInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="urlInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UrlInfo urlInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (urlInfo.RequestUrlOption.IsSet && urlInfo.RequestUrl == null)
                throw new ArgumentNullException(nameof(urlInfo.RequestUrl), "Property is required for class UrlInfo.");

            if (urlInfo.NormalisedUrlOption.IsSet && urlInfo.NormalisedUrl == null)
                throw new ArgumentNullException(nameof(urlInfo.NormalisedUrl), "Property is required for class UrlInfo.");

            if (urlInfo.UrlTypeStringOption.IsSet && urlInfo.UrlTypeString == null)
                throw new ArgumentNullException(nameof(urlInfo.UrlTypeString), "Property is required for class UrlInfo.");

            if (urlInfo.MatchNameOption.IsSet && urlInfo.MatchName == null)
                throw new ArgumentNullException(nameof(urlInfo.MatchName), "Property is required for class UrlInfo.");

            if (urlInfo.RequestUrlOption.IsSet)
                writer.WriteString("request_url", urlInfo.RequestUrl);

            if (urlInfo.NormalisedUrlOption.IsSet)
                writer.WriteString("normalised_url", urlInfo.NormalisedUrl);

            if (urlInfo.UrlTypeOption.IsSet)
                writer.WriteNumber("url_type", UrlInfo.UrlTypeEnumToJsonValue(urlInfo.UrlTypeOption.Value!.Value));

            if (urlInfo.UrlTypeStringOption.IsSet)
                writer.WriteString("url_type_string", urlInfo.UrlTypeString);

            if (urlInfo.MatchNameOption.IsSet)
                writer.WriteString("match_name", urlInfo.MatchName);

            if (urlInfo.CanParseOption.IsSet)
                writer.WriteBoolean("can_parse", urlInfo.CanParseOption.Value!.Value);
        }
    }

    /// <summary>
    /// The UrlInfoSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(UrlInfo))]
    public partial class UrlInfoSerializationContext : JsonSerializerContext { }
}
