// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManageServicesGetPendingCounts200ResponsePendingCountsValue
    /// </summary>
    public partial class ManageServicesGetPendingCounts200ResponsePendingCountsValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManageServicesGetPendingCounts200ResponsePendingCountsValue" /> class.
        /// </summary>
        /// <param name="pendingTagMappings">Count of pending tag mappings.</param>
        /// <param name="petitionedTagMappings">Count of petitioned tag mappings.</param>
        /// <param name="pendingTagSiblings">Count of pending tag siblings.</param>
        /// <param name="petitionedTagSiblings">Count of petitioned tag siblings.</param>
        /// <param name="pendingTagParents">Count of pending tag parents.</param>
        /// <param name="petitionedTagParents">Count of petitioned tag parents.</param>
        /// <param name="pendingFiles">Count of pending files.</param>
        /// <param name="petitionedFiles">Count of petitioned files.</param>
        [JsonConstructor]
        public ManageServicesGetPendingCounts200ResponsePendingCountsValue(int pendingTagMappings, int petitionedTagMappings, int pendingTagSiblings, int petitionedTagSiblings, int pendingTagParents, int petitionedTagParents, Option<int?> pendingFiles = default, Option<int?> petitionedFiles = default)
        {
            PendingTagMappings = pendingTagMappings;
            PetitionedTagMappings = petitionedTagMappings;
            PendingTagSiblings = pendingTagSiblings;
            PetitionedTagSiblings = petitionedTagSiblings;
            PendingTagParents = pendingTagParents;
            PetitionedTagParents = petitionedTagParents;
            PendingFilesOption = pendingFiles;
            PetitionedFilesOption = petitionedFiles;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Count of pending tag mappings.
        /// </summary>
        /// <value>Count of pending tag mappings.</value>
        [JsonPropertyName("pending_tag_mappings")]
        public int PendingTagMappings { get; set; }

        /// <summary>
        /// Count of petitioned tag mappings.
        /// </summary>
        /// <value>Count of petitioned tag mappings.</value>
        [JsonPropertyName("petitioned_tag_mappings")]
        public int PetitionedTagMappings { get; set; }

        /// <summary>
        /// Count of pending tag siblings.
        /// </summary>
        /// <value>Count of pending tag siblings.</value>
        [JsonPropertyName("pending_tag_siblings")]
        public int PendingTagSiblings { get; set; }

        /// <summary>
        /// Count of petitioned tag siblings.
        /// </summary>
        /// <value>Count of petitioned tag siblings.</value>
        [JsonPropertyName("petitioned_tag_siblings")]
        public int PetitionedTagSiblings { get; set; }

        /// <summary>
        /// Count of pending tag parents.
        /// </summary>
        /// <value>Count of pending tag parents.</value>
        [JsonPropertyName("pending_tag_parents")]
        public int PendingTagParents { get; set; }

        /// <summary>
        /// Count of petitioned tag parents.
        /// </summary>
        /// <value>Count of petitioned tag parents.</value>
        [JsonPropertyName("petitioned_tag_parents")]
        public int PetitionedTagParents { get; set; }

        /// <summary>
        /// Used to track the state of PendingFiles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PendingFilesOption { get; private set; }

        /// <summary>
        /// Count of pending files.
        /// </summary>
        /// <value>Count of pending files.</value>
        [JsonPropertyName("pending_files")]
        public int? PendingFiles { get { return this.PendingFilesOption; } set { this.PendingFilesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PetitionedFiles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PetitionedFilesOption { get; private set; }

        /// <summary>
        /// Count of petitioned files.
        /// </summary>
        /// <value>Count of petitioned files.</value>
        [JsonPropertyName("petitioned_files")]
        public int? PetitionedFiles { get { return this.PetitionedFilesOption; } set { this.PetitionedFilesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManageServicesGetPendingCounts200ResponsePendingCountsValue {\n");
            sb.Append("  PendingTagMappings: ").Append(PendingTagMappings).Append("\n");
            sb.Append("  PetitionedTagMappings: ").Append(PetitionedTagMappings).Append("\n");
            sb.Append("  PendingTagSiblings: ").Append(PendingTagSiblings).Append("\n");
            sb.Append("  PetitionedTagSiblings: ").Append(PetitionedTagSiblings).Append("\n");
            sb.Append("  PendingTagParents: ").Append(PendingTagParents).Append("\n");
            sb.Append("  PetitionedTagParents: ").Append(PetitionedTagParents).Append("\n");
            sb.Append("  PendingFiles: ").Append(PendingFiles).Append("\n");
            sb.Append("  PetitionedFiles: ").Append(PetitionedFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManageServicesGetPendingCounts200ResponsePendingCountsValue" />
    /// </summary>
    public class ManageServicesGetPendingCounts200ResponsePendingCountsValueJsonConverter : JsonConverter<ManageServicesGetPendingCounts200ResponsePendingCountsValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManageServicesGetPendingCounts200ResponsePendingCountsValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManageServicesGetPendingCounts200ResponsePendingCountsValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> pendingTagMappings = default;
            Option<int?> petitionedTagMappings = default;
            Option<int?> pendingTagSiblings = default;
            Option<int?> petitionedTagSiblings = default;
            Option<int?> pendingTagParents = default;
            Option<int?> petitionedTagParents = default;
            Option<int?> pendingFiles = default;
            Option<int?> petitionedFiles = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "pending_tag_mappings":
                            pendingTagMappings = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "petitioned_tag_mappings":
                            petitionedTagMappings = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pending_tag_siblings":
                            pendingTagSiblings = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "petitioned_tag_siblings":
                            petitionedTagSiblings = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pending_tag_parents":
                            pendingTagParents = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "petitioned_tag_parents":
                            petitionedTagParents = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pending_files":
                            pendingFiles = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "petitioned_files":
                            petitionedFiles = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!pendingTagMappings.IsSet)
                throw new ArgumentException("Property is required for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.", nameof(pendingTagMappings));

            if (!petitionedTagMappings.IsSet)
                throw new ArgumentException("Property is required for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.", nameof(petitionedTagMappings));

            if (!pendingTagSiblings.IsSet)
                throw new ArgumentException("Property is required for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.", nameof(pendingTagSiblings));

            if (!petitionedTagSiblings.IsSet)
                throw new ArgumentException("Property is required for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.", nameof(petitionedTagSiblings));

            if (!pendingTagParents.IsSet)
                throw new ArgumentException("Property is required for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.", nameof(pendingTagParents));

            if (!petitionedTagParents.IsSet)
                throw new ArgumentException("Property is required for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.", nameof(petitionedTagParents));

            if (pendingTagMappings.IsSet && pendingTagMappings.Value == null)
                throw new ArgumentNullException(nameof(pendingTagMappings), "Property is not nullable for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.");

            if (petitionedTagMappings.IsSet && petitionedTagMappings.Value == null)
                throw new ArgumentNullException(nameof(petitionedTagMappings), "Property is not nullable for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.");

            if (pendingTagSiblings.IsSet && pendingTagSiblings.Value == null)
                throw new ArgumentNullException(nameof(pendingTagSiblings), "Property is not nullable for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.");

            if (petitionedTagSiblings.IsSet && petitionedTagSiblings.Value == null)
                throw new ArgumentNullException(nameof(petitionedTagSiblings), "Property is not nullable for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.");

            if (pendingTagParents.IsSet && pendingTagParents.Value == null)
                throw new ArgumentNullException(nameof(pendingTagParents), "Property is not nullable for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.");

            if (petitionedTagParents.IsSet && petitionedTagParents.Value == null)
                throw new ArgumentNullException(nameof(petitionedTagParents), "Property is not nullable for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.");

            if (pendingFiles.IsSet && pendingFiles.Value == null)
                throw new ArgumentNullException(nameof(pendingFiles), "Property is not nullable for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.");

            if (petitionedFiles.IsSet && petitionedFiles.Value == null)
                throw new ArgumentNullException(nameof(petitionedFiles), "Property is not nullable for class ManageServicesGetPendingCounts200ResponsePendingCountsValue.");

            return new ManageServicesGetPendingCounts200ResponsePendingCountsValue(pendingTagMappings.Value!.Value!, petitionedTagMappings.Value!.Value!, pendingTagSiblings.Value!.Value!, petitionedTagSiblings.Value!.Value!, pendingTagParents.Value!.Value!, petitionedTagParents.Value!.Value!, pendingFiles, petitionedFiles);
        }

        /// <summary>
        /// Serializes a <see cref="ManageServicesGetPendingCounts200ResponsePendingCountsValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageServicesGetPendingCounts200ResponsePendingCountsValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManageServicesGetPendingCounts200ResponsePendingCountsValue manageServicesGetPendingCounts200ResponsePendingCountsValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, manageServicesGetPendingCounts200ResponsePendingCountsValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManageServicesGetPendingCounts200ResponsePendingCountsValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageServicesGetPendingCounts200ResponsePendingCountsValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManageServicesGetPendingCounts200ResponsePendingCountsValue manageServicesGetPendingCounts200ResponsePendingCountsValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("pending_tag_mappings", manageServicesGetPendingCounts200ResponsePendingCountsValue.PendingTagMappings);

            writer.WriteNumber("petitioned_tag_mappings", manageServicesGetPendingCounts200ResponsePendingCountsValue.PetitionedTagMappings);

            writer.WriteNumber("pending_tag_siblings", manageServicesGetPendingCounts200ResponsePendingCountsValue.PendingTagSiblings);

            writer.WriteNumber("petitioned_tag_siblings", manageServicesGetPendingCounts200ResponsePendingCountsValue.PetitionedTagSiblings);

            writer.WriteNumber("pending_tag_parents", manageServicesGetPendingCounts200ResponsePendingCountsValue.PendingTagParents);

            writer.WriteNumber("petitioned_tag_parents", manageServicesGetPendingCounts200ResponsePendingCountsValue.PetitionedTagParents);

            if (manageServicesGetPendingCounts200ResponsePendingCountsValue.PendingFilesOption.IsSet)
                writer.WriteNumber("pending_files", manageServicesGetPendingCounts200ResponsePendingCountsValue.PendingFilesOption.Value!.Value);

            if (manageServicesGetPendingCounts200ResponsePendingCountsValue.PetitionedFilesOption.IsSet)
                writer.WriteNumber("petitioned_files", manageServicesGetPendingCounts200ResponsePendingCountsValue.PetitionedFilesOption.Value!.Value);
        }
    }

    /// <summary>
    /// The ManageServicesGetPendingCounts200ResponsePendingCountsValueSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManageServicesGetPendingCounts200ResponsePendingCountsValue))]
    public partial class ManageServicesGetPendingCounts200ResponsePendingCountsValueSerializationContext : JsonSerializerContext { }
}
