// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// A request to archive files. Can specify files via file_id, file_ids, hash, or hashes.
    /// </summary>
    public partial class ArchiveFilesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArchiveFilesRequest" /> class.
        /// </summary>
        /// <param name="fileId">Numerical file ID.</param>
        /// <param name="fileIds">List of numerical file IDs.</param>
        /// <param name="hash">SHA256 hash of the file.</param>
        /// <param name="hashes">List of SHA256 hashes.</param>
        [JsonConstructor]
        public ArchiveFilesRequest(Option<int?> fileId = default, Option<List<int>?> fileIds = default, Option<string?> hash = default, Option<List<string>?> hashes = default)
        {
            FileIdOption = fileId;
            FileIdsOption = fileIds;
            HashOption = hash;
            HashesOption = hashes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileIdOption { get; private set; }

        /// <summary>
        /// Numerical file ID.
        /// </summary>
        /// <value>Numerical file ID.</value>
        [JsonPropertyName("file_id")]
        public int? FileId { get { return this.FileIdOption; } set { this.FileIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> FileIdsOption { get; private set; }

        /// <summary>
        /// List of numerical file IDs.
        /// </summary>
        /// <value>List of numerical file IDs.</value>
        [JsonPropertyName("file_ids")]
        public List<int>? FileIds { get { return this.FileIdsOption; } set { this.FileIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// SHA256 hash of the file.
        /// </summary>
        /// <value>SHA256 hash of the file.</value>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hashes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> HashesOption { get; private set; }

        /// <summary>
        /// List of SHA256 hashes.
        /// </summary>
        /// <value>List of SHA256 hashes.</value>
        [JsonPropertyName("hashes")]
        public List<string>? Hashes { get { return this.HashesOption; } set { this.HashesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ArchiveFilesRequest {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Hashes: ").Append(Hashes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ArchiveFilesRequest" />
    /// </summary>
    public class ArchiveFilesRequestJsonConverter : JsonConverter<ArchiveFilesRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ArchiveFilesRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ArchiveFilesRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> fileId = default;
            Option<List<int>?> fileIds = default;
            Option<string?> hash = default;
            Option<List<string>?> hashes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "file_id":
                            fileId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_ids":
                            fileIds = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hashes":
                            hashes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fileId.IsSet && fileId.Value == null)
                throw new ArgumentNullException(nameof(fileId), "Property is not nullable for class ArchiveFilesRequest.");

            if (fileIds.IsSet && fileIds.Value == null)
                throw new ArgumentNullException(nameof(fileIds), "Property is not nullable for class ArchiveFilesRequest.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class ArchiveFilesRequest.");

            if (hashes.IsSet && hashes.Value == null)
                throw new ArgumentNullException(nameof(hashes), "Property is not nullable for class ArchiveFilesRequest.");

            return new ArchiveFilesRequest(fileId, fileIds, hash, hashes);
        }

        /// <summary>
        /// Serializes a <see cref="ArchiveFilesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="archiveFilesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ArchiveFilesRequest archiveFilesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, archiveFilesRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ArchiveFilesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="archiveFilesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ArchiveFilesRequest archiveFilesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (archiveFilesRequest.FileIdsOption.IsSet && archiveFilesRequest.FileIds == null)
                throw new ArgumentNullException(nameof(archiveFilesRequest.FileIds), "Property is required for class ArchiveFilesRequest.");

            if (archiveFilesRequest.HashOption.IsSet && archiveFilesRequest.Hash == null)
                throw new ArgumentNullException(nameof(archiveFilesRequest.Hash), "Property is required for class ArchiveFilesRequest.");

            if (archiveFilesRequest.HashesOption.IsSet && archiveFilesRequest.Hashes == null)
                throw new ArgumentNullException(nameof(archiveFilesRequest.Hashes), "Property is required for class ArchiveFilesRequest.");

            if (archiveFilesRequest.FileIdOption.IsSet)
                writer.WriteNumber("file_id", archiveFilesRequest.FileIdOption.Value!.Value);

            if (archiveFilesRequest.FileIdsOption.IsSet)
            {
                writer.WritePropertyName("file_ids");
                JsonSerializer.Serialize(writer, archiveFilesRequest.FileIds, jsonSerializerOptions);
            }
            if (archiveFilesRequest.HashOption.IsSet)
                writer.WriteString("hash", archiveFilesRequest.Hash);

            if (archiveFilesRequest.HashesOption.IsSet)
            {
                writer.WritePropertyName("hashes");
                JsonSerializer.Serialize(writer, archiveFilesRequest.Hashes, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The ArchiveFilesRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ArchiveFilesRequest))]
    public partial class ArchiveFilesRequestSerializationContext : JsonSerializerContext { }
}
