// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// PageInfoResponsePageInfo
    /// </summary>
    public partial class PageInfoResponsePageInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageInfoResponsePageInfo" /> class.
        /// </summary>
        /// <param name="name">Name of the page.</param>
        /// <param name="pageKey">Hexadecimal identifier of the page.</param>
        /// <param name="pageState">Current state of the page.</param>
        /// <param name="pageType">Type of the page.</param>
        /// <param name="isMediaPage">Whether the page is a media page.</param>
        /// <param name="management">management</param>
        [JsonConstructor]
        public PageInfoResponsePageInfo(string name, string pageKey, int pageState, int pageType, bool isMediaPage, PageInfoResponsePageInfoManagement management)
        {
            Name = name;
            PageKey = pageKey;
            PageState = pageState;
            PageType = pageType;
            IsMediaPage = isMediaPage;
            Management = management;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the page.
        /// </summary>
        /// <value>Name of the page.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Hexadecimal identifier of the page.
        /// </summary>
        /// <value>Hexadecimal identifier of the page.</value>
        [JsonPropertyName("page_key")]
        public string PageKey { get; set; }

        /// <summary>
        /// Current state of the page.
        /// </summary>
        /// <value>Current state of the page.</value>
        [JsonPropertyName("page_state")]
        public int PageState { get; set; }

        /// <summary>
        /// Type of the page.
        /// </summary>
        /// <value>Type of the page.</value>
        [JsonPropertyName("page_type")]
        public int PageType { get; set; }

        /// <summary>
        /// Whether the page is a media page.
        /// </summary>
        /// <value>Whether the page is a media page.</value>
        [JsonPropertyName("is_media_page")]
        public bool IsMediaPage { get; set; }

        /// <summary>
        /// Gets or Sets Management
        /// </summary>
        [JsonPropertyName("management")]
        public PageInfoResponsePageInfoManagement Management { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageInfoResponsePageInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PageKey: ").Append(PageKey).Append("\n");
            sb.Append("  PageState: ").Append(PageState).Append("\n");
            sb.Append("  PageType: ").Append(PageType).Append("\n");
            sb.Append("  IsMediaPage: ").Append(IsMediaPage).Append("\n");
            sb.Append("  Management: ").Append(Management).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PageInfoResponsePageInfo" />
    /// </summary>
    public class PageInfoResponsePageInfoJsonConverter : JsonConverter<PageInfoResponsePageInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="PageInfoResponsePageInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PageInfoResponsePageInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> pageKey = default;
            Option<int?> pageState = default;
            Option<int?> pageType = default;
            Option<bool?> isMediaPage = default;
            Option<PageInfoResponsePageInfoManagement?> management = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "page_key":
                            pageKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "page_state":
                            pageState = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "page_type":
                            pageType = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_media_page":
                            isMediaPage = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "management":
                            management = new Option<PageInfoResponsePageInfoManagement?>(JsonSerializer.Deserialize<PageInfoResponsePageInfoManagement>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class PageInfoResponsePageInfo.", nameof(name));

            if (!pageKey.IsSet)
                throw new ArgumentException("Property is required for class PageInfoResponsePageInfo.", nameof(pageKey));

            if (!pageState.IsSet)
                throw new ArgumentException("Property is required for class PageInfoResponsePageInfo.", nameof(pageState));

            if (!pageType.IsSet)
                throw new ArgumentException("Property is required for class PageInfoResponsePageInfo.", nameof(pageType));

            if (!isMediaPage.IsSet)
                throw new ArgumentException("Property is required for class PageInfoResponsePageInfo.", nameof(isMediaPage));

            if (!management.IsSet)
                throw new ArgumentException("Property is required for class PageInfoResponsePageInfo.", nameof(management));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PageInfoResponsePageInfo.");

            if (pageKey.IsSet && pageKey.Value == null)
                throw new ArgumentNullException(nameof(pageKey), "Property is not nullable for class PageInfoResponsePageInfo.");

            if (pageState.IsSet && pageState.Value == null)
                throw new ArgumentNullException(nameof(pageState), "Property is not nullable for class PageInfoResponsePageInfo.");

            if (pageType.IsSet && pageType.Value == null)
                throw new ArgumentNullException(nameof(pageType), "Property is not nullable for class PageInfoResponsePageInfo.");

            if (isMediaPage.IsSet && isMediaPage.Value == null)
                throw new ArgumentNullException(nameof(isMediaPage), "Property is not nullable for class PageInfoResponsePageInfo.");

            if (management.IsSet && management.Value == null)
                throw new ArgumentNullException(nameof(management), "Property is not nullable for class PageInfoResponsePageInfo.");

            return new PageInfoResponsePageInfo(name.Value!, pageKey.Value!, pageState.Value!.Value!, pageType.Value!.Value!, isMediaPage.Value!.Value!, management.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PageInfoResponsePageInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageInfoResponsePageInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PageInfoResponsePageInfo pageInfoResponsePageInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pageInfoResponsePageInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PageInfoResponsePageInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageInfoResponsePageInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PageInfoResponsePageInfo pageInfoResponsePageInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pageInfoResponsePageInfo.Name == null)
                throw new ArgumentNullException(nameof(pageInfoResponsePageInfo.Name), "Property is required for class PageInfoResponsePageInfo.");

            if (pageInfoResponsePageInfo.PageKey == null)
                throw new ArgumentNullException(nameof(pageInfoResponsePageInfo.PageKey), "Property is required for class PageInfoResponsePageInfo.");

            if (pageInfoResponsePageInfo.Management == null)
                throw new ArgumentNullException(nameof(pageInfoResponsePageInfo.Management), "Property is required for class PageInfoResponsePageInfo.");

            writer.WriteString("name", pageInfoResponsePageInfo.Name);

            writer.WriteString("page_key", pageInfoResponsePageInfo.PageKey);

            writer.WriteNumber("page_state", pageInfoResponsePageInfo.PageState);

            writer.WriteNumber("page_type", pageInfoResponsePageInfo.PageType);

            writer.WriteBoolean("is_media_page", pageInfoResponsePageInfo.IsMediaPage);

            writer.WritePropertyName("management");
            JsonSerializer.Serialize(writer, pageInfoResponsePageInfo.Management, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The PageInfoResponsePageInfoSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PageInfoResponsePageInfo))]
    public partial class PageInfoResponsePageInfoSerializationContext : JsonSerializerContext { }
}
