// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// AddUrlsAddUrlRequest
    /// </summary>
    public partial class AddUrlsAddUrlRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddUrlsAddUrlRequest" /> class.
        /// </summary>
        /// <param name="url">The URL to import.</param>
        /// <param name="destinationPageKey">Optional page key to specify where the URL should be added.</param>
        /// <param name="destinationPageName">Optional page name to specify where the URL should be added. If not found, a new page will be created.</param>
        /// <param name="fileServiceKey">Optional file service key to specify where the file should be imported.</param>
        /// <param name="fileServiceKeys">Optional list of file service keys to specify where the file should be imported.</param>
        /// <param name="deletedFileServiceKey">Optional deleted file service key to specify a deleted domain.</param>
        /// <param name="deletedFileServiceKeys">Optional list of deleted file service keys to specify deleted domains.</param>
        /// <param name="showDestinationPage">Whether to switch to the destination page after adding the URL. (default to false)</param>
        /// <param name="serviceKeysToAdditionalTags">Tags to be added to the imported file, mapped by service key.</param>
        /// <param name="filterableTags">Tags to be filtered and processed by the tag import options.</param>
        [JsonConstructor]
        public AddUrlsAddUrlRequest(Option<string?> url = default, Option<string?> destinationPageKey = default, Option<string?> destinationPageName = default, Option<string?> fileServiceKey = default, Option<List<string>?> fileServiceKeys = default, Option<string?> deletedFileServiceKey = default, Option<List<string>?> deletedFileServiceKeys = default, Option<bool?> showDestinationPage = default, Option<Dictionary<string, List<string>>?> serviceKeysToAdditionalTags = default, Option<List<string>?> filterableTags = default)
        {
            UrlOption = url;
            DestinationPageKeyOption = destinationPageKey;
            DestinationPageNameOption = destinationPageName;
            FileServiceKeyOption = fileServiceKey;
            FileServiceKeysOption = fileServiceKeys;
            DeletedFileServiceKeyOption = deletedFileServiceKey;
            DeletedFileServiceKeysOption = deletedFileServiceKeys;
            ShowDestinationPageOption = showDestinationPage;
            ServiceKeysToAdditionalTagsOption = serviceKeysToAdditionalTags;
            FilterableTagsOption = filterableTags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// The URL to import.
        /// </summary>
        /// <value>The URL to import.</value>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationPageKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationPageKeyOption { get; private set; }

        /// <summary>
        /// Optional page key to specify where the URL should be added.
        /// </summary>
        /// <value>Optional page key to specify where the URL should be added.</value>
        [JsonPropertyName("destination_page_key")]
        public string? DestinationPageKey { get { return this.DestinationPageKeyOption; } set { this.DestinationPageKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationPageName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationPageNameOption { get; private set; }

        /// <summary>
        /// Optional page name to specify where the URL should be added. If not found, a new page will be created.
        /// </summary>
        /// <value>Optional page name to specify where the URL should be added. If not found, a new page will be created.</value>
        [JsonPropertyName("destination_page_name")]
        public string? DestinationPageName { get { return this.DestinationPageNameOption; } set { this.DestinationPageNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileServiceKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileServiceKeyOption { get; private set; }

        /// <summary>
        /// Optional file service key to specify where the file should be imported.
        /// </summary>
        /// <value>Optional file service key to specify where the file should be imported.</value>
        [JsonPropertyName("file_service_key")]
        public string? FileServiceKey { get { return this.FileServiceKeyOption; } set { this.FileServiceKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileServiceKeys
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> FileServiceKeysOption { get; private set; }

        /// <summary>
        /// Optional list of file service keys to specify where the file should be imported.
        /// </summary>
        /// <value>Optional list of file service keys to specify where the file should be imported.</value>
        [JsonPropertyName("file_service_keys")]
        public List<string>? FileServiceKeys { get { return this.FileServiceKeysOption; } set { this.FileServiceKeysOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeletedFileServiceKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeletedFileServiceKeyOption { get; private set; }

        /// <summary>
        /// Optional deleted file service key to specify a deleted domain.
        /// </summary>
        /// <value>Optional deleted file service key to specify a deleted domain.</value>
        [JsonPropertyName("deleted_file_service_key")]
        public string? DeletedFileServiceKey { get { return this.DeletedFileServiceKeyOption; } set { this.DeletedFileServiceKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeletedFileServiceKeys
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> DeletedFileServiceKeysOption { get; private set; }

        /// <summary>
        /// Optional list of deleted file service keys to specify deleted domains.
        /// </summary>
        /// <value>Optional list of deleted file service keys to specify deleted domains.</value>
        [JsonPropertyName("deleted_file_service_keys")]
        public List<string>? DeletedFileServiceKeys { get { return this.DeletedFileServiceKeysOption; } set { this.DeletedFileServiceKeysOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShowDestinationPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowDestinationPageOption { get; private set; }

        /// <summary>
        /// Whether to switch to the destination page after adding the URL.
        /// </summary>
        /// <value>Whether to switch to the destination page after adding the URL.</value>
        [JsonPropertyName("show_destination_page")]
        public bool? ShowDestinationPage { get { return this.ShowDestinationPageOption; } set { this.ShowDestinationPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceKeysToAdditionalTags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, List<string>>?> ServiceKeysToAdditionalTagsOption { get; private set; }

        /// <summary>
        /// Tags to be added to the imported file, mapped by service key.
        /// </summary>
        /// <value>Tags to be added to the imported file, mapped by service key.</value>
        [JsonPropertyName("service_keys_to_additional_tags")]
        public Dictionary<string, List<string>>? ServiceKeysToAdditionalTags { get { return this.ServiceKeysToAdditionalTagsOption; } set { this.ServiceKeysToAdditionalTagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of FilterableTags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> FilterableTagsOption { get; private set; }

        /// <summary>
        /// Tags to be filtered and processed by the tag import options.
        /// </summary>
        /// <value>Tags to be filtered and processed by the tag import options.</value>
        [JsonPropertyName("filterable_tags")]
        public List<string>? FilterableTags { get { return this.FilterableTagsOption; } set { this.FilterableTagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddUrlsAddUrlRequest {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  DestinationPageKey: ").Append(DestinationPageKey).Append("\n");
            sb.Append("  DestinationPageName: ").Append(DestinationPageName).Append("\n");
            sb.Append("  FileServiceKey: ").Append(FileServiceKey).Append("\n");
            sb.Append("  FileServiceKeys: ").Append(FileServiceKeys).Append("\n");
            sb.Append("  DeletedFileServiceKey: ").Append(DeletedFileServiceKey).Append("\n");
            sb.Append("  DeletedFileServiceKeys: ").Append(DeletedFileServiceKeys).Append("\n");
            sb.Append("  ShowDestinationPage: ").Append(ShowDestinationPage).Append("\n");
            sb.Append("  ServiceKeysToAdditionalTags: ").Append(ServiceKeysToAdditionalTags).Append("\n");
            sb.Append("  FilterableTags: ").Append(FilterableTags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddUrlsAddUrlRequest" />
    /// </summary>
    public class AddUrlsAddUrlRequestJsonConverter : JsonConverter<AddUrlsAddUrlRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddUrlsAddUrlRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddUrlsAddUrlRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> url = default;
            Option<string?> destinationPageKey = default;
            Option<string?> destinationPageName = default;
            Option<string?> fileServiceKey = default;
            Option<List<string>?> fileServiceKeys = default;
            Option<string?> deletedFileServiceKey = default;
            Option<List<string>?> deletedFileServiceKeys = default;
            Option<bool?> showDestinationPage = default;
            Option<Dictionary<string, List<string>>?> serviceKeysToAdditionalTags = default;
            Option<List<string>?> filterableTags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "destination_page_key":
                            destinationPageKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "destination_page_name":
                            destinationPageName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "file_service_key":
                            fileServiceKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "file_service_keys":
                            fileServiceKeys = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "deleted_file_service_key":
                            deletedFileServiceKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deleted_file_service_keys":
                            deletedFileServiceKeys = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "show_destination_page":
                            showDestinationPage = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "service_keys_to_additional_tags":
                            serviceKeysToAdditionalTags = new Option<Dictionary<string, List<string>>?>(JsonSerializer.Deserialize<Dictionary<string, List<string>>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "filterable_tags":
                            filterableTags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class AddUrlsAddUrlRequest.");

            if (destinationPageKey.IsSet && destinationPageKey.Value == null)
                throw new ArgumentNullException(nameof(destinationPageKey), "Property is not nullable for class AddUrlsAddUrlRequest.");

            if (destinationPageName.IsSet && destinationPageName.Value == null)
                throw new ArgumentNullException(nameof(destinationPageName), "Property is not nullable for class AddUrlsAddUrlRequest.");

            if (fileServiceKey.IsSet && fileServiceKey.Value == null)
                throw new ArgumentNullException(nameof(fileServiceKey), "Property is not nullable for class AddUrlsAddUrlRequest.");

            if (fileServiceKeys.IsSet && fileServiceKeys.Value == null)
                throw new ArgumentNullException(nameof(fileServiceKeys), "Property is not nullable for class AddUrlsAddUrlRequest.");

            if (deletedFileServiceKey.IsSet && deletedFileServiceKey.Value == null)
                throw new ArgumentNullException(nameof(deletedFileServiceKey), "Property is not nullable for class AddUrlsAddUrlRequest.");

            if (deletedFileServiceKeys.IsSet && deletedFileServiceKeys.Value == null)
                throw new ArgumentNullException(nameof(deletedFileServiceKeys), "Property is not nullable for class AddUrlsAddUrlRequest.");

            if (showDestinationPage.IsSet && showDestinationPage.Value == null)
                throw new ArgumentNullException(nameof(showDestinationPage), "Property is not nullable for class AddUrlsAddUrlRequest.");

            if (serviceKeysToAdditionalTags.IsSet && serviceKeysToAdditionalTags.Value == null)
                throw new ArgumentNullException(nameof(serviceKeysToAdditionalTags), "Property is not nullable for class AddUrlsAddUrlRequest.");

            if (filterableTags.IsSet && filterableTags.Value == null)
                throw new ArgumentNullException(nameof(filterableTags), "Property is not nullable for class AddUrlsAddUrlRequest.");

            return new AddUrlsAddUrlRequest(url, destinationPageKey, destinationPageName, fileServiceKey, fileServiceKeys, deletedFileServiceKey, deletedFileServiceKeys, showDestinationPage, serviceKeysToAdditionalTags, filterableTags);
        }

        /// <summary>
        /// Serializes a <see cref="AddUrlsAddUrlRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addUrlsAddUrlRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddUrlsAddUrlRequest addUrlsAddUrlRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addUrlsAddUrlRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddUrlsAddUrlRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addUrlsAddUrlRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddUrlsAddUrlRequest addUrlsAddUrlRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addUrlsAddUrlRequest.UrlOption.IsSet && addUrlsAddUrlRequest.Url == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrlRequest.Url), "Property is required for class AddUrlsAddUrlRequest.");

            if (addUrlsAddUrlRequest.DestinationPageKeyOption.IsSet && addUrlsAddUrlRequest.DestinationPageKey == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrlRequest.DestinationPageKey), "Property is required for class AddUrlsAddUrlRequest.");

            if (addUrlsAddUrlRequest.DestinationPageNameOption.IsSet && addUrlsAddUrlRequest.DestinationPageName == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrlRequest.DestinationPageName), "Property is required for class AddUrlsAddUrlRequest.");

            if (addUrlsAddUrlRequest.FileServiceKeyOption.IsSet && addUrlsAddUrlRequest.FileServiceKey == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrlRequest.FileServiceKey), "Property is required for class AddUrlsAddUrlRequest.");

            if (addUrlsAddUrlRequest.FileServiceKeysOption.IsSet && addUrlsAddUrlRequest.FileServiceKeys == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrlRequest.FileServiceKeys), "Property is required for class AddUrlsAddUrlRequest.");

            if (addUrlsAddUrlRequest.DeletedFileServiceKeyOption.IsSet && addUrlsAddUrlRequest.DeletedFileServiceKey == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrlRequest.DeletedFileServiceKey), "Property is required for class AddUrlsAddUrlRequest.");

            if (addUrlsAddUrlRequest.DeletedFileServiceKeysOption.IsSet && addUrlsAddUrlRequest.DeletedFileServiceKeys == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrlRequest.DeletedFileServiceKeys), "Property is required for class AddUrlsAddUrlRequest.");

            if (addUrlsAddUrlRequest.ServiceKeysToAdditionalTagsOption.IsSet && addUrlsAddUrlRequest.ServiceKeysToAdditionalTags == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrlRequest.ServiceKeysToAdditionalTags), "Property is required for class AddUrlsAddUrlRequest.");

            if (addUrlsAddUrlRequest.FilterableTagsOption.IsSet && addUrlsAddUrlRequest.FilterableTags == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrlRequest.FilterableTags), "Property is required for class AddUrlsAddUrlRequest.");

            if (addUrlsAddUrlRequest.UrlOption.IsSet)
                writer.WriteString("url", addUrlsAddUrlRequest.Url);

            if (addUrlsAddUrlRequest.DestinationPageKeyOption.IsSet)
                writer.WriteString("destination_page_key", addUrlsAddUrlRequest.DestinationPageKey);

            if (addUrlsAddUrlRequest.DestinationPageNameOption.IsSet)
                writer.WriteString("destination_page_name", addUrlsAddUrlRequest.DestinationPageName);

            if (addUrlsAddUrlRequest.FileServiceKeyOption.IsSet)
                writer.WriteString("file_service_key", addUrlsAddUrlRequest.FileServiceKey);

            if (addUrlsAddUrlRequest.FileServiceKeysOption.IsSet)
            {
                writer.WritePropertyName("file_service_keys");
                JsonSerializer.Serialize(writer, addUrlsAddUrlRequest.FileServiceKeys, jsonSerializerOptions);
            }
            if (addUrlsAddUrlRequest.DeletedFileServiceKeyOption.IsSet)
                writer.WriteString("deleted_file_service_key", addUrlsAddUrlRequest.DeletedFileServiceKey);

            if (addUrlsAddUrlRequest.DeletedFileServiceKeysOption.IsSet)
            {
                writer.WritePropertyName("deleted_file_service_keys");
                JsonSerializer.Serialize(writer, addUrlsAddUrlRequest.DeletedFileServiceKeys, jsonSerializerOptions);
            }
            if (addUrlsAddUrlRequest.ShowDestinationPageOption.IsSet)
                writer.WriteBoolean("show_destination_page", addUrlsAddUrlRequest.ShowDestinationPageOption.Value!.Value);

            if (addUrlsAddUrlRequest.ServiceKeysToAdditionalTagsOption.IsSet)
            {
                writer.WritePropertyName("service_keys_to_additional_tags");
                JsonSerializer.Serialize(writer, addUrlsAddUrlRequest.ServiceKeysToAdditionalTags, jsonSerializerOptions);
            }
            if (addUrlsAddUrlRequest.FilterableTagsOption.IsSet)
            {
                writer.WritePropertyName("filterable_tags");
                JsonSerializer.Serialize(writer, addUrlsAddUrlRequest.FilterableTags, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The AddUrlsAddUrlRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddUrlsAddUrlRequest))]
    public partial class AddUrlsAddUrlRequestSerializationContext : JsonSerializerContext { }
}
