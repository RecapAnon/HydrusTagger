// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// PageInfoResponse
    /// </summary>
    public partial class PageInfoResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageInfoResponse" /> class.
        /// </summary>
        /// <param name="varVersion">API version.</param>
        /// <param name="hydrusVersion">Hydrus client version.</param>
        /// <param name="pageInfo">pageInfo</param>
        /// <param name="media">media</param>
        [JsonConstructor]
        public PageInfoResponse(Option<int?> varVersion = default, Option<int?> hydrusVersion = default, Option<PageInfoResponsePageInfo?> pageInfo = default, Option<PageInfoResponseMedia?> media = default)
        {
            VarVersionOption = varVersion;
            HydrusVersionOption = hydrusVersion;
            PageInfoOption = pageInfo;
            MediaOption = media;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VarVersionOption { get; private set; }

        /// <summary>
        /// API version.
        /// </summary>
        /// <value>API version.</value>
        [JsonPropertyName("version")]
        public int? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of HydrusVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HydrusVersionOption { get; private set; }

        /// <summary>
        /// Hydrus client version.
        /// </summary>
        /// <value>Hydrus client version.</value>
        [JsonPropertyName("hydrus_version")]
        public int? HydrusVersion { get { return this.HydrusVersionOption; } set { this.HydrusVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PageInfoResponsePageInfo?> PageInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets PageInfo
        /// </summary>
        [JsonPropertyName("page_info")]
        public PageInfoResponsePageInfo? PageInfo { get { return this.PageInfoOption; } set { this.PageInfoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Media
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PageInfoResponseMedia?> MediaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [JsonPropertyName("media")]
        public PageInfoResponseMedia? Media { get { return this.MediaOption; } set { this.MediaOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageInfoResponse {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  HydrusVersion: ").Append(HydrusVersion).Append("\n");
            sb.Append("  PageInfo: ").Append(PageInfo).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PageInfoResponse" />
    /// </summary>
    public class PageInfoResponseJsonConverter : JsonConverter<PageInfoResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="PageInfoResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PageInfoResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> varVersion = default;
            Option<int?> hydrusVersion = default;
            Option<PageInfoResponsePageInfo?> pageInfo = default;
            Option<PageInfoResponseMedia?> media = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "version":
                            varVersion = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "hydrus_version":
                            hydrusVersion = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "page_info":
                            pageInfo = new Option<PageInfoResponsePageInfo?>(JsonSerializer.Deserialize<PageInfoResponsePageInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "media":
                            media = new Option<PageInfoResponseMedia?>(JsonSerializer.Deserialize<PageInfoResponseMedia>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class PageInfoResponse.");

            if (hydrusVersion.IsSet && hydrusVersion.Value == null)
                throw new ArgumentNullException(nameof(hydrusVersion), "Property is not nullable for class PageInfoResponse.");

            if (pageInfo.IsSet && pageInfo.Value == null)
                throw new ArgumentNullException(nameof(pageInfo), "Property is not nullable for class PageInfoResponse.");

            if (media.IsSet && media.Value == null)
                throw new ArgumentNullException(nameof(media), "Property is not nullable for class PageInfoResponse.");

            return new PageInfoResponse(varVersion, hydrusVersion, pageInfo, media);
        }

        /// <summary>
        /// Serializes a <see cref="PageInfoResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageInfoResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PageInfoResponse pageInfoResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pageInfoResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PageInfoResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageInfoResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PageInfoResponse pageInfoResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pageInfoResponse.PageInfoOption.IsSet && pageInfoResponse.PageInfo == null)
                throw new ArgumentNullException(nameof(pageInfoResponse.PageInfo), "Property is required for class PageInfoResponse.");

            if (pageInfoResponse.MediaOption.IsSet && pageInfoResponse.Media == null)
                throw new ArgumentNullException(nameof(pageInfoResponse.Media), "Property is required for class PageInfoResponse.");

            if (pageInfoResponse.VarVersionOption.IsSet)
                writer.WriteNumber("version", pageInfoResponse.VarVersionOption.Value!.Value);

            if (pageInfoResponse.HydrusVersionOption.IsSet)
                writer.WriteNumber("hydrus_version", pageInfoResponse.HydrusVersionOption.Value!.Value);

            if (pageInfoResponse.PageInfoOption.IsSet)
            {
                writer.WritePropertyName("page_info");
                JsonSerializer.Serialize(writer, pageInfoResponse.PageInfo, jsonSerializerOptions);
            }
            if (pageInfoResponse.MediaOption.IsSet)
            {
                writer.WritePropertyName("media");
                JsonSerializer.Serialize(writer, pageInfoResponse.Media, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The PageInfoResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PageInfoResponse))]
    public partial class PageInfoResponseSerializationContext : JsonSerializerContext { }
}
