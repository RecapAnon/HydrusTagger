// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// GetSiblingsAndParentsResponseTagsValueValue
    /// </summary>
    public partial class GetSiblingsAndParentsResponseTagsValueValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSiblingsAndParentsResponseTagsValueValue" /> class.
        /// </summary>
        /// <param name="idealTag">idealTag</param>
        /// <param name="siblings">siblings</param>
        /// <param name="descendants">descendants</param>
        /// <param name="ancestors">ancestors</param>
        [JsonConstructor]
        public GetSiblingsAndParentsResponseTagsValueValue(string idealTag, List<string> siblings, List<string> descendants, List<string> ancestors)
        {
            IdealTag = idealTag;
            Siblings = siblings;
            Descendants = descendants;
            Ancestors = ancestors;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets IdealTag
        /// </summary>
        [JsonPropertyName("ideal_tag")]
        public string IdealTag { get; set; }

        /// <summary>
        /// Gets or Sets Siblings
        /// </summary>
        [JsonPropertyName("siblings")]
        public List<string> Siblings { get; set; }

        /// <summary>
        /// Gets or Sets Descendants
        /// </summary>
        [JsonPropertyName("descendants")]
        public List<string> Descendants { get; set; }

        /// <summary>
        /// Gets or Sets Ancestors
        /// </summary>
        [JsonPropertyName("ancestors")]
        public List<string> Ancestors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSiblingsAndParentsResponseTagsValueValue {\n");
            sb.Append("  IdealTag: ").Append(IdealTag).Append("\n");
            sb.Append("  Siblings: ").Append(Siblings).Append("\n");
            sb.Append("  Descendants: ").Append(Descendants).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSiblingsAndParentsResponseTagsValueValue" />
    /// </summary>
    public class GetSiblingsAndParentsResponseTagsValueValueJsonConverter : JsonConverter<GetSiblingsAndParentsResponseTagsValueValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSiblingsAndParentsResponseTagsValueValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSiblingsAndParentsResponseTagsValueValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> idealTag = default;
            Option<List<string>?> siblings = default;
            Option<List<string>?> descendants = default;
            Option<List<string>?> ancestors = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ideal_tag":
                            idealTag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "siblings":
                            siblings = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "descendants":
                            descendants = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ancestors":
                            ancestors = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!idealTag.IsSet)
                throw new ArgumentException("Property is required for class GetSiblingsAndParentsResponseTagsValueValue.", nameof(idealTag));

            if (!siblings.IsSet)
                throw new ArgumentException("Property is required for class GetSiblingsAndParentsResponseTagsValueValue.", nameof(siblings));

            if (!descendants.IsSet)
                throw new ArgumentException("Property is required for class GetSiblingsAndParentsResponseTagsValueValue.", nameof(descendants));

            if (!ancestors.IsSet)
                throw new ArgumentException("Property is required for class GetSiblingsAndParentsResponseTagsValueValue.", nameof(ancestors));

            if (idealTag.IsSet && idealTag.Value == null)
                throw new ArgumentNullException(nameof(idealTag), "Property is not nullable for class GetSiblingsAndParentsResponseTagsValueValue.");

            if (siblings.IsSet && siblings.Value == null)
                throw new ArgumentNullException(nameof(siblings), "Property is not nullable for class GetSiblingsAndParentsResponseTagsValueValue.");

            if (descendants.IsSet && descendants.Value == null)
                throw new ArgumentNullException(nameof(descendants), "Property is not nullable for class GetSiblingsAndParentsResponseTagsValueValue.");

            if (ancestors.IsSet && ancestors.Value == null)
                throw new ArgumentNullException(nameof(ancestors), "Property is not nullable for class GetSiblingsAndParentsResponseTagsValueValue.");

            return new GetSiblingsAndParentsResponseTagsValueValue(idealTag.Value!, siblings.Value!, descendants.Value!, ancestors.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetSiblingsAndParentsResponseTagsValueValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSiblingsAndParentsResponseTagsValueValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSiblingsAndParentsResponseTagsValueValue getSiblingsAndParentsResponseTagsValueValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSiblingsAndParentsResponseTagsValueValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSiblingsAndParentsResponseTagsValueValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSiblingsAndParentsResponseTagsValueValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSiblingsAndParentsResponseTagsValueValue getSiblingsAndParentsResponseTagsValueValue, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSiblingsAndParentsResponseTagsValueValue.IdealTag == null)
                throw new ArgumentNullException(nameof(getSiblingsAndParentsResponseTagsValueValue.IdealTag), "Property is required for class GetSiblingsAndParentsResponseTagsValueValue.");

            if (getSiblingsAndParentsResponseTagsValueValue.Siblings == null)
                throw new ArgumentNullException(nameof(getSiblingsAndParentsResponseTagsValueValue.Siblings), "Property is required for class GetSiblingsAndParentsResponseTagsValueValue.");

            if (getSiblingsAndParentsResponseTagsValueValue.Descendants == null)
                throw new ArgumentNullException(nameof(getSiblingsAndParentsResponseTagsValueValue.Descendants), "Property is required for class GetSiblingsAndParentsResponseTagsValueValue.");

            if (getSiblingsAndParentsResponseTagsValueValue.Ancestors == null)
                throw new ArgumentNullException(nameof(getSiblingsAndParentsResponseTagsValueValue.Ancestors), "Property is required for class GetSiblingsAndParentsResponseTagsValueValue.");

            writer.WriteString("ideal_tag", getSiblingsAndParentsResponseTagsValueValue.IdealTag);

            writer.WritePropertyName("siblings");
            JsonSerializer.Serialize(writer, getSiblingsAndParentsResponseTagsValueValue.Siblings, jsonSerializerOptions);
            writer.WritePropertyName("descendants");
            JsonSerializer.Serialize(writer, getSiblingsAndParentsResponseTagsValueValue.Descendants, jsonSerializerOptions);
            writer.WritePropertyName("ancestors");
            JsonSerializer.Serialize(writer, getSiblingsAndParentsResponseTagsValueValue.Ancestors, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The GetSiblingsAndParentsResponseTagsValueValueSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetSiblingsAndParentsResponseTagsValueValue))]
    public partial class GetSiblingsAndParentsResponseTagsValueValueSerializationContext : JsonSerializerContext { }
}
