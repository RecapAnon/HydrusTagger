// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManageServicesGetPendingCounts200Response
    /// </summary>
    public partial class ManageServicesGetPendingCounts200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManageServicesGetPendingCounts200Response" /> class.
        /// </summary>
        /// <param name="services">services</param>
        /// <param name="pendingCounts">pendingCounts</param>
        [JsonConstructor]
        public ManageServicesGetPendingCounts200Response(Option<Dictionary<string, Service>?> services = default, Option<Dictionary<string, ManageServicesGetPendingCounts200ResponsePendingCountsValue>?> pendingCounts = default)
        {
            ServicesOption = services;
            PendingCountsOption = pendingCounts;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Services
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Service>?> ServicesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [JsonPropertyName("services")]
        public Dictionary<string, Service>? Services { get { return this.ServicesOption; } set { this.ServicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PendingCounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, ManageServicesGetPendingCounts200ResponsePendingCountsValue>?> PendingCountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PendingCounts
        /// </summary>
        [JsonPropertyName("pending_counts")]
        public Dictionary<string, ManageServicesGetPendingCounts200ResponsePendingCountsValue>? PendingCounts { get { return this.PendingCountsOption; } set { this.PendingCountsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManageServicesGetPendingCounts200Response {\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  PendingCounts: ").Append(PendingCounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManageServicesGetPendingCounts200Response" />
    /// </summary>
    public class ManageServicesGetPendingCounts200ResponseJsonConverter : JsonConverter<ManageServicesGetPendingCounts200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManageServicesGetPendingCounts200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManageServicesGetPendingCounts200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, Service>?> services = default;
            Option<Dictionary<string, ManageServicesGetPendingCounts200ResponsePendingCountsValue>?> pendingCounts = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "services":
                            services = new Option<Dictionary<string, Service>?>(JsonSerializer.Deserialize<Dictionary<string, Service>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pending_counts":
                            pendingCounts = new Option<Dictionary<string, ManageServicesGetPendingCounts200ResponsePendingCountsValue>?>(JsonSerializer.Deserialize<Dictionary<string, ManageServicesGetPendingCounts200ResponsePendingCountsValue>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ManageServicesGetPendingCounts200Response(services, pendingCounts);
        }

        /// <summary>
        /// Serializes a <see cref="ManageServicesGetPendingCounts200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageServicesGetPendingCounts200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManageServicesGetPendingCounts200Response manageServicesGetPendingCounts200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, manageServicesGetPendingCounts200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManageServicesGetPendingCounts200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageServicesGetPendingCounts200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManageServicesGetPendingCounts200Response manageServicesGetPendingCounts200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (manageServicesGetPendingCounts200Response.ServicesOption.IsSet)
                if (manageServicesGetPendingCounts200Response.ServicesOption.Value != null)
                {
                    writer.WritePropertyName("services");
                    JsonSerializer.Serialize(writer, manageServicesGetPendingCounts200Response.Services, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("services");
            if (manageServicesGetPendingCounts200Response.PendingCountsOption.IsSet)
                if (manageServicesGetPendingCounts200Response.PendingCountsOption.Value != null)
                {
                    writer.WritePropertyName("pending_counts");
                    JsonSerializer.Serialize(writer, manageServicesGetPendingCounts200Response.PendingCounts, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("pending_counts");
        }
    }

    /// <summary>
    /// The ManageServicesGetPendingCounts200ResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManageServicesGetPendingCounts200Response))]
    public partial class ManageServicesGetPendingCounts200ResponseSerializationContext : JsonSerializerContext { }
}
