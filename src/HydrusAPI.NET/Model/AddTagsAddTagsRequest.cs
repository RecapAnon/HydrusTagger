// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// AddTagsAddTagsRequest
    /// </summary>
    public partial class AddTagsAddTagsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTagsAddTagsRequest" /> class.
        /// </summary>
        /// <param name="fileId">Numerical ID of a single file.</param>
        /// <param name="fileIds">List of numerical IDs for multiple files.</param>
        /// <param name="hash">SHA256 hash of a single file.</param>
        /// <param name="hashes">List of SHA256 hashes for multiple files.</param>
        /// <param name="serviceKeysToTags">Maps service keys to lists of tags to be added to the files.</param>
        /// <param name="serviceKeysToActionsToTags">serviceKeysToActionsToTags</param>
        /// <param name="overridePreviouslyDeletedMappings">If true, allows overriding mappings previously deleted. If false, skips adding previously deleted mappings. (default to true)</param>
        /// <param name="createNewDeletedMappings">If true, creates delete records even for tags not currently on the file. If false, only deletes existing mappings. (default to true)</param>
        [JsonConstructor]
        public AddTagsAddTagsRequest(Option<int?> fileId = default, Option<List<int>?> fileIds = default, Option<string?> hash = default, Option<List<string>?> hashes = default, Option<Dictionary<string, List<string>>?> serviceKeysToTags = default, Option<Dictionary<string, Dictionary<string, List<AddTagsAddTagsRequestServiceKeysToActionsToTagsValueValueInner>>>?> serviceKeysToActionsToTags = default, Option<bool?> overridePreviouslyDeletedMappings = default, Option<bool?> createNewDeletedMappings = default)
        {
            FileIdOption = fileId;
            FileIdsOption = fileIds;
            HashOption = hash;
            HashesOption = hashes;
            ServiceKeysToTagsOption = serviceKeysToTags;
            ServiceKeysToActionsToTagsOption = serviceKeysToActionsToTags;
            OverridePreviouslyDeletedMappingsOption = overridePreviouslyDeletedMappings;
            CreateNewDeletedMappingsOption = createNewDeletedMappings;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileIdOption { get; private set; }

        /// <summary>
        /// Numerical ID of a single file.
        /// </summary>
        /// <value>Numerical ID of a single file.</value>
        [JsonPropertyName("file_id")]
        public int? FileId { get { return this.FileIdOption; } set { this.FileIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> FileIdsOption { get; private set; }

        /// <summary>
        /// List of numerical IDs for multiple files.
        /// </summary>
        /// <value>List of numerical IDs for multiple files.</value>
        [JsonPropertyName("file_ids")]
        public List<int>? FileIds { get { return this.FileIdsOption; } set { this.FileIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// SHA256 hash of a single file.
        /// </summary>
        /// <value>SHA256 hash of a single file.</value>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hashes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> HashesOption { get; private set; }

        /// <summary>
        /// List of SHA256 hashes for multiple files.
        /// </summary>
        /// <value>List of SHA256 hashes for multiple files.</value>
        [JsonPropertyName("hashes")]
        public List<string>? Hashes { get { return this.HashesOption; } set { this.HashesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceKeysToTags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, List<string>>?> ServiceKeysToTagsOption { get; private set; }

        /// <summary>
        /// Maps service keys to lists of tags to be added to the files.
        /// </summary>
        /// <value>Maps service keys to lists of tags to be added to the files.</value>
        [JsonPropertyName("service_keys_to_tags")]
        public Dictionary<string, List<string>>? ServiceKeysToTags { get { return this.ServiceKeysToTagsOption; } set { this.ServiceKeysToTagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceKeysToActionsToTags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Dictionary<string, List<AddTagsAddTagsRequestServiceKeysToActionsToTagsValueValueInner>>>?> ServiceKeysToActionsToTagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ServiceKeysToActionsToTags
        /// </summary>
        [JsonPropertyName("service_keys_to_actions_to_tags")]
        public Dictionary<string, Dictionary<string, List<AddTagsAddTagsRequestServiceKeysToActionsToTagsValueValueInner>>>? ServiceKeysToActionsToTags { get { return this.ServiceKeysToActionsToTagsOption; } set { this.ServiceKeysToActionsToTagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of OverridePreviouslyDeletedMappings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OverridePreviouslyDeletedMappingsOption { get; private set; }

        /// <summary>
        /// If true, allows overriding mappings previously deleted. If false, skips adding previously deleted mappings.
        /// </summary>
        /// <value>If true, allows overriding mappings previously deleted. If false, skips adding previously deleted mappings.</value>
        [JsonPropertyName("override_previously_deleted_mappings")]
        public bool? OverridePreviouslyDeletedMappings { get { return this.OverridePreviouslyDeletedMappingsOption; } set { this.OverridePreviouslyDeletedMappingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreateNewDeletedMappings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CreateNewDeletedMappingsOption { get; private set; }

        /// <summary>
        /// If true, creates delete records even for tags not currently on the file. If false, only deletes existing mappings.
        /// </summary>
        /// <value>If true, creates delete records even for tags not currently on the file. If false, only deletes existing mappings.</value>
        [JsonPropertyName("create_new_deleted_mappings")]
        public bool? CreateNewDeletedMappings { get { return this.CreateNewDeletedMappingsOption; } set { this.CreateNewDeletedMappingsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddTagsAddTagsRequest {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Hashes: ").Append(Hashes).Append("\n");
            sb.Append("  ServiceKeysToTags: ").Append(ServiceKeysToTags).Append("\n");
            sb.Append("  ServiceKeysToActionsToTags: ").Append(ServiceKeysToActionsToTags).Append("\n");
            sb.Append("  OverridePreviouslyDeletedMappings: ").Append(OverridePreviouslyDeletedMappings).Append("\n");
            sb.Append("  CreateNewDeletedMappings: ").Append(CreateNewDeletedMappings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddTagsAddTagsRequest" />
    /// </summary>
    public class AddTagsAddTagsRequestJsonConverter : JsonConverter<AddTagsAddTagsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddTagsAddTagsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddTagsAddTagsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> fileId = default;
            Option<List<int>?> fileIds = default;
            Option<string?> hash = default;
            Option<List<string>?> hashes = default;
            Option<Dictionary<string, List<string>>?> serviceKeysToTags = default;
            Option<Dictionary<string, Dictionary<string, List<AddTagsAddTagsRequestServiceKeysToActionsToTagsValueValueInner>>>?> serviceKeysToActionsToTags = default;
            Option<bool?> overridePreviouslyDeletedMappings = default;
            Option<bool?> createNewDeletedMappings = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "file_id":
                            fileId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_ids":
                            fileIds = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hashes":
                            hashes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "service_keys_to_tags":
                            serviceKeysToTags = new Option<Dictionary<string, List<string>>?>(JsonSerializer.Deserialize<Dictionary<string, List<string>>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "service_keys_to_actions_to_tags":
                            serviceKeysToActionsToTags = new Option<Dictionary<string, Dictionary<string, List<AddTagsAddTagsRequestServiceKeysToActionsToTagsValueValueInner>>>?>(JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, List<AddTagsAddTagsRequestServiceKeysToActionsToTagsValueValueInner>>>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "override_previously_deleted_mappings":
                            overridePreviouslyDeletedMappings = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "create_new_deleted_mappings":
                            createNewDeletedMappings = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fileId.IsSet && fileId.Value == null)
                throw new ArgumentNullException(nameof(fileId), "Property is not nullable for class AddTagsAddTagsRequest.");

            if (fileIds.IsSet && fileIds.Value == null)
                throw new ArgumentNullException(nameof(fileIds), "Property is not nullable for class AddTagsAddTagsRequest.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class AddTagsAddTagsRequest.");

            if (hashes.IsSet && hashes.Value == null)
                throw new ArgumentNullException(nameof(hashes), "Property is not nullable for class AddTagsAddTagsRequest.");

            if (serviceKeysToTags.IsSet && serviceKeysToTags.Value == null)
                throw new ArgumentNullException(nameof(serviceKeysToTags), "Property is not nullable for class AddTagsAddTagsRequest.");

            if (serviceKeysToActionsToTags.IsSet && serviceKeysToActionsToTags.Value == null)
                throw new ArgumentNullException(nameof(serviceKeysToActionsToTags), "Property is not nullable for class AddTagsAddTagsRequest.");

            if (overridePreviouslyDeletedMappings.IsSet && overridePreviouslyDeletedMappings.Value == null)
                throw new ArgumentNullException(nameof(overridePreviouslyDeletedMappings), "Property is not nullable for class AddTagsAddTagsRequest.");

            if (createNewDeletedMappings.IsSet && createNewDeletedMappings.Value == null)
                throw new ArgumentNullException(nameof(createNewDeletedMappings), "Property is not nullable for class AddTagsAddTagsRequest.");

            return new AddTagsAddTagsRequest(fileId, fileIds, hash, hashes, serviceKeysToTags, serviceKeysToActionsToTags, overridePreviouslyDeletedMappings, createNewDeletedMappings);
        }

        /// <summary>
        /// Serializes a <see cref="AddTagsAddTagsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addTagsAddTagsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddTagsAddTagsRequest addTagsAddTagsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addTagsAddTagsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddTagsAddTagsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addTagsAddTagsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddTagsAddTagsRequest addTagsAddTagsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addTagsAddTagsRequest.FileIdsOption.IsSet && addTagsAddTagsRequest.FileIds == null)
                throw new ArgumentNullException(nameof(addTagsAddTagsRequest.FileIds), "Property is required for class AddTagsAddTagsRequest.");

            if (addTagsAddTagsRequest.HashOption.IsSet && addTagsAddTagsRequest.Hash == null)
                throw new ArgumentNullException(nameof(addTagsAddTagsRequest.Hash), "Property is required for class AddTagsAddTagsRequest.");

            if (addTagsAddTagsRequest.HashesOption.IsSet && addTagsAddTagsRequest.Hashes == null)
                throw new ArgumentNullException(nameof(addTagsAddTagsRequest.Hashes), "Property is required for class AddTagsAddTagsRequest.");

            if (addTagsAddTagsRequest.ServiceKeysToTagsOption.IsSet && addTagsAddTagsRequest.ServiceKeysToTags == null)
                throw new ArgumentNullException(nameof(addTagsAddTagsRequest.ServiceKeysToTags), "Property is required for class AddTagsAddTagsRequest.");

            if (addTagsAddTagsRequest.ServiceKeysToActionsToTagsOption.IsSet && addTagsAddTagsRequest.ServiceKeysToActionsToTags == null)
                throw new ArgumentNullException(nameof(addTagsAddTagsRequest.ServiceKeysToActionsToTags), "Property is required for class AddTagsAddTagsRequest.");

            if (addTagsAddTagsRequest.FileIdOption.IsSet)
                writer.WriteNumber("file_id", addTagsAddTagsRequest.FileIdOption.Value!.Value);

            if (addTagsAddTagsRequest.FileIdsOption.IsSet)
            {
                writer.WritePropertyName("file_ids");
                JsonSerializer.Serialize(writer, addTagsAddTagsRequest.FileIds, jsonSerializerOptions);
            }
            if (addTagsAddTagsRequest.HashOption.IsSet)
                writer.WriteString("hash", addTagsAddTagsRequest.Hash);

            if (addTagsAddTagsRequest.HashesOption.IsSet)
            {
                writer.WritePropertyName("hashes");
                JsonSerializer.Serialize(writer, addTagsAddTagsRequest.Hashes, jsonSerializerOptions);
            }
            if (addTagsAddTagsRequest.ServiceKeysToTagsOption.IsSet)
            {
                writer.WritePropertyName("service_keys_to_tags");
                JsonSerializer.Serialize(writer, addTagsAddTagsRequest.ServiceKeysToTags, jsonSerializerOptions);
            }
            if (addTagsAddTagsRequest.ServiceKeysToActionsToTagsOption.IsSet)
            {
                writer.WritePropertyName("service_keys_to_actions_to_tags");
                JsonSerializer.Serialize(writer, addTagsAddTagsRequest.ServiceKeysToActionsToTags, jsonSerializerOptions);
            }
            if (addTagsAddTagsRequest.OverridePreviouslyDeletedMappingsOption.IsSet)
                writer.WriteBoolean("override_previously_deleted_mappings", addTagsAddTagsRequest.OverridePreviouslyDeletedMappingsOption.Value!.Value);

            if (addTagsAddTagsRequest.CreateNewDeletedMappingsOption.IsSet)
                writer.WriteBoolean("create_new_deleted_mappings", addTagsAddTagsRequest.CreateNewDeletedMappingsOption.Value!.Value);
        }
    }

    /// <summary>
    /// The AddTagsAddTagsRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddTagsAddTagsRequest))]
    public partial class AddTagsAddTagsRequestSerializationContext : JsonSerializerContext { }
}
