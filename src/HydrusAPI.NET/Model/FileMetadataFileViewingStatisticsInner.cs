// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// FileMetadataFileViewingStatisticsInner
    /// </summary>
    public partial class FileMetadataFileViewingStatisticsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMetadataFileViewingStatisticsInner" /> class.
        /// </summary>
        /// <param name="canvasType">canvasType</param>
        /// <param name="canvasTypePretty">canvasTypePretty</param>
        /// <param name="views">views</param>
        /// <param name="viewtime">viewtime</param>
        /// <param name="lastViewedTimestamp">lastViewedTimestamp</param>
        [JsonConstructor]
        public FileMetadataFileViewingStatisticsInner(Option<int?> canvasType = default, Option<string?> canvasTypePretty = default, Option<int?> views = default, Option<decimal?> viewtime = default, Option<decimal?> lastViewedTimestamp = default)
        {
            CanvasTypeOption = canvasType;
            CanvasTypePrettyOption = canvasTypePretty;
            ViewsOption = views;
            ViewtimeOption = viewtime;
            LastViewedTimestampOption = lastViewedTimestamp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CanvasType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CanvasTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CanvasType
        /// </summary>
        [JsonPropertyName("canvas_type")]
        public int? CanvasType { get { return this.CanvasTypeOption; } set { this.CanvasTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CanvasTypePretty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CanvasTypePrettyOption { get; private set; }

        /// <summary>
        /// Gets or Sets CanvasTypePretty
        /// </summary>
        [JsonPropertyName("canvas_type_pretty")]
        public string? CanvasTypePretty { get { return this.CanvasTypePrettyOption; } set { this.CanvasTypePrettyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Views
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ViewsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Views
        /// </summary>
        [JsonPropertyName("views")]
        public int? Views { get { return this.ViewsOption; } set { this.ViewsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Viewtime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ViewtimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Viewtime
        /// </summary>
        [JsonPropertyName("viewtime")]
        public decimal? Viewtime { get { return this.ViewtimeOption; } set { this.ViewtimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastViewedTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LastViewedTimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastViewedTimestamp
        /// </summary>
        [JsonPropertyName("last_viewed_timestamp")]
        public decimal? LastViewedTimestamp { get { return this.LastViewedTimestampOption; } set { this.LastViewedTimestampOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileMetadataFileViewingStatisticsInner {\n");
            sb.Append("  CanvasType: ").Append(CanvasType).Append("\n");
            sb.Append("  CanvasTypePretty: ").Append(CanvasTypePretty).Append("\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("  Viewtime: ").Append(Viewtime).Append("\n");
            sb.Append("  LastViewedTimestamp: ").Append(LastViewedTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileMetadataFileViewingStatisticsInner" />
    /// </summary>
    public class FileMetadataFileViewingStatisticsInnerJsonConverter : JsonConverter<FileMetadataFileViewingStatisticsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="FileMetadataFileViewingStatisticsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileMetadataFileViewingStatisticsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> canvasType = default;
            Option<string?> canvasTypePretty = default;
            Option<int?> views = default;
            Option<decimal?> viewtime = default;
            Option<decimal?> lastViewedTimestamp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "canvas_type":
                            canvasType = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "canvas_type_pretty":
                            canvasTypePretty = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "views":
                            views = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "viewtime":
                            viewtime = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "last_viewed_timestamp":
                            lastViewedTimestamp = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (canvasType.IsSet && canvasType.Value == null)
                throw new ArgumentNullException(nameof(canvasType), "Property is not nullable for class FileMetadataFileViewingStatisticsInner.");

            if (canvasTypePretty.IsSet && canvasTypePretty.Value == null)
                throw new ArgumentNullException(nameof(canvasTypePretty), "Property is not nullable for class FileMetadataFileViewingStatisticsInner.");

            if (views.IsSet && views.Value == null)
                throw new ArgumentNullException(nameof(views), "Property is not nullable for class FileMetadataFileViewingStatisticsInner.");

            if (viewtime.IsSet && viewtime.Value == null)
                throw new ArgumentNullException(nameof(viewtime), "Property is not nullable for class FileMetadataFileViewingStatisticsInner.");

            return new FileMetadataFileViewingStatisticsInner(canvasType, canvasTypePretty, views, viewtime, lastViewedTimestamp);
        }

        /// <summary>
        /// Serializes a <see cref="FileMetadataFileViewingStatisticsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileMetadataFileViewingStatisticsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileMetadataFileViewingStatisticsInner fileMetadataFileViewingStatisticsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileMetadataFileViewingStatisticsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileMetadataFileViewingStatisticsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileMetadataFileViewingStatisticsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileMetadataFileViewingStatisticsInner fileMetadataFileViewingStatisticsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileMetadataFileViewingStatisticsInner.CanvasTypePrettyOption.IsSet && fileMetadataFileViewingStatisticsInner.CanvasTypePretty == null)
                throw new ArgumentNullException(nameof(fileMetadataFileViewingStatisticsInner.CanvasTypePretty), "Property is required for class FileMetadataFileViewingStatisticsInner.");

            if (fileMetadataFileViewingStatisticsInner.CanvasTypeOption.IsSet)
                writer.WriteNumber("canvas_type", fileMetadataFileViewingStatisticsInner.CanvasTypeOption.Value!.Value);

            if (fileMetadataFileViewingStatisticsInner.CanvasTypePrettyOption.IsSet)
                writer.WriteString("canvas_type_pretty", fileMetadataFileViewingStatisticsInner.CanvasTypePretty);

            if (fileMetadataFileViewingStatisticsInner.ViewsOption.IsSet)
                writer.WriteNumber("views", fileMetadataFileViewingStatisticsInner.ViewsOption.Value!.Value);

            if (fileMetadataFileViewingStatisticsInner.ViewtimeOption.IsSet)
                writer.WriteNumber("viewtime", fileMetadataFileViewingStatisticsInner.ViewtimeOption.Value!.Value);

            if (fileMetadataFileViewingStatisticsInner.LastViewedTimestampOption.IsSet)
                if (fileMetadataFileViewingStatisticsInner.LastViewedTimestampOption.Value != null)
                    writer.WriteNumber("last_viewed_timestamp", fileMetadataFileViewingStatisticsInner.LastViewedTimestampOption.Value!.Value);
                else
                    writer.WriteNull("last_viewed_timestamp");
        }
    }

    /// <summary>
    /// The FileMetadataFileViewingStatisticsInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(FileMetadataFileViewingStatisticsInner))]
    public partial class FileMetadataFileViewingStatisticsInnerSerializationContext : JsonSerializerContext { }
}
