// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// Service
    /// </summary>
    public partial class Service : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="type">type</param>
        /// <param name="typePretty">typePretty</param>
        /// <param name="serviceKey">serviceKey</param>
        /// <param name="starShape">starShape</param>
        /// <param name="minStars">minStars</param>
        /// <param name="maxStars">maxStars</param>
        [JsonConstructor]
        public Service(string name, int type, string typePretty, string serviceKey, Option<string?> starShape = default, Option<int?> minStars = default, Option<int?> maxStars = default)
        {
            Name = name;
            Type = type;
            TypePretty = typePretty;
            ServiceKey = serviceKey;
            StarShapeOption = starShape;
            MinStarsOption = minStars;
            MaxStarsOption = maxStars;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets TypePretty
        /// </summary>
        [JsonPropertyName("type_pretty")]
        public string TypePretty { get; set; }

        /// <summary>
        /// Gets or Sets ServiceKey
        /// </summary>
        [JsonPropertyName("service_key")]
        public string ServiceKey { get; set; }

        /// <summary>
        /// Used to track the state of StarShape
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StarShapeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StarShape
        /// </summary>
        [JsonPropertyName("star_shape")]
        public string? StarShape { get { return this.StarShapeOption; } set { this.StarShapeOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinStars
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MinStarsOption { get; private set; }

        /// <summary>
        /// Gets or Sets MinStars
        /// </summary>
        [JsonPropertyName("min_stars")]
        public int? MinStars { get { return this.MinStarsOption; } set { this.MinStarsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxStars
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxStarsOption { get; private set; }

        /// <summary>
        /// Gets or Sets MaxStars
        /// </summary>
        [JsonPropertyName("max_stars")]
        public int? MaxStars { get { return this.MaxStarsOption; } set { this.MaxStarsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Service {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypePretty: ").Append(TypePretty).Append("\n");
            sb.Append("  ServiceKey: ").Append(ServiceKey).Append("\n");
            sb.Append("  StarShape: ").Append(StarShape).Append("\n");
            sb.Append("  MinStars: ").Append(MinStars).Append("\n");
            sb.Append("  MaxStars: ").Append(MaxStars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Service" />
    /// </summary>
    public class ServiceJsonConverter : JsonConverter<Service>
    {
        /// <summary>
        /// Deserializes json to <see cref="Service" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Service Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<int?> type = default;
            Option<string?> typePretty = default;
            Option<string?> serviceKey = default;
            Option<string?> starShape = default;
            Option<int?> minStars = default;
            Option<int?> maxStars = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type_pretty":
                            typePretty = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "service_key":
                            serviceKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "star_shape":
                            starShape = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "min_stars":
                            minStars = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "max_stars":
                            maxStars = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Service.", nameof(name));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Service.", nameof(type));

            if (!typePretty.IsSet)
                throw new ArgumentException("Property is required for class Service.", nameof(typePretty));

            if (!serviceKey.IsSet)
                throw new ArgumentException("Property is required for class Service.", nameof(serviceKey));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Service.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Service.");

            if (typePretty.IsSet && typePretty.Value == null)
                throw new ArgumentNullException(nameof(typePretty), "Property is not nullable for class Service.");

            if (serviceKey.IsSet && serviceKey.Value == null)
                throw new ArgumentNullException(nameof(serviceKey), "Property is not nullable for class Service.");

            if (starShape.IsSet && starShape.Value == null)
                throw new ArgumentNullException(nameof(starShape), "Property is not nullable for class Service.");

            if (minStars.IsSet && minStars.Value == null)
                throw new ArgumentNullException(nameof(minStars), "Property is not nullable for class Service.");

            if (maxStars.IsSet && maxStars.Value == null)
                throw new ArgumentNullException(nameof(maxStars), "Property is not nullable for class Service.");

            return new Service(name.Value!, type.Value!.Value!, typePretty.Value!, serviceKey.Value!, starShape, minStars, maxStars);
        }

        /// <summary>
        /// Serializes a <see cref="Service" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="service"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Service service, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, service, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Service" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="service"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Service service, JsonSerializerOptions jsonSerializerOptions)
        {
            if (service.Name == null)
                throw new ArgumentNullException(nameof(service.Name), "Property is required for class Service.");

            if (service.TypePretty == null)
                throw new ArgumentNullException(nameof(service.TypePretty), "Property is required for class Service.");

            if (service.ServiceKey == null)
                throw new ArgumentNullException(nameof(service.ServiceKey), "Property is required for class Service.");

            if (service.StarShapeOption.IsSet && service.StarShape == null)
                throw new ArgumentNullException(nameof(service.StarShape), "Property is required for class Service.");

            writer.WriteString("name", service.Name);

            writer.WriteNumber("type", service.Type);

            writer.WriteString("type_pretty", service.TypePretty);

            writer.WriteString("service_key", service.ServiceKey);

            if (service.StarShapeOption.IsSet)
                writer.WriteString("star_shape", service.StarShape);

            if (service.MinStarsOption.IsSet)
                writer.WriteNumber("min_stars", service.MinStarsOption.Value!.Value);

            if (service.MaxStarsOption.IsSet)
                writer.WriteNumber("max_stars", service.MaxStarsOption.Value!.Value);
        }
    }

    /// <summary>
    /// The ServiceSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Service))]
    public partial class ServiceSerializationContext : JsonSerializerContext { }
}
