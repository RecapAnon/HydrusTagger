// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// JobStatus
    /// </summary>
    public partial class JobStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatus" /> class.
        /// </summary>
        /// <param name="key">Hex key identifying the job status.</param>
        /// <param name="creationTime">UNIX timestamp when the job status was created.</param>
        /// <param name="statusTitle">Title for the job status.</param>
        /// <param name="statusText1">First line of body text.</param>
        /// <param name="statusText2">Second line of body text.</param>
        /// <param name="hadError">Whether the job status has an error.</param>
        /// <param name="traceback">Traceback text if an error occurred.</param>
        /// <param name="isCancellable">Whether the job can be canceled.</param>
        /// <param name="isCancelled">Whether the job has been canceled.</param>
        /// <param name="isDeleted">Whether the job status has been dismissed but not removed.</param>
        /// <param name="isPausable">Whether the job can be paused.</param>
        /// <param name="isPaused">Whether the job is currently paused.</param>
        /// <param name="isWorking">Whether the job is currently working.</param>
        /// <param name="niceString">Human-readable representation of the job status.</param>
        /// <param name="attachedFilesMergable">Whether files in the job can be merged with another job.</param>
        /// <param name="popupGauge1">Progress bar values [current, max].</param>
        /// <param name="popupGauge2">Progress bar values [current, max].</param>
        /// <param name="apiData">Arbitrary data for API clients.</param>
        /// <param name="files">files</param>
        /// <param name="userCallableLabel">Label for the button to trigger a user callable function.</param>
        /// <param name="networkJob">networkJob</param>
        [JsonConstructor]
        public JobStatus(string key, float creationTime, Option<string?> statusTitle = default, Option<string?> statusText1 = default, Option<string?> statusText2 = default, Option<bool?> hadError = default, Option<string?> traceback = default, Option<bool?> isCancellable = default, Option<bool?> isCancelled = default, Option<bool?> isDeleted = default, Option<bool?> isPausable = default, Option<bool?> isPaused = default, Option<bool?> isWorking = default, Option<string?> niceString = default, Option<bool?> attachedFilesMergable = default, Option<List<decimal>?> popupGauge1 = default, Option<List<decimal>?> popupGauge2 = default, Option<Object?> apiData = default, Option<JobStatusFiles?> files = default, Option<string?> userCallableLabel = default, Option<JobStatusNetworkJob?> networkJob = default)
        {
            Key = key;
            CreationTime = creationTime;
            StatusTitleOption = statusTitle;
            StatusText1Option = statusText1;
            StatusText2Option = statusText2;
            HadErrorOption = hadError;
            TracebackOption = traceback;
            IsCancellableOption = isCancellable;
            IsCancelledOption = isCancelled;
            IsDeletedOption = isDeleted;
            IsPausableOption = isPausable;
            IsPausedOption = isPaused;
            IsWorkingOption = isWorking;
            NiceStringOption = niceString;
            AttachedFilesMergableOption = attachedFilesMergable;
            PopupGauge1Option = popupGauge1;
            PopupGauge2Option = popupGauge2;
            ApiDataOption = apiData;
            FilesOption = files;
            UserCallableLabelOption = userCallableLabel;
            NetworkJobOption = networkJob;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Hex key identifying the job status.
        /// </summary>
        /// <value>Hex key identifying the job status.</value>
        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// UNIX timestamp when the job status was created.
        /// </summary>
        /// <value>UNIX timestamp when the job status was created.</value>
        [JsonPropertyName("creation_time")]
        public float CreationTime { get; set; }

        /// <summary>
        /// Used to track the state of StatusTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusTitleOption { get; private set; }

        /// <summary>
        /// Title for the job status.
        /// </summary>
        /// <value>Title for the job status.</value>
        [JsonPropertyName("status_title")]
        public string? StatusTitle { get { return this.StatusTitleOption; } set { this.StatusTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusText1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusText1Option { get; private set; }

        /// <summary>
        /// First line of body text.
        /// </summary>
        /// <value>First line of body text.</value>
        [JsonPropertyName("status_text_1")]
        public string? StatusText1 { get { return this.StatusText1Option; } set { this.StatusText1Option = new(value); } }

        /// <summary>
        /// Used to track the state of StatusText2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusText2Option { get; private set; }

        /// <summary>
        /// Second line of body text.
        /// </summary>
        /// <value>Second line of body text.</value>
        [JsonPropertyName("status_text_2")]
        public string? StatusText2 { get { return this.StatusText2Option; } set { this.StatusText2Option = new(value); } }

        /// <summary>
        /// Used to track the state of HadError
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HadErrorOption { get; private set; }

        /// <summary>
        /// Whether the job status has an error.
        /// </summary>
        /// <value>Whether the job status has an error.</value>
        [JsonPropertyName("had_error")]
        public bool? HadError { get { return this.HadErrorOption; } set { this.HadErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Traceback
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TracebackOption { get; private set; }

        /// <summary>
        /// Traceback text if an error occurred.
        /// </summary>
        /// <value>Traceback text if an error occurred.</value>
        [JsonPropertyName("traceback")]
        public string? Traceback { get { return this.TracebackOption; } set { this.TracebackOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsCancellable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCancellableOption { get; private set; }

        /// <summary>
        /// Whether the job can be canceled.
        /// </summary>
        /// <value>Whether the job can be canceled.</value>
        [JsonPropertyName("is_cancellable")]
        public bool? IsCancellable { get { return this.IsCancellableOption; } set { this.IsCancellableOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsCancelled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCancelledOption { get; private set; }

        /// <summary>
        /// Whether the job has been canceled.
        /// </summary>
        /// <value>Whether the job has been canceled.</value>
        [JsonPropertyName("is_cancelled")]
        public bool? IsCancelled { get { return this.IsCancelledOption; } set { this.IsCancelledOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDeletedOption { get; private set; }

        /// <summary>
        /// Whether the job status has been dismissed but not removed.
        /// </summary>
        /// <value>Whether the job status has been dismissed but not removed.</value>
        [JsonPropertyName("is_deleted")]
        public bool? IsDeleted { get { return this.IsDeletedOption; } set { this.IsDeletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPausable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPausableOption { get; private set; }

        /// <summary>
        /// Whether the job can be paused.
        /// </summary>
        /// <value>Whether the job can be paused.</value>
        [JsonPropertyName("is_pausable")]
        public bool? IsPausable { get { return this.IsPausableOption; } set { this.IsPausableOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPaused
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPausedOption { get; private set; }

        /// <summary>
        /// Whether the job is currently paused.
        /// </summary>
        /// <value>Whether the job is currently paused.</value>
        [JsonPropertyName("is_paused")]
        public bool? IsPaused { get { return this.IsPausedOption; } set { this.IsPausedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsWorking
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsWorkingOption { get; private set; }

        /// <summary>
        /// Whether the job is currently working.
        /// </summary>
        /// <value>Whether the job is currently working.</value>
        [JsonPropertyName("is_working")]
        public bool? IsWorking { get { return this.IsWorkingOption; } set { this.IsWorkingOption = new(value); } }

        /// <summary>
        /// Used to track the state of NiceString
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NiceStringOption { get; private set; }

        /// <summary>
        /// Human-readable representation of the job status.
        /// </summary>
        /// <value>Human-readable representation of the job status.</value>
        [JsonPropertyName("nice_string")]
        public string? NiceString { get { return this.NiceStringOption; } set { this.NiceStringOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttachedFilesMergable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AttachedFilesMergableOption { get; private set; }

        /// <summary>
        /// Whether files in the job can be merged with another job.
        /// </summary>
        /// <value>Whether files in the job can be merged with another job.</value>
        [JsonPropertyName("attached_files_mergable")]
        public bool? AttachedFilesMergable { get { return this.AttachedFilesMergableOption; } set { this.AttachedFilesMergableOption = new(value); } }

        /// <summary>
        /// Used to track the state of PopupGauge1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<decimal>?> PopupGauge1Option { get; private set; }

        /// <summary>
        /// Progress bar values [current, max].
        /// </summary>
        /// <value>Progress bar values [current, max].</value>
        [JsonPropertyName("popup_gauge_1")]
        public List<decimal>? PopupGauge1 { get { return this.PopupGauge1Option; } set { this.PopupGauge1Option = new(value); } }

        /// <summary>
        /// Used to track the state of PopupGauge2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<decimal>?> PopupGauge2Option { get; private set; }

        /// <summary>
        /// Progress bar values [current, max].
        /// </summary>
        /// <value>Progress bar values [current, max].</value>
        [JsonPropertyName("popup_gauge_2")]
        public List<decimal>? PopupGauge2 { get { return this.PopupGauge2Option; } set { this.PopupGauge2Option = new(value); } }

        /// <summary>
        /// Used to track the state of ApiData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ApiDataOption { get; private set; }

        /// <summary>
        /// Arbitrary data for API clients.
        /// </summary>
        /// <value>Arbitrary data for API clients.</value>
        [JsonPropertyName("api_data")]
        public Object? ApiData { get { return this.ApiDataOption; } set { this.ApiDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Files
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<JobStatusFiles?> FilesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [JsonPropertyName("files")]
        public JobStatusFiles? Files { get { return this.FilesOption; } set { this.FilesOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserCallableLabel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserCallableLabelOption { get; private set; }

        /// <summary>
        /// Label for the button to trigger a user callable function.
        /// </summary>
        /// <value>Label for the button to trigger a user callable function.</value>
        [JsonPropertyName("user_callable_label")]
        public string? UserCallableLabel { get { return this.UserCallableLabelOption; } set { this.UserCallableLabelOption = new(value); } }

        /// <summary>
        /// Used to track the state of NetworkJob
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<JobStatusNetworkJob?> NetworkJobOption { get; private set; }

        /// <summary>
        /// Gets or Sets NetworkJob
        /// </summary>
        [JsonPropertyName("network_job")]
        public JobStatusNetworkJob? NetworkJob { get { return this.NetworkJobOption; } set { this.NetworkJobOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobStatus {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  StatusTitle: ").Append(StatusTitle).Append("\n");
            sb.Append("  StatusText1: ").Append(StatusText1).Append("\n");
            sb.Append("  StatusText2: ").Append(StatusText2).Append("\n");
            sb.Append("  HadError: ").Append(HadError).Append("\n");
            sb.Append("  Traceback: ").Append(Traceback).Append("\n");
            sb.Append("  IsCancellable: ").Append(IsCancellable).Append("\n");
            sb.Append("  IsCancelled: ").Append(IsCancelled).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsPausable: ").Append(IsPausable).Append("\n");
            sb.Append("  IsPaused: ").Append(IsPaused).Append("\n");
            sb.Append("  IsWorking: ").Append(IsWorking).Append("\n");
            sb.Append("  NiceString: ").Append(NiceString).Append("\n");
            sb.Append("  AttachedFilesMergable: ").Append(AttachedFilesMergable).Append("\n");
            sb.Append("  PopupGauge1: ").Append(PopupGauge1).Append("\n");
            sb.Append("  PopupGauge2: ").Append(PopupGauge2).Append("\n");
            sb.Append("  ApiData: ").Append(ApiData).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  UserCallableLabel: ").Append(UserCallableLabel).Append("\n");
            sb.Append("  NetworkJob: ").Append(NetworkJob).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobStatus" />
    /// </summary>
    public class JobStatusJsonConverter : JsonConverter<JobStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="JobStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override JobStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> key = default;
            Option<float?> creationTime = default;
            Option<string?> statusTitle = default;
            Option<string?> statusText1 = default;
            Option<string?> statusText2 = default;
            Option<bool?> hadError = default;
            Option<string?> traceback = default;
            Option<bool?> isCancellable = default;
            Option<bool?> isCancelled = default;
            Option<bool?> isDeleted = default;
            Option<bool?> isPausable = default;
            Option<bool?> isPaused = default;
            Option<bool?> isWorking = default;
            Option<string?> niceString = default;
            Option<bool?> attachedFilesMergable = default;
            Option<List<decimal>?> popupGauge1 = default;
            Option<List<decimal>?> popupGauge2 = default;
            Option<Object?> apiData = default;
            Option<JobStatusFiles?> files = default;
            Option<string?> userCallableLabel = default;
            Option<JobStatusNetworkJob?> networkJob = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creation_time":
                            creationTime = new Option<float?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (float?)null : (float)utf8JsonReader.GetDouble());
                            break;
                        case "status_title":
                            statusTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status_text_1":
                            statusText1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status_text_2":
                            statusText2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "had_error":
                            hadError = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "traceback":
                            traceback = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_cancellable":
                            isCancellable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_cancelled":
                            isCancelled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_deleted":
                            isDeleted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_pausable":
                            isPausable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_paused":
                            isPaused = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_working":
                            isWorking = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "nice_string":
                            niceString = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attached_files_mergable":
                            attachedFilesMergable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "popup_gauge_1":
                            popupGauge1 = new Option<List<decimal>?>(JsonSerializer.Deserialize<List<decimal>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "popup_gauge_2":
                            popupGauge2 = new Option<List<decimal>?>(JsonSerializer.Deserialize<List<decimal>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "api_data":
                            apiData = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "files":
                            files = new Option<JobStatusFiles?>(JsonSerializer.Deserialize<JobStatusFiles>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "user_callable_label":
                            userCallableLabel = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "network_job":
                            networkJob = new Option<JobStatusNetworkJob?>(JsonSerializer.Deserialize<JobStatusNetworkJob>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!key.IsSet)
                throw new ArgumentException("Property is required for class JobStatus.", nameof(key));

            if (!creationTime.IsSet)
                throw new ArgumentException("Property is required for class JobStatus.", nameof(creationTime));

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class JobStatus.");

            if (creationTime.IsSet && creationTime.Value == null)
                throw new ArgumentNullException(nameof(creationTime), "Property is not nullable for class JobStatus.");

            if (statusTitle.IsSet && statusTitle.Value == null)
                throw new ArgumentNullException(nameof(statusTitle), "Property is not nullable for class JobStatus.");

            if (statusText1.IsSet && statusText1.Value == null)
                throw new ArgumentNullException(nameof(statusText1), "Property is not nullable for class JobStatus.");

            if (statusText2.IsSet && statusText2.Value == null)
                throw new ArgumentNullException(nameof(statusText2), "Property is not nullable for class JobStatus.");

            if (hadError.IsSet && hadError.Value == null)
                throw new ArgumentNullException(nameof(hadError), "Property is not nullable for class JobStatus.");

            if (traceback.IsSet && traceback.Value == null)
                throw new ArgumentNullException(nameof(traceback), "Property is not nullable for class JobStatus.");

            if (isCancellable.IsSet && isCancellable.Value == null)
                throw new ArgumentNullException(nameof(isCancellable), "Property is not nullable for class JobStatus.");

            if (isCancelled.IsSet && isCancelled.Value == null)
                throw new ArgumentNullException(nameof(isCancelled), "Property is not nullable for class JobStatus.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class JobStatus.");

            if (isPausable.IsSet && isPausable.Value == null)
                throw new ArgumentNullException(nameof(isPausable), "Property is not nullable for class JobStatus.");

            if (isPaused.IsSet && isPaused.Value == null)
                throw new ArgumentNullException(nameof(isPaused), "Property is not nullable for class JobStatus.");

            if (isWorking.IsSet && isWorking.Value == null)
                throw new ArgumentNullException(nameof(isWorking), "Property is not nullable for class JobStatus.");

            if (niceString.IsSet && niceString.Value == null)
                throw new ArgumentNullException(nameof(niceString), "Property is not nullable for class JobStatus.");

            if (attachedFilesMergable.IsSet && attachedFilesMergable.Value == null)
                throw new ArgumentNullException(nameof(attachedFilesMergable), "Property is not nullable for class JobStatus.");

            if (popupGauge1.IsSet && popupGauge1.Value == null)
                throw new ArgumentNullException(nameof(popupGauge1), "Property is not nullable for class JobStatus.");

            if (popupGauge2.IsSet && popupGauge2.Value == null)
                throw new ArgumentNullException(nameof(popupGauge2), "Property is not nullable for class JobStatus.");

            if (apiData.IsSet && apiData.Value == null)
                throw new ArgumentNullException(nameof(apiData), "Property is not nullable for class JobStatus.");

            if (files.IsSet && files.Value == null)
                throw new ArgumentNullException(nameof(files), "Property is not nullable for class JobStatus.");

            if (userCallableLabel.IsSet && userCallableLabel.Value == null)
                throw new ArgumentNullException(nameof(userCallableLabel), "Property is not nullable for class JobStatus.");

            if (networkJob.IsSet && networkJob.Value == null)
                throw new ArgumentNullException(nameof(networkJob), "Property is not nullable for class JobStatus.");

            return new JobStatus(key.Value!, creationTime.Value!.Value!, statusTitle, statusText1, statusText2, hadError, traceback, isCancellable, isCancelled, isDeleted, isPausable, isPaused, isWorking, niceString, attachedFilesMergable, popupGauge1, popupGauge2, apiData, files, userCallableLabel, networkJob);
        }

        /// <summary>
        /// Serializes a <see cref="JobStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, JobStatus jobStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, jobStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="JobStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, JobStatus jobStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            if (jobStatus.Key == null)
                throw new ArgumentNullException(nameof(jobStatus.Key), "Property is required for class JobStatus.");

            if (jobStatus.StatusTitleOption.IsSet && jobStatus.StatusTitle == null)
                throw new ArgumentNullException(nameof(jobStatus.StatusTitle), "Property is required for class JobStatus.");

            if (jobStatus.StatusText1Option.IsSet && jobStatus.StatusText1 == null)
                throw new ArgumentNullException(nameof(jobStatus.StatusText1), "Property is required for class JobStatus.");

            if (jobStatus.StatusText2Option.IsSet && jobStatus.StatusText2 == null)
                throw new ArgumentNullException(nameof(jobStatus.StatusText2), "Property is required for class JobStatus.");

            if (jobStatus.TracebackOption.IsSet && jobStatus.Traceback == null)
                throw new ArgumentNullException(nameof(jobStatus.Traceback), "Property is required for class JobStatus.");

            if (jobStatus.NiceStringOption.IsSet && jobStatus.NiceString == null)
                throw new ArgumentNullException(nameof(jobStatus.NiceString), "Property is required for class JobStatus.");

            if (jobStatus.PopupGauge1Option.IsSet && jobStatus.PopupGauge1 == null)
                throw new ArgumentNullException(nameof(jobStatus.PopupGauge1), "Property is required for class JobStatus.");

            if (jobStatus.PopupGauge2Option.IsSet && jobStatus.PopupGauge2 == null)
                throw new ArgumentNullException(nameof(jobStatus.PopupGauge2), "Property is required for class JobStatus.");

            if (jobStatus.ApiDataOption.IsSet && jobStatus.ApiData == null)
                throw new ArgumentNullException(nameof(jobStatus.ApiData), "Property is required for class JobStatus.");

            if (jobStatus.FilesOption.IsSet && jobStatus.Files == null)
                throw new ArgumentNullException(nameof(jobStatus.Files), "Property is required for class JobStatus.");

            if (jobStatus.UserCallableLabelOption.IsSet && jobStatus.UserCallableLabel == null)
                throw new ArgumentNullException(nameof(jobStatus.UserCallableLabel), "Property is required for class JobStatus.");

            if (jobStatus.NetworkJobOption.IsSet && jobStatus.NetworkJob == null)
                throw new ArgumentNullException(nameof(jobStatus.NetworkJob), "Property is required for class JobStatus.");

            writer.WriteString("key", jobStatus.Key);

            writer.WriteNumber("creation_time", jobStatus.CreationTime);

            if (jobStatus.StatusTitleOption.IsSet)
                writer.WriteString("status_title", jobStatus.StatusTitle);

            if (jobStatus.StatusText1Option.IsSet)
                writer.WriteString("status_text_1", jobStatus.StatusText1);

            if (jobStatus.StatusText2Option.IsSet)
                writer.WriteString("status_text_2", jobStatus.StatusText2);

            if (jobStatus.HadErrorOption.IsSet)
                writer.WriteBoolean("had_error", jobStatus.HadErrorOption.Value!.Value);

            if (jobStatus.TracebackOption.IsSet)
                writer.WriteString("traceback", jobStatus.Traceback);

            if (jobStatus.IsCancellableOption.IsSet)
                writer.WriteBoolean("is_cancellable", jobStatus.IsCancellableOption.Value!.Value);

            if (jobStatus.IsCancelledOption.IsSet)
                writer.WriteBoolean("is_cancelled", jobStatus.IsCancelledOption.Value!.Value);

            if (jobStatus.IsDeletedOption.IsSet)
                writer.WriteBoolean("is_deleted", jobStatus.IsDeletedOption.Value!.Value);

            if (jobStatus.IsPausableOption.IsSet)
                writer.WriteBoolean("is_pausable", jobStatus.IsPausableOption.Value!.Value);

            if (jobStatus.IsPausedOption.IsSet)
                writer.WriteBoolean("is_paused", jobStatus.IsPausedOption.Value!.Value);

            if (jobStatus.IsWorkingOption.IsSet)
                writer.WriteBoolean("is_working", jobStatus.IsWorkingOption.Value!.Value);

            if (jobStatus.NiceStringOption.IsSet)
                writer.WriteString("nice_string", jobStatus.NiceString);

            if (jobStatus.AttachedFilesMergableOption.IsSet)
                writer.WriteBoolean("attached_files_mergable", jobStatus.AttachedFilesMergableOption.Value!.Value);

            if (jobStatus.PopupGauge1Option.IsSet)
            {
                writer.WritePropertyName("popup_gauge_1");
                JsonSerializer.Serialize(writer, jobStatus.PopupGauge1, jsonSerializerOptions);
            }
            if (jobStatus.PopupGauge2Option.IsSet)
            {
                writer.WritePropertyName("popup_gauge_2");
                JsonSerializer.Serialize(writer, jobStatus.PopupGauge2, jsonSerializerOptions);
            }
            if (jobStatus.ApiDataOption.IsSet)
            {
                writer.WritePropertyName("api_data");
                JsonSerializer.Serialize(writer, jobStatus.ApiData, jsonSerializerOptions);
            }
            if (jobStatus.FilesOption.IsSet)
            {
                writer.WritePropertyName("files");
                JsonSerializer.Serialize(writer, jobStatus.Files, jsonSerializerOptions);
            }
            if (jobStatus.UserCallableLabelOption.IsSet)
                writer.WriteString("user_callable_label", jobStatus.UserCallableLabel);

            if (jobStatus.NetworkJobOption.IsSet)
            {
                writer.WritePropertyName("network_job");
                JsonSerializer.Serialize(writer, jobStatus.NetworkJob, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The JobStatusSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(JobStatus))]
    public partial class JobStatusSerializationContext : JsonSerializerContext { }
}
