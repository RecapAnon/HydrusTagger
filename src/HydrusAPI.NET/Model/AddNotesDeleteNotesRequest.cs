// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// AddNotesDeleteNotesRequest
    /// </summary>
    public partial class AddNotesDeleteNotesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddNotesDeleteNotesRequest" /> class.
        /// </summary>
        /// <param name="noteNames">A list of note names to delete from the file.</param>
        /// <param name="hash">SHA256 hash of the file (64 hexadecimal characters).</param>
        /// <param name="fileId">Numerical identifier for the file.</param>
        [JsonConstructor]
        public AddNotesDeleteNotesRequest(Option<List<string>?> noteNames = default, Option<string?> hash = default, Option<int?> fileId = default)
        {
            NoteNamesOption = noteNames;
            HashOption = hash;
            FileIdOption = fileId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of NoteNames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> NoteNamesOption { get; private set; }

        /// <summary>
        /// A list of note names to delete from the file.
        /// </summary>
        /// <value>A list of note names to delete from the file.</value>
        [JsonPropertyName("note_names")]
        public List<string>? NoteNames { get { return this.NoteNamesOption; } set { this.NoteNamesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// SHA256 hash of the file (64 hexadecimal characters).
        /// </summary>
        /// <value>SHA256 hash of the file (64 hexadecimal characters).</value>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileIdOption { get; private set; }

        /// <summary>
        /// Numerical identifier for the file.
        /// </summary>
        /// <value>Numerical identifier for the file.</value>
        [JsonPropertyName("file_id")]
        public int? FileId { get { return this.FileIdOption; } set { this.FileIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddNotesDeleteNotesRequest {\n");
            sb.Append("  NoteNames: ").Append(NoteNames).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.HashOption.Value != null) {
                // Hash (string) pattern
                Regex regexHash = new Regex(@"^[a-fA-F0-9]{64}$", RegexOptions.CultureInvariant);

                if (this.HashOption.Value != null &&!regexHash.Match(this.HashOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, must match a pattern of " + regexHash, new [] { "Hash" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddNotesDeleteNotesRequest" />
    /// </summary>
    public class AddNotesDeleteNotesRequestJsonConverter : JsonConverter<AddNotesDeleteNotesRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddNotesDeleteNotesRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddNotesDeleteNotesRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> noteNames = default;
            Option<string?> hash = default;
            Option<int?> fileId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "note_names":
                            noteNames = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "file_id":
                            fileId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (noteNames.IsSet && noteNames.Value == null)
                throw new ArgumentNullException(nameof(noteNames), "Property is not nullable for class AddNotesDeleteNotesRequest.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class AddNotesDeleteNotesRequest.");

            if (fileId.IsSet && fileId.Value == null)
                throw new ArgumentNullException(nameof(fileId), "Property is not nullable for class AddNotesDeleteNotesRequest.");

            return new AddNotesDeleteNotesRequest(noteNames, hash, fileId);
        }

        /// <summary>
        /// Serializes a <see cref="AddNotesDeleteNotesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addNotesDeleteNotesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddNotesDeleteNotesRequest addNotesDeleteNotesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addNotesDeleteNotesRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddNotesDeleteNotesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addNotesDeleteNotesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddNotesDeleteNotesRequest addNotesDeleteNotesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addNotesDeleteNotesRequest.NoteNamesOption.IsSet && addNotesDeleteNotesRequest.NoteNames == null)
                throw new ArgumentNullException(nameof(addNotesDeleteNotesRequest.NoteNames), "Property is required for class AddNotesDeleteNotesRequest.");

            if (addNotesDeleteNotesRequest.HashOption.IsSet && addNotesDeleteNotesRequest.Hash == null)
                throw new ArgumentNullException(nameof(addNotesDeleteNotesRequest.Hash), "Property is required for class AddNotesDeleteNotesRequest.");

            if (addNotesDeleteNotesRequest.NoteNamesOption.IsSet)
            {
                writer.WritePropertyName("note_names");
                JsonSerializer.Serialize(writer, addNotesDeleteNotesRequest.NoteNames, jsonSerializerOptions);
            }
            if (addNotesDeleteNotesRequest.HashOption.IsSet)
                writer.WriteString("hash", addNotesDeleteNotesRequest.Hash);

            if (addNotesDeleteNotesRequest.FileIdOption.IsSet)
                writer.WriteNumber("file_id", addNotesDeleteNotesRequest.FileIdOption.Value!.Value);
        }
    }

    /// <summary>
    /// The AddNotesDeleteNotesRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddNotesDeleteNotesRequest))]
    public partial class AddNotesDeleteNotesRequestSerializationContext : JsonSerializerContext { }
}
