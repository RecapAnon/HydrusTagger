// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// VerifyAccessKey200Response
    /// </summary>
    public partial class VerifyAccessKey200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyAccessKey200Response" /> class.
        /// </summary>
        /// <param name="name">The name of the access key&#39;s permissions profile.</param>
        /// <param name="permitsEverything">Whether the key grants full access to all API functions.</param>
        /// <param name="basicPermissions">List of permission codes the key grants.</param>
        /// <param name="humanDescription">A human-readable description of the permissions granted.</param>
        [JsonConstructor]
        public VerifyAccessKey200Response(Option<string?> name = default, Option<bool?> permitsEverything = default, Option<List<int>?> basicPermissions = default, Option<string?> humanDescription = default)
        {
            NameOption = name;
            PermitsEverythingOption = permitsEverything;
            BasicPermissionsOption = basicPermissions;
            HumanDescriptionOption = humanDescription;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the access key&#39;s permissions profile.
        /// </summary>
        /// <value>The name of the access key&#39;s permissions profile.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of PermitsEverything
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PermitsEverythingOption { get; private set; }

        /// <summary>
        /// Whether the key grants full access to all API functions.
        /// </summary>
        /// <value>Whether the key grants full access to all API functions.</value>
        [JsonPropertyName("permits_everything")]
        public bool? PermitsEverything { get { return this.PermitsEverythingOption; } set { this.PermitsEverythingOption = new(value); } }

        /// <summary>
        /// Used to track the state of BasicPermissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> BasicPermissionsOption { get; private set; }

        /// <summary>
        /// List of permission codes the key grants.
        /// </summary>
        /// <value>List of permission codes the key grants.</value>
        [JsonPropertyName("basic_permissions")]
        public List<int>? BasicPermissions { get { return this.BasicPermissionsOption; } set { this.BasicPermissionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of HumanDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HumanDescriptionOption { get; private set; }

        /// <summary>
        /// A human-readable description of the permissions granted.
        /// </summary>
        /// <value>A human-readable description of the permissions granted.</value>
        [JsonPropertyName("human_description")]
        public string? HumanDescription { get { return this.HumanDescriptionOption; } set { this.HumanDescriptionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyAccessKey200Response {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PermitsEverything: ").Append(PermitsEverything).Append("\n");
            sb.Append("  BasicPermissions: ").Append(BasicPermissions).Append("\n");
            sb.Append("  HumanDescription: ").Append(HumanDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VerifyAccessKey200Response" />
    /// </summary>
    public class VerifyAccessKey200ResponseJsonConverter : JsonConverter<VerifyAccessKey200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="VerifyAccessKey200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VerifyAccessKey200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<bool?> permitsEverything = default;
            Option<List<int>?> basicPermissions = default;
            Option<string?> humanDescription = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "permits_everything":
                            permitsEverything = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "basic_permissions":
                            basicPermissions = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "human_description":
                            humanDescription = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class VerifyAccessKey200Response.");

            if (permitsEverything.IsSet && permitsEverything.Value == null)
                throw new ArgumentNullException(nameof(permitsEverything), "Property is not nullable for class VerifyAccessKey200Response.");

            if (basicPermissions.IsSet && basicPermissions.Value == null)
                throw new ArgumentNullException(nameof(basicPermissions), "Property is not nullable for class VerifyAccessKey200Response.");

            if (humanDescription.IsSet && humanDescription.Value == null)
                throw new ArgumentNullException(nameof(humanDescription), "Property is not nullable for class VerifyAccessKey200Response.");

            return new VerifyAccessKey200Response(name, permitsEverything, basicPermissions, humanDescription);
        }

        /// <summary>
        /// Serializes a <see cref="VerifyAccessKey200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifyAccessKey200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VerifyAccessKey200Response verifyAccessKey200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, verifyAccessKey200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VerifyAccessKey200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifyAccessKey200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VerifyAccessKey200Response verifyAccessKey200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (verifyAccessKey200Response.NameOption.IsSet && verifyAccessKey200Response.Name == null)
                throw new ArgumentNullException(nameof(verifyAccessKey200Response.Name), "Property is required for class VerifyAccessKey200Response.");

            if (verifyAccessKey200Response.BasicPermissionsOption.IsSet && verifyAccessKey200Response.BasicPermissions == null)
                throw new ArgumentNullException(nameof(verifyAccessKey200Response.BasicPermissions), "Property is required for class VerifyAccessKey200Response.");

            if (verifyAccessKey200Response.HumanDescriptionOption.IsSet && verifyAccessKey200Response.HumanDescription == null)
                throw new ArgumentNullException(nameof(verifyAccessKey200Response.HumanDescription), "Property is required for class VerifyAccessKey200Response.");

            if (verifyAccessKey200Response.NameOption.IsSet)
                writer.WriteString("name", verifyAccessKey200Response.Name);

            if (verifyAccessKey200Response.PermitsEverythingOption.IsSet)
                writer.WriteBoolean("permits_everything", verifyAccessKey200Response.PermitsEverythingOption.Value!.Value);

            if (verifyAccessKey200Response.BasicPermissionsOption.IsSet)
            {
                writer.WritePropertyName("basic_permissions");
                JsonSerializer.Serialize(writer, verifyAccessKey200Response.BasicPermissions, jsonSerializerOptions);
            }
            if (verifyAccessKey200Response.HumanDescriptionOption.IsSet)
                writer.WriteString("human_description", verifyAccessKey200Response.HumanDescription);
        }
    }

    /// <summary>
    /// The VerifyAccessKey200ResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(VerifyAccessKey200Response))]
    public partial class VerifyAccessKey200ResponseSerializationContext : JsonSerializerContext { }
}
