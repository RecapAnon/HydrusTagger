// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// AddFilesAddFile200Response
    /// </summary>
    public partial class AddFilesAddFile200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddFilesAddFile200Response" /> class.
        /// </summary>
        /// <param name="status">The import status code.</param>
        /// <param name="hash">The SHA256 hash of the file in hexadecimal format.</param>
        /// <param name="note">Human-readable note related to the import result.</param>
        /// <param name="traceback">Present only on failure, contains debugging traceback.</param>
        [JsonConstructor]
        public AddFilesAddFile200Response(Option<StatusEnum?> status = default, Option<string?> hash = default, Option<string?> note = default, Option<string?> traceback = default)
        {
            StatusOption = status;
            HashOption = hash;
            NoteOption = note;
            TracebackOption = traceback;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The import status code.
        /// </summary>
        /// <value>The import status code.</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_7 for value: 7
            /// </summary>
            NUMBER_7 = 7
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals((1).ToString()))
                return StatusEnum.NUMBER_1;

            if (value.Equals((2).ToString()))
                return StatusEnum.NUMBER_2;

            if (value.Equals((3).ToString()))
                return StatusEnum.NUMBER_3;

            if (value.Equals((4).ToString()))
                return StatusEnum.NUMBER_4;

            if (value.Equals((7).ToString()))
                return StatusEnum.NUMBER_7;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals((1).ToString()))
                return StatusEnum.NUMBER_1;

            if (value.Equals((2).ToString()))
                return StatusEnum.NUMBER_2;

            if (value.Equals((3).ToString()))
                return StatusEnum.NUMBER_3;

            if (value.Equals((4).ToString()))
                return StatusEnum.NUMBER_4;

            if (value.Equals((7).ToString()))
                return StatusEnum.NUMBER_7;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static int StatusEnumToJsonValue(StatusEnum value)
        {
            return (int) value;
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// The import status code.
        /// </summary>
        /// <value>The import status code.</value>
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// The SHA256 hash of the file in hexadecimal format.
        /// </summary>
        /// <value>The SHA256 hash of the file in hexadecimal format.</value>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Note
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NoteOption { get; private set; }

        /// <summary>
        /// Human-readable note related to the import result.
        /// </summary>
        /// <value>Human-readable note related to the import result.</value>
        [JsonPropertyName("note")]
        public string? Note { get { return this.NoteOption; } set { this.NoteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Traceback
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TracebackOption { get; private set; }

        /// <summary>
        /// Present only on failure, contains debugging traceback.
        /// </summary>
        /// <value>Present only on failure, contains debugging traceback.</value>
        [JsonPropertyName("traceback")]
        public string? Traceback { get { return this.TracebackOption; } set { this.TracebackOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddFilesAddFile200Response {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Traceback: ").Append(Traceback).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddFilesAddFile200Response" />
    /// </summary>
    public class AddFilesAddFile200ResponseJsonConverter : JsonConverter<AddFilesAddFile200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddFilesAddFile200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddFilesAddFile200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AddFilesAddFile200Response.StatusEnum?> status = default;
            Option<string?> hash = default;
            Option<string?> note = default;
            Option<string?> traceback = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            status = new Option<AddFilesAddFile200Response.StatusEnum?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (AddFilesAddFile200Response.StatusEnum?)null : (AddFilesAddFile200Response.StatusEnum)utf8JsonReader.GetInt32());
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "note":
                            note = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "traceback":
                            traceback = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class AddFilesAddFile200Response.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class AddFilesAddFile200Response.");

            if (note.IsSet && note.Value == null)
                throw new ArgumentNullException(nameof(note), "Property is not nullable for class AddFilesAddFile200Response.");

            if (traceback.IsSet && traceback.Value == null)
                throw new ArgumentNullException(nameof(traceback), "Property is not nullable for class AddFilesAddFile200Response.");

            return new AddFilesAddFile200Response(status, hash, note, traceback);
        }

        /// <summary>
        /// Serializes a <see cref="AddFilesAddFile200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addFilesAddFile200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddFilesAddFile200Response addFilesAddFile200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addFilesAddFile200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddFilesAddFile200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addFilesAddFile200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddFilesAddFile200Response addFilesAddFile200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addFilesAddFile200Response.HashOption.IsSet && addFilesAddFile200Response.Hash == null)
                throw new ArgumentNullException(nameof(addFilesAddFile200Response.Hash), "Property is required for class AddFilesAddFile200Response.");

            if (addFilesAddFile200Response.NoteOption.IsSet && addFilesAddFile200Response.Note == null)
                throw new ArgumentNullException(nameof(addFilesAddFile200Response.Note), "Property is required for class AddFilesAddFile200Response.");

            if (addFilesAddFile200Response.TracebackOption.IsSet && addFilesAddFile200Response.Traceback == null)
                throw new ArgumentNullException(nameof(addFilesAddFile200Response.Traceback), "Property is required for class AddFilesAddFile200Response.");

            if (addFilesAddFile200Response.StatusOption.IsSet)
                writer.WriteNumber("status", AddFilesAddFile200Response.StatusEnumToJsonValue(addFilesAddFile200Response.StatusOption.Value!.Value));

            if (addFilesAddFile200Response.HashOption.IsSet)
                writer.WriteString("hash", addFilesAddFile200Response.Hash);

            if (addFilesAddFile200Response.NoteOption.IsSet)
                writer.WriteString("note", addFilesAddFile200Response.Note);

            if (addFilesAddFile200Response.TracebackOption.IsSet)
                writer.WriteString("traceback", addFilesAddFile200Response.Traceback);
        }
    }

    /// <summary>
    /// The AddFilesAddFile200ResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddFilesAddFile200Response))]
    public partial class AddFilesAddFile200ResponseSerializationContext : JsonSerializerContext { }
}
