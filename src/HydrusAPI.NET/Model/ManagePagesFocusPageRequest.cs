// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManagePagesFocusPageRequest
    /// </summary>
    public partial class ManagePagesFocusPageRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagePagesFocusPageRequest" /> class.
        /// </summary>
        /// <param name="pageKey">The key identifying the page to focus, obtained from /manage_pages/get_pages.</param>
        [JsonConstructor]
        public ManagePagesFocusPageRequest(Option<string?> pageKey = default)
        {
            PageKeyOption = pageKey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PageKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PageKeyOption { get; private set; }

        /// <summary>
        /// The key identifying the page to focus, obtained from /manage_pages/get_pages.
        /// </summary>
        /// <value>The key identifying the page to focus, obtained from /manage_pages/get_pages.</value>
        [JsonPropertyName("page_key")]
        public string? PageKey { get { return this.PageKeyOption; } set { this.PageKeyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagePagesFocusPageRequest {\n");
            sb.Append("  PageKey: ").Append(PageKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManagePagesFocusPageRequest" />
    /// </summary>
    public class ManagePagesFocusPageRequestJsonConverter : JsonConverter<ManagePagesFocusPageRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManagePagesFocusPageRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManagePagesFocusPageRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> pageKey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "page_key":
                            pageKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (pageKey.IsSet && pageKey.Value == null)
                throw new ArgumentNullException(nameof(pageKey), "Property is not nullable for class ManagePagesFocusPageRequest.");

            return new ManagePagesFocusPageRequest(pageKey);
        }

        /// <summary>
        /// Serializes a <see cref="ManagePagesFocusPageRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="managePagesFocusPageRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManagePagesFocusPageRequest managePagesFocusPageRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, managePagesFocusPageRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManagePagesFocusPageRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="managePagesFocusPageRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManagePagesFocusPageRequest managePagesFocusPageRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (managePagesFocusPageRequest.PageKeyOption.IsSet && managePagesFocusPageRequest.PageKey == null)
                throw new ArgumentNullException(nameof(managePagesFocusPageRequest.PageKey), "Property is required for class ManagePagesFocusPageRequest.");

            if (managePagesFocusPageRequest.PageKeyOption.IsSet)
                writer.WriteString("page_key", managePagesFocusPageRequest.PageKey);
        }
    }

    /// <summary>
    /// The ManagePagesFocusPageRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManagePagesFocusPageRequest))]
    public partial class ManagePagesFocusPageRequestSerializationContext : JsonSerializerContext { }
}
