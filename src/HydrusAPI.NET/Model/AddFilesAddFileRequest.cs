// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// AddFilesAddFileRequest
    /// </summary>
    public partial class AddFilesAddFileRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddFilesAddFileRequest" /> class.
        /// </summary>
        /// <param name="path">The filesystem path to the file to import.</param>
        /// <param name="deleteAfterSuccessfulImport">Optional. Whether to delete the source file after a successful import. Defaults to false.</param>
        /// <param name="fileServiceKey">Optional. The hexadecimal key of a local file domain to import the file into.</param>
        /// <param name="fileServiceKeys">Optional. A list of hexadecimal keys of local file domains to import the file into.</param>
        [JsonConstructor]
        public AddFilesAddFileRequest(Option<string?> path = default, Option<bool?> deleteAfterSuccessfulImport = default, Option<string?> fileServiceKey = default, Option<List<string>?> fileServiceKeys = default)
        {
            PathOption = path;
            DeleteAfterSuccessfulImportOption = deleteAfterSuccessfulImport;
            FileServiceKeyOption = fileServiceKey;
            FileServiceKeysOption = fileServiceKeys;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// The filesystem path to the file to import.
        /// </summary>
        /// <value>The filesystem path to the file to import.</value>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeleteAfterSuccessfulImport
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeleteAfterSuccessfulImportOption { get; private set; }

        /// <summary>
        /// Optional. Whether to delete the source file after a successful import. Defaults to false.
        /// </summary>
        /// <value>Optional. Whether to delete the source file after a successful import. Defaults to false.</value>
        [JsonPropertyName("delete_after_successful_import")]
        public bool? DeleteAfterSuccessfulImport { get { return this.DeleteAfterSuccessfulImportOption; } set { this.DeleteAfterSuccessfulImportOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileServiceKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileServiceKeyOption { get; private set; }

        /// <summary>
        /// Optional. The hexadecimal key of a local file domain to import the file into.
        /// </summary>
        /// <value>Optional. The hexadecimal key of a local file domain to import the file into.</value>
        [JsonPropertyName("file_service_key")]
        public string? FileServiceKey { get { return this.FileServiceKeyOption; } set { this.FileServiceKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileServiceKeys
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> FileServiceKeysOption { get; private set; }

        /// <summary>
        /// Optional. A list of hexadecimal keys of local file domains to import the file into.
        /// </summary>
        /// <value>Optional. A list of hexadecimal keys of local file domains to import the file into.</value>
        [JsonPropertyName("file_service_keys")]
        public List<string>? FileServiceKeys { get { return this.FileServiceKeysOption; } set { this.FileServiceKeysOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddFilesAddFileRequest {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  DeleteAfterSuccessfulImport: ").Append(DeleteAfterSuccessfulImport).Append("\n");
            sb.Append("  FileServiceKey: ").Append(FileServiceKey).Append("\n");
            sb.Append("  FileServiceKeys: ").Append(FileServiceKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddFilesAddFileRequest" />
    /// </summary>
    public class AddFilesAddFileRequestJsonConverter : JsonConverter<AddFilesAddFileRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddFilesAddFileRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddFilesAddFileRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> path = default;
            Option<bool?> deleteAfterSuccessfulImport = default;
            Option<string?> fileServiceKey = default;
            Option<List<string>?> fileServiceKeys = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "delete_after_successful_import":
                            deleteAfterSuccessfulImport = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "file_service_key":
                            fileServiceKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "file_service_keys":
                            fileServiceKeys = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class AddFilesAddFileRequest.");

            if (deleteAfterSuccessfulImport.IsSet && deleteAfterSuccessfulImport.Value == null)
                throw new ArgumentNullException(nameof(deleteAfterSuccessfulImport), "Property is not nullable for class AddFilesAddFileRequest.");

            if (fileServiceKey.IsSet && fileServiceKey.Value == null)
                throw new ArgumentNullException(nameof(fileServiceKey), "Property is not nullable for class AddFilesAddFileRequest.");

            if (fileServiceKeys.IsSet && fileServiceKeys.Value == null)
                throw new ArgumentNullException(nameof(fileServiceKeys), "Property is not nullable for class AddFilesAddFileRequest.");

            return new AddFilesAddFileRequest(path, deleteAfterSuccessfulImport, fileServiceKey, fileServiceKeys);
        }

        /// <summary>
        /// Serializes a <see cref="AddFilesAddFileRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addFilesAddFileRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddFilesAddFileRequest addFilesAddFileRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addFilesAddFileRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddFilesAddFileRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addFilesAddFileRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddFilesAddFileRequest addFilesAddFileRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addFilesAddFileRequest.PathOption.IsSet && addFilesAddFileRequest.Path == null)
                throw new ArgumentNullException(nameof(addFilesAddFileRequest.Path), "Property is required for class AddFilesAddFileRequest.");

            if (addFilesAddFileRequest.FileServiceKeyOption.IsSet && addFilesAddFileRequest.FileServiceKey == null)
                throw new ArgumentNullException(nameof(addFilesAddFileRequest.FileServiceKey), "Property is required for class AddFilesAddFileRequest.");

            if (addFilesAddFileRequest.FileServiceKeysOption.IsSet && addFilesAddFileRequest.FileServiceKeys == null)
                throw new ArgumentNullException(nameof(addFilesAddFileRequest.FileServiceKeys), "Property is required for class AddFilesAddFileRequest.");

            if (addFilesAddFileRequest.PathOption.IsSet)
                writer.WriteString("path", addFilesAddFileRequest.Path);

            if (addFilesAddFileRequest.DeleteAfterSuccessfulImportOption.IsSet)
                writer.WriteBoolean("delete_after_successful_import", addFilesAddFileRequest.DeleteAfterSuccessfulImportOption.Value!.Value);

            if (addFilesAddFileRequest.FileServiceKeyOption.IsSet)
                writer.WriteString("file_service_key", addFilesAddFileRequest.FileServiceKey);

            if (addFilesAddFileRequest.FileServiceKeysOption.IsSet)
            {
                writer.WritePropertyName("file_service_keys");
                JsonSerializer.Serialize(writer, addFilesAddFileRequest.FileServiceKeys, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The AddFilesAddFileRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddFilesAddFileRequest))]
    public partial class AddFilesAddFileRequestSerializationContext : JsonSerializerContext { }
}
