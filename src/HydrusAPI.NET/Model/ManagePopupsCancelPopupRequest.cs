// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManagePopupsCancelPopupRequest
    /// </summary>
    public partial class ManagePopupsCancelPopupRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagePopupsCancelPopupRequest" /> class.
        /// </summary>
        /// <param name="jobStatusKey">The job status key to cancel</param>
        [JsonConstructor]
        public ManagePopupsCancelPopupRequest(string jobStatusKey)
        {
            JobStatusKey = jobStatusKey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The job status key to cancel
        /// </summary>
        /// <value>The job status key to cancel</value>
        [JsonPropertyName("job_status_key")]
        public string JobStatusKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagePopupsCancelPopupRequest {\n");
            sb.Append("  JobStatusKey: ").Append(JobStatusKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManagePopupsCancelPopupRequest" />
    /// </summary>
    public class ManagePopupsCancelPopupRequestJsonConverter : JsonConverter<ManagePopupsCancelPopupRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManagePopupsCancelPopupRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManagePopupsCancelPopupRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> jobStatusKey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "job_status_key":
                            jobStatusKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!jobStatusKey.IsSet)
                throw new ArgumentException("Property is required for class ManagePopupsCancelPopupRequest.", nameof(jobStatusKey));

            if (jobStatusKey.IsSet && jobStatusKey.Value == null)
                throw new ArgumentNullException(nameof(jobStatusKey), "Property is not nullable for class ManagePopupsCancelPopupRequest.");

            return new ManagePopupsCancelPopupRequest(jobStatusKey.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ManagePopupsCancelPopupRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="managePopupsCancelPopupRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, managePopupsCancelPopupRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManagePopupsCancelPopupRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="managePopupsCancelPopupRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManagePopupsCancelPopupRequest managePopupsCancelPopupRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (managePopupsCancelPopupRequest.JobStatusKey == null)
                throw new ArgumentNullException(nameof(managePopupsCancelPopupRequest.JobStatusKey), "Property is required for class ManagePopupsCancelPopupRequest.");

            writer.WriteString("job_status_key", managePopupsCancelPopupRequest.JobStatusKey);
        }
    }

    /// <summary>
    /// The ManagePopupsCancelPopupRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManagePopupsCancelPopupRequest))]
    public partial class ManagePopupsCancelPopupRequestSerializationContext : JsonSerializerContext { }
}
