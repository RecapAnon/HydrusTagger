// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// GetLocalFileStorageLocations200ResponseLocationsInner
    /// </summary>
    public partial class GetLocalFileStorageLocations200ResponseLocationsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLocalFileStorageLocations200ResponseLocationsInner" /> class.
        /// </summary>
        /// <param name="path">The file system path of the storage location</param>
        /// <param name="idealWeight">A weight indicating the preferred storage balance (higher &#x3D; more files should be moved here)</param>
        /// <param name="maxNumBytes">Maximum number of bytes allowed in this location, or null if unlimited</param>
        /// <param name="prefixes">prefixes</param>
        [JsonConstructor]
        public GetLocalFileStorageLocations200ResponseLocationsInner(Option<string?> path = default, Option<int?> idealWeight = default, Option<int?> maxNumBytes = default, Option<List<string>?> prefixes = default)
        {
            PathOption = path;
            IdealWeightOption = idealWeight;
            MaxNumBytesOption = maxNumBytes;
            PrefixesOption = prefixes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// The file system path of the storage location
        /// </summary>
        /// <value>The file system path of the storage location</value>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdealWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdealWeightOption { get; private set; }

        /// <summary>
        /// A weight indicating the preferred storage balance (higher &#x3D; more files should be moved here)
        /// </summary>
        /// <value>A weight indicating the preferred storage balance (higher &#x3D; more files should be moved here)</value>
        [JsonPropertyName("ideal_weight")]
        public int? IdealWeight { get { return this.IdealWeightOption; } set { this.IdealWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxNumBytes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxNumBytesOption { get; private set; }

        /// <summary>
        /// Maximum number of bytes allowed in this location, or null if unlimited
        /// </summary>
        /// <value>Maximum number of bytes allowed in this location, or null if unlimited</value>
        [JsonPropertyName("max_num_bytes")]
        public int? MaxNumBytes { get { return this.MaxNumBytesOption; } set { this.MaxNumBytesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Prefixes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> PrefixesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Prefixes
        /// </summary>
        [JsonPropertyName("prefixes")]
        public List<string>? Prefixes { get { return this.PrefixesOption; } set { this.PrefixesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetLocalFileStorageLocations200ResponseLocationsInner {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  IdealWeight: ").Append(IdealWeight).Append("\n");
            sb.Append("  MaxNumBytes: ").Append(MaxNumBytes).Append("\n");
            sb.Append("  Prefixes: ").Append(Prefixes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetLocalFileStorageLocations200ResponseLocationsInner" />
    /// </summary>
    public class GetLocalFileStorageLocations200ResponseLocationsInnerJsonConverter : JsonConverter<GetLocalFileStorageLocations200ResponseLocationsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetLocalFileStorageLocations200ResponseLocationsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetLocalFileStorageLocations200ResponseLocationsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> path = default;
            Option<int?> idealWeight = default;
            Option<int?> maxNumBytes = default;
            Option<List<string>?> prefixes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ideal_weight":
                            idealWeight = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "max_num_bytes":
                            maxNumBytes = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "prefixes":
                            prefixes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class GetLocalFileStorageLocations200ResponseLocationsInner.");

            if (idealWeight.IsSet && idealWeight.Value == null)
                throw new ArgumentNullException(nameof(idealWeight), "Property is not nullable for class GetLocalFileStorageLocations200ResponseLocationsInner.");

            if (maxNumBytes.IsSet && maxNumBytes.Value == null)
                throw new ArgumentNullException(nameof(maxNumBytes), "Property is not nullable for class GetLocalFileStorageLocations200ResponseLocationsInner.");

            if (prefixes.IsSet && prefixes.Value == null)
                throw new ArgumentNullException(nameof(prefixes), "Property is not nullable for class GetLocalFileStorageLocations200ResponseLocationsInner.");

            return new GetLocalFileStorageLocations200ResponseLocationsInner(path, idealWeight, maxNumBytes, prefixes);
        }

        /// <summary>
        /// Serializes a <see cref="GetLocalFileStorageLocations200ResponseLocationsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getLocalFileStorageLocations200ResponseLocationsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetLocalFileStorageLocations200ResponseLocationsInner getLocalFileStorageLocations200ResponseLocationsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getLocalFileStorageLocations200ResponseLocationsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetLocalFileStorageLocations200ResponseLocationsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getLocalFileStorageLocations200ResponseLocationsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetLocalFileStorageLocations200ResponseLocationsInner getLocalFileStorageLocations200ResponseLocationsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getLocalFileStorageLocations200ResponseLocationsInner.PathOption.IsSet && getLocalFileStorageLocations200ResponseLocationsInner.Path == null)
                throw new ArgumentNullException(nameof(getLocalFileStorageLocations200ResponseLocationsInner.Path), "Property is required for class GetLocalFileStorageLocations200ResponseLocationsInner.");

            if (getLocalFileStorageLocations200ResponseLocationsInner.PrefixesOption.IsSet && getLocalFileStorageLocations200ResponseLocationsInner.Prefixes == null)
                throw new ArgumentNullException(nameof(getLocalFileStorageLocations200ResponseLocationsInner.Prefixes), "Property is required for class GetLocalFileStorageLocations200ResponseLocationsInner.");

            if (getLocalFileStorageLocations200ResponseLocationsInner.PathOption.IsSet)
                writer.WriteString("path", getLocalFileStorageLocations200ResponseLocationsInner.Path);

            if (getLocalFileStorageLocations200ResponseLocationsInner.IdealWeightOption.IsSet)
                writer.WriteNumber("ideal_weight", getLocalFileStorageLocations200ResponseLocationsInner.IdealWeightOption.Value!.Value);

            if (getLocalFileStorageLocations200ResponseLocationsInner.MaxNumBytesOption.IsSet)
                writer.WriteNumber("max_num_bytes", getLocalFileStorageLocations200ResponseLocationsInner.MaxNumBytesOption.Value!.Value);

            if (getLocalFileStorageLocations200ResponseLocationsInner.PrefixesOption.IsSet)
            {
                writer.WritePropertyName("prefixes");
                JsonSerializer.Serialize(writer, getLocalFileStorageLocations200ResponseLocationsInner.Prefixes, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The GetLocalFileStorageLocations200ResponseLocationsInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetLocalFileStorageLocations200ResponseLocationsInner))]
    public partial class GetLocalFileStorageLocations200ResponseLocationsInnerSerializationContext : JsonSerializerContext { }
}
