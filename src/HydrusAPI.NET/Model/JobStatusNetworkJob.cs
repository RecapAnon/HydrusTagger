// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// JobStatusNetworkJob
    /// </summary>
    public partial class JobStatusNetworkJob : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatusNetworkJob" /> class.
        /// </summary>
        /// <param name="url">URL being downloaded.</param>
        /// <param name="waitingOnConnectionError">Whether the job is waiting on a connection error.</param>
        /// <param name="domainOk">Whether the domain is acceptable.</param>
        /// <param name="waitingOnServersideBandwidth">Whether waiting on server-side bandwidth.</param>
        /// <param name="noEngineYet">Whether the job has no engine yet.</param>
        /// <param name="hasError">Whether the network job has an error.</param>
        /// <param name="totalDataUsed">Total number of bytes used in download.</param>
        /// <param name="isDone">Whether the job is done.</param>
        /// <param name="statusText">Status text for the job.</param>
        /// <param name="currentSpeed">Current speed in bytes per second.</param>
        /// <param name="bytesRead">Number of bytes read.</param>
        /// <param name="bytesToRead">Number of bytes to read.</param>
        [JsonConstructor]
        public JobStatusNetworkJob(Option<string?> url = default, Option<bool?> waitingOnConnectionError = default, Option<bool?> domainOk = default, Option<bool?> waitingOnServersideBandwidth = default, Option<bool?> noEngineYet = default, Option<bool?> hasError = default, Option<int?> totalDataUsed = default, Option<bool?> isDone = default, Option<string?> statusText = default, Option<int?> currentSpeed = default, Option<int?> bytesRead = default, Option<int?> bytesToRead = default)
        {
            UrlOption = url;
            WaitingOnConnectionErrorOption = waitingOnConnectionError;
            DomainOkOption = domainOk;
            WaitingOnServersideBandwidthOption = waitingOnServersideBandwidth;
            NoEngineYetOption = noEngineYet;
            HasErrorOption = hasError;
            TotalDataUsedOption = totalDataUsed;
            IsDoneOption = isDone;
            StatusTextOption = statusText;
            CurrentSpeedOption = currentSpeed;
            BytesReadOption = bytesRead;
            BytesToReadOption = bytesToRead;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// URL being downloaded.
        /// </summary>
        /// <value>URL being downloaded.</value>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitingOnConnectionError
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WaitingOnConnectionErrorOption { get; private set; }

        /// <summary>
        /// Whether the job is waiting on a connection error.
        /// </summary>
        /// <value>Whether the job is waiting on a connection error.</value>
        [JsonPropertyName("waiting_on_connection_error")]
        public bool? WaitingOnConnectionError { get { return this.WaitingOnConnectionErrorOption; } set { this.WaitingOnConnectionErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DomainOk
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DomainOkOption { get; private set; }

        /// <summary>
        /// Whether the domain is acceptable.
        /// </summary>
        /// <value>Whether the domain is acceptable.</value>
        [JsonPropertyName("domain_ok")]
        public bool? DomainOk { get { return this.DomainOkOption; } set { this.DomainOkOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitingOnServersideBandwidth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WaitingOnServersideBandwidthOption { get; private set; }

        /// <summary>
        /// Whether waiting on server-side bandwidth.
        /// </summary>
        /// <value>Whether waiting on server-side bandwidth.</value>
        [JsonPropertyName("waiting_on_serverside_bandwidth")]
        public bool? WaitingOnServersideBandwidth { get { return this.WaitingOnServersideBandwidthOption; } set { this.WaitingOnServersideBandwidthOption = new(value); } }

        /// <summary>
        /// Used to track the state of NoEngineYet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NoEngineYetOption { get; private set; }

        /// <summary>
        /// Whether the job has no engine yet.
        /// </summary>
        /// <value>Whether the job has no engine yet.</value>
        [JsonPropertyName("no_engine_yet")]
        public bool? NoEngineYet { get { return this.NoEngineYetOption; } set { this.NoEngineYetOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasError
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasErrorOption { get; private set; }

        /// <summary>
        /// Whether the network job has an error.
        /// </summary>
        /// <value>Whether the network job has an error.</value>
        [JsonPropertyName("has_error")]
        public bool? HasError { get { return this.HasErrorOption; } set { this.HasErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalDataUsed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalDataUsedOption { get; private set; }

        /// <summary>
        /// Total number of bytes used in download.
        /// </summary>
        /// <value>Total number of bytes used in download.</value>
        [JsonPropertyName("total_data_used")]
        public int? TotalDataUsed { get { return this.TotalDataUsedOption; } set { this.TotalDataUsedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDoneOption { get; private set; }

        /// <summary>
        /// Whether the job is done.
        /// </summary>
        /// <value>Whether the job is done.</value>
        [JsonPropertyName("is_done")]
        public bool? IsDone { get { return this.IsDoneOption; } set { this.IsDoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusTextOption { get; private set; }

        /// <summary>
        /// Status text for the job.
        /// </summary>
        /// <value>Status text for the job.</value>
        [JsonPropertyName("status_text")]
        public string? StatusText { get { return this.StatusTextOption; } set { this.StatusTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentSpeed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrentSpeedOption { get; private set; }

        /// <summary>
        /// Current speed in bytes per second.
        /// </summary>
        /// <value>Current speed in bytes per second.</value>
        [JsonPropertyName("current_speed")]
        public int? CurrentSpeed { get { return this.CurrentSpeedOption; } set { this.CurrentSpeedOption = new(value); } }

        /// <summary>
        /// Used to track the state of BytesRead
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BytesReadOption { get; private set; }

        /// <summary>
        /// Number of bytes read.
        /// </summary>
        /// <value>Number of bytes read.</value>
        [JsonPropertyName("bytes_read")]
        public int? BytesRead { get { return this.BytesReadOption; } set { this.BytesReadOption = new(value); } }

        /// <summary>
        /// Used to track the state of BytesToRead
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BytesToReadOption { get; private set; }

        /// <summary>
        /// Number of bytes to read.
        /// </summary>
        /// <value>Number of bytes to read.</value>
        [JsonPropertyName("bytes_to_read")]
        public int? BytesToRead { get { return this.BytesToReadOption; } set { this.BytesToReadOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobStatusNetworkJob {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  WaitingOnConnectionError: ").Append(WaitingOnConnectionError).Append("\n");
            sb.Append("  DomainOk: ").Append(DomainOk).Append("\n");
            sb.Append("  WaitingOnServersideBandwidth: ").Append(WaitingOnServersideBandwidth).Append("\n");
            sb.Append("  NoEngineYet: ").Append(NoEngineYet).Append("\n");
            sb.Append("  HasError: ").Append(HasError).Append("\n");
            sb.Append("  TotalDataUsed: ").Append(TotalDataUsed).Append("\n");
            sb.Append("  IsDone: ").Append(IsDone).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("  CurrentSpeed: ").Append(CurrentSpeed).Append("\n");
            sb.Append("  BytesRead: ").Append(BytesRead).Append("\n");
            sb.Append("  BytesToRead: ").Append(BytesToRead).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobStatusNetworkJob" />
    /// </summary>
    public class JobStatusNetworkJobJsonConverter : JsonConverter<JobStatusNetworkJob>
    {
        /// <summary>
        /// Deserializes json to <see cref="JobStatusNetworkJob" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override JobStatusNetworkJob Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> url = default;
            Option<bool?> waitingOnConnectionError = default;
            Option<bool?> domainOk = default;
            Option<bool?> waitingOnServersideBandwidth = default;
            Option<bool?> noEngineYet = default;
            Option<bool?> hasError = default;
            Option<int?> totalDataUsed = default;
            Option<bool?> isDone = default;
            Option<string?> statusText = default;
            Option<int?> currentSpeed = default;
            Option<int?> bytesRead = default;
            Option<int?> bytesToRead = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "waiting_on_connection_error":
                            waitingOnConnectionError = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "domain_ok":
                            domainOk = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "waiting_on_serverside_bandwidth":
                            waitingOnServersideBandwidth = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "no_engine_yet":
                            noEngineYet = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "has_error":
                            hasError = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "total_data_used":
                            totalDataUsed = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_done":
                            isDone = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "status_text":
                            statusText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "current_speed":
                            currentSpeed = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bytes_read":
                            bytesRead = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bytes_to_read":
                            bytesToRead = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class JobStatusNetworkJob.");

            if (waitingOnConnectionError.IsSet && waitingOnConnectionError.Value == null)
                throw new ArgumentNullException(nameof(waitingOnConnectionError), "Property is not nullable for class JobStatusNetworkJob.");

            if (domainOk.IsSet && domainOk.Value == null)
                throw new ArgumentNullException(nameof(domainOk), "Property is not nullable for class JobStatusNetworkJob.");

            if (waitingOnServersideBandwidth.IsSet && waitingOnServersideBandwidth.Value == null)
                throw new ArgumentNullException(nameof(waitingOnServersideBandwidth), "Property is not nullable for class JobStatusNetworkJob.");

            if (noEngineYet.IsSet && noEngineYet.Value == null)
                throw new ArgumentNullException(nameof(noEngineYet), "Property is not nullable for class JobStatusNetworkJob.");

            if (hasError.IsSet && hasError.Value == null)
                throw new ArgumentNullException(nameof(hasError), "Property is not nullable for class JobStatusNetworkJob.");

            if (totalDataUsed.IsSet && totalDataUsed.Value == null)
                throw new ArgumentNullException(nameof(totalDataUsed), "Property is not nullable for class JobStatusNetworkJob.");

            if (isDone.IsSet && isDone.Value == null)
                throw new ArgumentNullException(nameof(isDone), "Property is not nullable for class JobStatusNetworkJob.");

            if (statusText.IsSet && statusText.Value == null)
                throw new ArgumentNullException(nameof(statusText), "Property is not nullable for class JobStatusNetworkJob.");

            if (currentSpeed.IsSet && currentSpeed.Value == null)
                throw new ArgumentNullException(nameof(currentSpeed), "Property is not nullable for class JobStatusNetworkJob.");

            if (bytesRead.IsSet && bytesRead.Value == null)
                throw new ArgumentNullException(nameof(bytesRead), "Property is not nullable for class JobStatusNetworkJob.");

            if (bytesToRead.IsSet && bytesToRead.Value == null)
                throw new ArgumentNullException(nameof(bytesToRead), "Property is not nullable for class JobStatusNetworkJob.");

            return new JobStatusNetworkJob(url, waitingOnConnectionError, domainOk, waitingOnServersideBandwidth, noEngineYet, hasError, totalDataUsed, isDone, statusText, currentSpeed, bytesRead, bytesToRead);
        }

        /// <summary>
        /// Serializes a <see cref="JobStatusNetworkJob" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobStatusNetworkJob"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, JobStatusNetworkJob jobStatusNetworkJob, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, jobStatusNetworkJob, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="JobStatusNetworkJob" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobStatusNetworkJob"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, JobStatusNetworkJob jobStatusNetworkJob, JsonSerializerOptions jsonSerializerOptions)
        {
            if (jobStatusNetworkJob.UrlOption.IsSet && jobStatusNetworkJob.Url == null)
                throw new ArgumentNullException(nameof(jobStatusNetworkJob.Url), "Property is required for class JobStatusNetworkJob.");

            if (jobStatusNetworkJob.StatusTextOption.IsSet && jobStatusNetworkJob.StatusText == null)
                throw new ArgumentNullException(nameof(jobStatusNetworkJob.StatusText), "Property is required for class JobStatusNetworkJob.");

            if (jobStatusNetworkJob.UrlOption.IsSet)
                writer.WriteString("url", jobStatusNetworkJob.Url);

            if (jobStatusNetworkJob.WaitingOnConnectionErrorOption.IsSet)
                writer.WriteBoolean("waiting_on_connection_error", jobStatusNetworkJob.WaitingOnConnectionErrorOption.Value!.Value);

            if (jobStatusNetworkJob.DomainOkOption.IsSet)
                writer.WriteBoolean("domain_ok", jobStatusNetworkJob.DomainOkOption.Value!.Value);

            if (jobStatusNetworkJob.WaitingOnServersideBandwidthOption.IsSet)
                writer.WriteBoolean("waiting_on_serverside_bandwidth", jobStatusNetworkJob.WaitingOnServersideBandwidthOption.Value!.Value);

            if (jobStatusNetworkJob.NoEngineYetOption.IsSet)
                writer.WriteBoolean("no_engine_yet", jobStatusNetworkJob.NoEngineYetOption.Value!.Value);

            if (jobStatusNetworkJob.HasErrorOption.IsSet)
                writer.WriteBoolean("has_error", jobStatusNetworkJob.HasErrorOption.Value!.Value);

            if (jobStatusNetworkJob.TotalDataUsedOption.IsSet)
                writer.WriteNumber("total_data_used", jobStatusNetworkJob.TotalDataUsedOption.Value!.Value);

            if (jobStatusNetworkJob.IsDoneOption.IsSet)
                writer.WriteBoolean("is_done", jobStatusNetworkJob.IsDoneOption.Value!.Value);

            if (jobStatusNetworkJob.StatusTextOption.IsSet)
                writer.WriteString("status_text", jobStatusNetworkJob.StatusText);

            if (jobStatusNetworkJob.CurrentSpeedOption.IsSet)
                writer.WriteNumber("current_speed", jobStatusNetworkJob.CurrentSpeedOption.Value!.Value);

            if (jobStatusNetworkJob.BytesReadOption.IsSet)
                writer.WriteNumber("bytes_read", jobStatusNetworkJob.BytesReadOption.Value!.Value);

            if (jobStatusNetworkJob.BytesToReadOption.IsSet)
                writer.WriteNumber("bytes_to_read", jobStatusNetworkJob.BytesToReadOption.Value!.Value);
        }
    }

    /// <summary>
    /// The JobStatusNetworkJobSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(JobStatusNetworkJob))]
    public partial class JobStatusNetworkJobSerializationContext : JsonSerializerContext { }
}
