// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// AddUrlsAddUrl200Response
    /// </summary>
    public partial class AddUrlsAddUrl200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddUrlsAddUrl200Response" /> class.
        /// </summary>
        /// <param name="humanResultText">A human-readable result message.</param>
        /// <param name="normalisedUrl">The normalised URL.</param>
        [JsonConstructor]
        public AddUrlsAddUrl200Response(Option<string?> humanResultText = default, Option<string?> normalisedUrl = default)
        {
            HumanResultTextOption = humanResultText;
            NormalisedUrlOption = normalisedUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of HumanResultText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HumanResultTextOption { get; private set; }

        /// <summary>
        /// A human-readable result message.
        /// </summary>
        /// <value>A human-readable result message.</value>
        [JsonPropertyName("human_result_text")]
        public string? HumanResultText { get { return this.HumanResultTextOption; } set { this.HumanResultTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of NormalisedUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NormalisedUrlOption { get; private set; }

        /// <summary>
        /// The normalised URL.
        /// </summary>
        /// <value>The normalised URL.</value>
        [JsonPropertyName("normalised_url")]
        public string? NormalisedUrl { get { return this.NormalisedUrlOption; } set { this.NormalisedUrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddUrlsAddUrl200Response {\n");
            sb.Append("  HumanResultText: ").Append(HumanResultText).Append("\n");
            sb.Append("  NormalisedUrl: ").Append(NormalisedUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddUrlsAddUrl200Response" />
    /// </summary>
    public class AddUrlsAddUrl200ResponseJsonConverter : JsonConverter<AddUrlsAddUrl200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddUrlsAddUrl200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddUrlsAddUrl200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> humanResultText = default;
            Option<string?> normalisedUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "human_result_text":
                            humanResultText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "normalised_url":
                            normalisedUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (humanResultText.IsSet && humanResultText.Value == null)
                throw new ArgumentNullException(nameof(humanResultText), "Property is not nullable for class AddUrlsAddUrl200Response.");

            if (normalisedUrl.IsSet && normalisedUrl.Value == null)
                throw new ArgumentNullException(nameof(normalisedUrl), "Property is not nullable for class AddUrlsAddUrl200Response.");

            return new AddUrlsAddUrl200Response(humanResultText, normalisedUrl);
        }

        /// <summary>
        /// Serializes a <see cref="AddUrlsAddUrl200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addUrlsAddUrl200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddUrlsAddUrl200Response addUrlsAddUrl200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addUrlsAddUrl200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddUrlsAddUrl200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addUrlsAddUrl200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddUrlsAddUrl200Response addUrlsAddUrl200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addUrlsAddUrl200Response.HumanResultTextOption.IsSet && addUrlsAddUrl200Response.HumanResultText == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrl200Response.HumanResultText), "Property is required for class AddUrlsAddUrl200Response.");

            if (addUrlsAddUrl200Response.NormalisedUrlOption.IsSet && addUrlsAddUrl200Response.NormalisedUrl == null)
                throw new ArgumentNullException(nameof(addUrlsAddUrl200Response.NormalisedUrl), "Property is required for class AddUrlsAddUrl200Response.");

            if (addUrlsAddUrl200Response.HumanResultTextOption.IsSet)
                writer.WriteString("human_result_text", addUrlsAddUrl200Response.HumanResultText);

            if (addUrlsAddUrl200Response.NormalisedUrlOption.IsSet)
                writer.WriteString("normalised_url", addUrlsAddUrl200Response.NormalisedUrl);
        }
    }

    /// <summary>
    /// The AddUrlsAddUrl200ResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddUrlsAddUrl200Response))]
    public partial class AddUrlsAddUrl200ResponseSerializationContext : JsonSerializerContext { }
}
