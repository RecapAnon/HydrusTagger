// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManageHeadersSetHeadersRequestHeadersValue
    /// </summary>
    public partial class ManageHeadersSetHeadersRequestHeadersValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManageHeadersSetHeadersRequestHeadersValue" /> class.
        /// </summary>
        /// <param name="value">The value of the header. If null, deletes the header.</param>
        /// <param name="approved">Optional approval status for validation system.</param>
        /// <param name="reason">Optional reason for approval/denial.</param>
        [JsonConstructor]
        public ManageHeadersSetHeadersRequestHeadersValue(string value, Option<ApprovedEnum?> approved = default, Option<string?> reason = default)
        {
            Value = value;
            ApprovedOption = approved;
            ReasonOption = reason;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Optional approval status for validation system.
        /// </summary>
        /// <value>Optional approval status for validation system.</value>
        public enum ApprovedEnum
        {
            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            Approved = 1,

            /// <summary>
            /// Enum Denied for value: denied
            /// </summary>
            Denied = 2,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 3
        }

        /// <summary>
        /// Returns a <see cref="ApprovedEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ApprovedEnum ApprovedEnumFromString(string value)
        {
            if (value.Equals("approved"))
                return ApprovedEnum.Approved;

            if (value.Equals("denied"))
                return ApprovedEnum.Denied;

            if (value.Equals("pending"))
                return ApprovedEnum.Pending;

            throw new NotImplementedException($"Could not convert value to type ApprovedEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ApprovedEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ApprovedEnum? ApprovedEnumFromStringOrDefault(string value)
        {
            if (value.Equals("approved"))
                return ApprovedEnum.Approved;

            if (value.Equals("denied"))
                return ApprovedEnum.Denied;

            if (value.Equals("pending"))
                return ApprovedEnum.Pending;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ApprovedEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ApprovedEnumToJsonValue(ApprovedEnum? value)
        {
            if (value == ApprovedEnum.Approved)
                return "approved";

            if (value == ApprovedEnum.Denied)
                return "denied";

            if (value == ApprovedEnum.Pending)
                return "pending";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Approved
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApprovedEnum?> ApprovedOption { get; private set; }

        /// <summary>
        /// Optional approval status for validation system.
        /// </summary>
        /// <value>Optional approval status for validation system.</value>
        [JsonPropertyName("approved")]
        public ApprovedEnum? Approved { get { return this.ApprovedOption; } set { this.ApprovedOption = new(value); } }

        /// <summary>
        /// The value of the header. If null, deletes the header.
        /// </summary>
        /// <value>The value of the header. If null, deletes the header.</value>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Used to track the state of Reason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonOption { get; private set; }

        /// <summary>
        /// Optional reason for approval/denial.
        /// </summary>
        /// <value>Optional reason for approval/denial.</value>
        [JsonPropertyName("reason")]
        public string? Reason { get { return this.ReasonOption; } set { this.ReasonOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManageHeadersSetHeadersRequestHeadersValue {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManageHeadersSetHeadersRequestHeadersValue" />
    /// </summary>
    public class ManageHeadersSetHeadersRequestHeadersValueJsonConverter : JsonConverter<ManageHeadersSetHeadersRequestHeadersValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManageHeadersSetHeadersRequestHeadersValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManageHeadersSetHeadersRequestHeadersValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> value = default;
            Option<ManageHeadersSetHeadersRequestHeadersValue.ApprovedEnum?> approved = default;
            Option<string?> reason = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "approved":
                            string? approvedRawValue = utf8JsonReader.GetString();
                            if (approvedRawValue != null)
                                approved = new Option<ManageHeadersSetHeadersRequestHeadersValue.ApprovedEnum?>(ManageHeadersSetHeadersRequestHeadersValue.ApprovedEnumFromStringOrDefault(approvedRawValue));
                            break;
                        case "reason":
                            reason = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class ManageHeadersSetHeadersRequestHeadersValue.", nameof(value));

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class ManageHeadersSetHeadersRequestHeadersValue.");

            if (approved.IsSet && approved.Value == null)
                throw new ArgumentNullException(nameof(approved), "Property is not nullable for class ManageHeadersSetHeadersRequestHeadersValue.");

            if (reason.IsSet && reason.Value == null)
                throw new ArgumentNullException(nameof(reason), "Property is not nullable for class ManageHeadersSetHeadersRequestHeadersValue.");

            return new ManageHeadersSetHeadersRequestHeadersValue(value.Value!, approved, reason);
        }

        /// <summary>
        /// Serializes a <see cref="ManageHeadersSetHeadersRequestHeadersValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageHeadersSetHeadersRequestHeadersValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManageHeadersSetHeadersRequestHeadersValue manageHeadersSetHeadersRequestHeadersValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, manageHeadersSetHeadersRequestHeadersValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManageHeadersSetHeadersRequestHeadersValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageHeadersSetHeadersRequestHeadersValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManageHeadersSetHeadersRequestHeadersValue manageHeadersSetHeadersRequestHeadersValue, JsonSerializerOptions jsonSerializerOptions)
        {
            if (manageHeadersSetHeadersRequestHeadersValue.Value == null)
                throw new ArgumentNullException(nameof(manageHeadersSetHeadersRequestHeadersValue.Value), "Property is required for class ManageHeadersSetHeadersRequestHeadersValue.");

            if (manageHeadersSetHeadersRequestHeadersValue.ReasonOption.IsSet && manageHeadersSetHeadersRequestHeadersValue.Reason == null)
                throw new ArgumentNullException(nameof(manageHeadersSetHeadersRequestHeadersValue.Reason), "Property is required for class ManageHeadersSetHeadersRequestHeadersValue.");

            writer.WriteString("value", manageHeadersSetHeadersRequestHeadersValue.Value);

            var approvedRawValue = ManageHeadersSetHeadersRequestHeadersValue.ApprovedEnumToJsonValue(manageHeadersSetHeadersRequestHeadersValue.ApprovedOption.Value!.Value);
            writer.WriteString("approved", approvedRawValue);
            if (manageHeadersSetHeadersRequestHeadersValue.ReasonOption.IsSet)
                writer.WriteString("reason", manageHeadersSetHeadersRequestHeadersValue.Reason);
        }
    }

    /// <summary>
    /// The ManageHeadersSetHeadersRequestHeadersValueSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManageHeadersSetHeadersRequestHeadersValue))]
    public partial class ManageHeadersSetHeadersRequestHeadersValueSerializationContext : JsonSerializerContext { }
}
