// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// AddFilesGenerateHashes200Response
    /// </summary>
    public partial class AddFilesGenerateHashes200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddFilesGenerateHashes200Response" /> class.
        /// </summary>
        /// <param name="hash">SHA256 hash of the file</param>
        /// <param name="perceptualHashes">List of perceptual hashes (only present for supported file types)</param>
        /// <param name="pixelHash">SHA256 hash of the pixel data of the rendered image (only present for images)</param>
        [JsonConstructor]
        public AddFilesGenerateHashes200Response(Option<string?> hash = default, Option<List<string>?> perceptualHashes = default, Option<string?> pixelHash = default)
        {
            HashOption = hash;
            PerceptualHashesOption = perceptualHashes;
            PixelHashOption = pixelHash;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// SHA256 hash of the file
        /// </summary>
        /// <value>SHA256 hash of the file</value>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of PerceptualHashes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> PerceptualHashesOption { get; private set; }

        /// <summary>
        /// List of perceptual hashes (only present for supported file types)
        /// </summary>
        /// <value>List of perceptual hashes (only present for supported file types)</value>
        [JsonPropertyName("perceptual_hashes")]
        public List<string>? PerceptualHashes { get { return this.PerceptualHashesOption; } set { this.PerceptualHashesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PixelHash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PixelHashOption { get; private set; }

        /// <summary>
        /// SHA256 hash of the pixel data of the rendered image (only present for images)
        /// </summary>
        /// <value>SHA256 hash of the pixel data of the rendered image (only present for images)</value>
        [JsonPropertyName("pixel_hash")]
        public string? PixelHash { get { return this.PixelHashOption; } set { this.PixelHashOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddFilesGenerateHashes200Response {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  PerceptualHashes: ").Append(PerceptualHashes).Append("\n");
            sb.Append("  PixelHash: ").Append(PixelHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddFilesGenerateHashes200Response" />
    /// </summary>
    public class AddFilesGenerateHashes200ResponseJsonConverter : JsonConverter<AddFilesGenerateHashes200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddFilesGenerateHashes200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddFilesGenerateHashes200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> hash = default;
            Option<List<string>?> perceptualHashes = default;
            Option<string?> pixelHash = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "perceptual_hashes":
                            perceptualHashes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pixel_hash":
                            pixelHash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class AddFilesGenerateHashes200Response.");

            if (perceptualHashes.IsSet && perceptualHashes.Value == null)
                throw new ArgumentNullException(nameof(perceptualHashes), "Property is not nullable for class AddFilesGenerateHashes200Response.");

            if (pixelHash.IsSet && pixelHash.Value == null)
                throw new ArgumentNullException(nameof(pixelHash), "Property is not nullable for class AddFilesGenerateHashes200Response.");

            return new AddFilesGenerateHashes200Response(hash, perceptualHashes, pixelHash);
        }

        /// <summary>
        /// Serializes a <see cref="AddFilesGenerateHashes200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addFilesGenerateHashes200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddFilesGenerateHashes200Response addFilesGenerateHashes200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addFilesGenerateHashes200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddFilesGenerateHashes200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addFilesGenerateHashes200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddFilesGenerateHashes200Response addFilesGenerateHashes200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addFilesGenerateHashes200Response.HashOption.IsSet && addFilesGenerateHashes200Response.Hash == null)
                throw new ArgumentNullException(nameof(addFilesGenerateHashes200Response.Hash), "Property is required for class AddFilesGenerateHashes200Response.");

            if (addFilesGenerateHashes200Response.PerceptualHashesOption.IsSet && addFilesGenerateHashes200Response.PerceptualHashes == null)
                throw new ArgumentNullException(nameof(addFilesGenerateHashes200Response.PerceptualHashes), "Property is required for class AddFilesGenerateHashes200Response.");

            if (addFilesGenerateHashes200Response.PixelHashOption.IsSet && addFilesGenerateHashes200Response.PixelHash == null)
                throw new ArgumentNullException(nameof(addFilesGenerateHashes200Response.PixelHash), "Property is required for class AddFilesGenerateHashes200Response.");

            if (addFilesGenerateHashes200Response.HashOption.IsSet)
                writer.WriteString("hash", addFilesGenerateHashes200Response.Hash);

            if (addFilesGenerateHashes200Response.PerceptualHashesOption.IsSet)
            {
                writer.WritePropertyName("perceptual_hashes");
                JsonSerializer.Serialize(writer, addFilesGenerateHashes200Response.PerceptualHashes, jsonSerializerOptions);
            }
            if (addFilesGenerateHashes200Response.PixelHashOption.IsSet)
                writer.WriteString("pixel_hash", addFilesGenerateHashes200Response.PixelHash);
        }
    }

    /// <summary>
    /// The AddFilesGenerateHashes200ResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddFilesGenerateHashes200Response))]
    public partial class AddFilesGenerateHashes200ResponseSerializationContext : JsonSerializerContext { }
}
