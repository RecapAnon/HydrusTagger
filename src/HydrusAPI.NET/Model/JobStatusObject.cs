// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// JobStatusObject
    /// </summary>
    public partial class JobStatusObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatusObject" /> class.
        /// </summary>
        /// <param name="jobId">Unique identifier for the job status.</param>
        /// <param name="isCancellable">Whether the job can be cancelled.</param>
        /// <param name="isPausable">Whether the job can be paused.</param>
        /// <param name="attachedFilesMergable">Whether attached files can be merged.</param>
        /// <param name="statusTitle">Title of the job status.</param>
        /// <param name="statusText1">First line of status text.</param>
        /// <param name="statusText2">Second line of status text.</param>
        /// <param name="popupGauge1">Gauge values as [current, max].</param>
        /// <param name="popupGauge2">Second gauge values as [current, max].</param>
        /// <param name="apiData">Custom data associated with the job.</param>
        /// <param name="files">files</param>
        [JsonConstructor]
        public JobStatusObject(Option<string?> jobId = default, Option<bool?> isCancellable = default, Option<bool?> isPausable = default, Option<bool?> attachedFilesMergable = default, Option<string?> statusTitle = default, Option<string?> statusText1 = default, Option<string?> statusText2 = default, Option<List<int>?> popupGauge1 = default, Option<List<int>?> popupGauge2 = default, Option<Object?> apiData = default, Option<JobStatusObjectFiles?> files = default)
        {
            JobIdOption = jobId;
            IsCancellableOption = isCancellable;
            IsPausableOption = isPausable;
            AttachedFilesMergableOption = attachedFilesMergable;
            StatusTitleOption = statusTitle;
            StatusText1Option = statusText1;
            StatusText2Option = statusText2;
            PopupGauge1Option = popupGauge1;
            PopupGauge2Option = popupGauge2;
            ApiDataOption = apiData;
            FilesOption = files;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of JobId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> JobIdOption { get; private set; }

        /// <summary>
        /// Unique identifier for the job status.
        /// </summary>
        /// <value>Unique identifier for the job status.</value>
        [JsonPropertyName("job_id")]
        public string? JobId { get { return this.JobIdOption; } set { this.JobIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsCancellable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCancellableOption { get; private set; }

        /// <summary>
        /// Whether the job can be cancelled.
        /// </summary>
        /// <value>Whether the job can be cancelled.</value>
        [JsonPropertyName("is_cancellable")]
        public bool? IsCancellable { get { return this.IsCancellableOption; } set { this.IsCancellableOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPausable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPausableOption { get; private set; }

        /// <summary>
        /// Whether the job can be paused.
        /// </summary>
        /// <value>Whether the job can be paused.</value>
        [JsonPropertyName("is_pausable")]
        public bool? IsPausable { get { return this.IsPausableOption; } set { this.IsPausableOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttachedFilesMergable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AttachedFilesMergableOption { get; private set; }

        /// <summary>
        /// Whether attached files can be merged.
        /// </summary>
        /// <value>Whether attached files can be merged.</value>
        [JsonPropertyName("attached_files_mergable")]
        public bool? AttachedFilesMergable { get { return this.AttachedFilesMergableOption; } set { this.AttachedFilesMergableOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusTitleOption { get; private set; }

        /// <summary>
        /// Title of the job status.
        /// </summary>
        /// <value>Title of the job status.</value>
        [JsonPropertyName("status_title")]
        public string? StatusTitle { get { return this.StatusTitleOption; } set { this.StatusTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusText1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusText1Option { get; private set; }

        /// <summary>
        /// First line of status text.
        /// </summary>
        /// <value>First line of status text.</value>
        [JsonPropertyName("status_text_1")]
        public string? StatusText1 { get { return this.StatusText1Option; } set { this.StatusText1Option = new(value); } }

        /// <summary>
        /// Used to track the state of StatusText2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusText2Option { get; private set; }

        /// <summary>
        /// Second line of status text.
        /// </summary>
        /// <value>Second line of status text.</value>
        [JsonPropertyName("status_text_2")]
        public string? StatusText2 { get { return this.StatusText2Option; } set { this.StatusText2Option = new(value); } }

        /// <summary>
        /// Used to track the state of PopupGauge1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> PopupGauge1Option { get; private set; }

        /// <summary>
        /// Gauge values as [current, max].
        /// </summary>
        /// <value>Gauge values as [current, max].</value>
        [JsonPropertyName("popup_gauge_1")]
        public List<int>? PopupGauge1 { get { return this.PopupGauge1Option; } set { this.PopupGauge1Option = new(value); } }

        /// <summary>
        /// Used to track the state of PopupGauge2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> PopupGauge2Option { get; private set; }

        /// <summary>
        /// Second gauge values as [current, max].
        /// </summary>
        /// <value>Second gauge values as [current, max].</value>
        [JsonPropertyName("popup_gauge_2")]
        public List<int>? PopupGauge2 { get { return this.PopupGauge2Option; } set { this.PopupGauge2Option = new(value); } }

        /// <summary>
        /// Used to track the state of ApiData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ApiDataOption { get; private set; }

        /// <summary>
        /// Custom data associated with the job.
        /// </summary>
        /// <value>Custom data associated with the job.</value>
        [JsonPropertyName("api_data")]
        public Object? ApiData { get { return this.ApiDataOption; } set { this.ApiDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Files
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<JobStatusObjectFiles?> FilesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [JsonPropertyName("files")]
        public JobStatusObjectFiles? Files { get { return this.FilesOption; } set { this.FilesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobStatusObject {\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  IsCancellable: ").Append(IsCancellable).Append("\n");
            sb.Append("  IsPausable: ").Append(IsPausable).Append("\n");
            sb.Append("  AttachedFilesMergable: ").Append(AttachedFilesMergable).Append("\n");
            sb.Append("  StatusTitle: ").Append(StatusTitle).Append("\n");
            sb.Append("  StatusText1: ").Append(StatusText1).Append("\n");
            sb.Append("  StatusText2: ").Append(StatusText2).Append("\n");
            sb.Append("  PopupGauge1: ").Append(PopupGauge1).Append("\n");
            sb.Append("  PopupGauge2: ").Append(PopupGauge2).Append("\n");
            sb.Append("  ApiData: ").Append(ApiData).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobStatusObject" />
    /// </summary>
    public class JobStatusObjectJsonConverter : JsonConverter<JobStatusObject>
    {
        /// <summary>
        /// Deserializes json to <see cref="JobStatusObject" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override JobStatusObject Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> jobId = default;
            Option<bool?> isCancellable = default;
            Option<bool?> isPausable = default;
            Option<bool?> attachedFilesMergable = default;
            Option<string?> statusTitle = default;
            Option<string?> statusText1 = default;
            Option<string?> statusText2 = default;
            Option<List<int>?> popupGauge1 = default;
            Option<List<int>?> popupGauge2 = default;
            Option<Object?> apiData = default;
            Option<JobStatusObjectFiles?> files = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "job_id":
                            jobId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_cancellable":
                            isCancellable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_pausable":
                            isPausable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "attached_files_mergable":
                            attachedFilesMergable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "status_title":
                            statusTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status_text_1":
                            statusText1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status_text_2":
                            statusText2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "popup_gauge_1":
                            popupGauge1 = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "popup_gauge_2":
                            popupGauge2 = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "api_data":
                            apiData = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "files":
                            files = new Option<JobStatusObjectFiles?>(JsonSerializer.Deserialize<JobStatusObjectFiles>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (jobId.IsSet && jobId.Value == null)
                throw new ArgumentNullException(nameof(jobId), "Property is not nullable for class JobStatusObject.");

            if (isCancellable.IsSet && isCancellable.Value == null)
                throw new ArgumentNullException(nameof(isCancellable), "Property is not nullable for class JobStatusObject.");

            if (isPausable.IsSet && isPausable.Value == null)
                throw new ArgumentNullException(nameof(isPausable), "Property is not nullable for class JobStatusObject.");

            if (attachedFilesMergable.IsSet && attachedFilesMergable.Value == null)
                throw new ArgumentNullException(nameof(attachedFilesMergable), "Property is not nullable for class JobStatusObject.");

            if (statusTitle.IsSet && statusTitle.Value == null)
                throw new ArgumentNullException(nameof(statusTitle), "Property is not nullable for class JobStatusObject.");

            if (statusText1.IsSet && statusText1.Value == null)
                throw new ArgumentNullException(nameof(statusText1), "Property is not nullable for class JobStatusObject.");

            if (statusText2.IsSet && statusText2.Value == null)
                throw new ArgumentNullException(nameof(statusText2), "Property is not nullable for class JobStatusObject.");

            if (popupGauge1.IsSet && popupGauge1.Value == null)
                throw new ArgumentNullException(nameof(popupGauge1), "Property is not nullable for class JobStatusObject.");

            if (popupGauge2.IsSet && popupGauge2.Value == null)
                throw new ArgumentNullException(nameof(popupGauge2), "Property is not nullable for class JobStatusObject.");

            if (apiData.IsSet && apiData.Value == null)
                throw new ArgumentNullException(nameof(apiData), "Property is not nullable for class JobStatusObject.");

            if (files.IsSet && files.Value == null)
                throw new ArgumentNullException(nameof(files), "Property is not nullable for class JobStatusObject.");

            return new JobStatusObject(jobId, isCancellable, isPausable, attachedFilesMergable, statusTitle, statusText1, statusText2, popupGauge1, popupGauge2, apiData, files);
        }

        /// <summary>
        /// Serializes a <see cref="JobStatusObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobStatusObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, JobStatusObject jobStatusObject, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, jobStatusObject, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="JobStatusObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobStatusObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, JobStatusObject jobStatusObject, JsonSerializerOptions jsonSerializerOptions)
        {
            if (jobStatusObject.JobIdOption.IsSet && jobStatusObject.JobId == null)
                throw new ArgumentNullException(nameof(jobStatusObject.JobId), "Property is required for class JobStatusObject.");

            if (jobStatusObject.StatusTitleOption.IsSet && jobStatusObject.StatusTitle == null)
                throw new ArgumentNullException(nameof(jobStatusObject.StatusTitle), "Property is required for class JobStatusObject.");

            if (jobStatusObject.StatusText1Option.IsSet && jobStatusObject.StatusText1 == null)
                throw new ArgumentNullException(nameof(jobStatusObject.StatusText1), "Property is required for class JobStatusObject.");

            if (jobStatusObject.StatusText2Option.IsSet && jobStatusObject.StatusText2 == null)
                throw new ArgumentNullException(nameof(jobStatusObject.StatusText2), "Property is required for class JobStatusObject.");

            if (jobStatusObject.PopupGauge1Option.IsSet && jobStatusObject.PopupGauge1 == null)
                throw new ArgumentNullException(nameof(jobStatusObject.PopupGauge1), "Property is required for class JobStatusObject.");

            if (jobStatusObject.PopupGauge2Option.IsSet && jobStatusObject.PopupGauge2 == null)
                throw new ArgumentNullException(nameof(jobStatusObject.PopupGauge2), "Property is required for class JobStatusObject.");

            if (jobStatusObject.ApiDataOption.IsSet && jobStatusObject.ApiData == null)
                throw new ArgumentNullException(nameof(jobStatusObject.ApiData), "Property is required for class JobStatusObject.");

            if (jobStatusObject.FilesOption.IsSet && jobStatusObject.Files == null)
                throw new ArgumentNullException(nameof(jobStatusObject.Files), "Property is required for class JobStatusObject.");

            if (jobStatusObject.JobIdOption.IsSet)
                writer.WriteString("job_id", jobStatusObject.JobId);

            if (jobStatusObject.IsCancellableOption.IsSet)
                writer.WriteBoolean("is_cancellable", jobStatusObject.IsCancellableOption.Value!.Value);

            if (jobStatusObject.IsPausableOption.IsSet)
                writer.WriteBoolean("is_pausable", jobStatusObject.IsPausableOption.Value!.Value);

            if (jobStatusObject.AttachedFilesMergableOption.IsSet)
                writer.WriteBoolean("attached_files_mergable", jobStatusObject.AttachedFilesMergableOption.Value!.Value);

            if (jobStatusObject.StatusTitleOption.IsSet)
                writer.WriteString("status_title", jobStatusObject.StatusTitle);

            if (jobStatusObject.StatusText1Option.IsSet)
                writer.WriteString("status_text_1", jobStatusObject.StatusText1);

            if (jobStatusObject.StatusText2Option.IsSet)
                writer.WriteString("status_text_2", jobStatusObject.StatusText2);

            if (jobStatusObject.PopupGauge1Option.IsSet)
            {
                writer.WritePropertyName("popup_gauge_1");
                JsonSerializer.Serialize(writer, jobStatusObject.PopupGauge1, jsonSerializerOptions);
            }
            if (jobStatusObject.PopupGauge2Option.IsSet)
            {
                writer.WritePropertyName("popup_gauge_2");
                JsonSerializer.Serialize(writer, jobStatusObject.PopupGauge2, jsonSerializerOptions);
            }
            if (jobStatusObject.ApiDataOption.IsSet)
            {
                writer.WritePropertyName("api_data");
                JsonSerializer.Serialize(writer, jobStatusObject.ApiData, jsonSerializerOptions);
            }
            if (jobStatusObject.FilesOption.IsSet)
            {
                writer.WritePropertyName("files");
                JsonSerializer.Serialize(writer, jobStatusObject.Files, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The JobStatusObjectSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(JobStatusObject))]
    public partial class JobStatusObjectSerializationContext : JsonSerializerContext { }
}
