// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// EditRatingsSetRatingRequest
    /// </summary>
    public partial class EditRatingsSetRatingRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditRatingsSetRatingRequest" /> class.
        /// </summary>
        /// <param name="ratingServiceKey">Hexadecimal key of the rating service.</param>
        /// <param name="hash">SHA256 hash of the file.</param>
        /// <param name="hashes">List of SHA256 hashes of the files.</param>
        /// <param name="fileId">Numerical ID of the file.</param>
        /// <param name="fileIds">List of numerical IDs of the files.</param>
        /// <param name="rating">rating</param>
        [JsonConstructor]
        public EditRatingsSetRatingRequest(string ratingServiceKey, Option<string?> hash = default, Option<List<string>?> hashes = default, Option<int?> fileId = default, Option<List<int>?> fileIds = default, EditRatingsSetRatingRequestRating? rating = default)
        {
            RatingServiceKey = ratingServiceKey;
            HashOption = hash;
            HashesOption = hashes;
            FileIdOption = fileId;
            FileIdsOption = fileIds;
            Rating = rating;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Hexadecimal key of the rating service.
        /// </summary>
        /// <value>Hexadecimal key of the rating service.</value>
        /* <example>282303611ba853659aa60aeaa5b6312d40e05b58822c52c57ae5e320882ba26e</example> */
        [JsonPropertyName("rating_service_key")]
        public string RatingServiceKey { get; set; }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// SHA256 hash of the file.
        /// </summary>
        /// <value>SHA256 hash of the file.</value>
        /* <example>3b820114f658d768550e4e3d4f1dced3ff8db77443472b5ad93700647ad2d3ba</example> */
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hashes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> HashesOption { get; private set; }

        /// <summary>
        /// List of SHA256 hashes of the files.
        /// </summary>
        /// <value>List of SHA256 hashes of the files.</value>
        /* <example>[&quot;3b820114f658d768550e4e3d4f1dced3ff8db77443472b5ad93700647ad2d3ba&quot;,&quot;9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08&quot;]</example> */
        [JsonPropertyName("hashes")]
        public List<string>? Hashes { get { return this.HashesOption; } set { this.HashesOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileIdOption { get; private set; }

        /// <summary>
        /// Numerical ID of the file.
        /// </summary>
        /// <value>Numerical ID of the file.</value>
        /* <example>12345</example> */
        [JsonPropertyName("file_id")]
        public int? FileId { get { return this.FileIdOption; } set { this.FileIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> FileIdsOption { get; private set; }

        /// <summary>
        /// List of numerical IDs of the files.
        /// </summary>
        /// <value>List of numerical IDs of the files.</value>
        /* <example>[12345,67890]</example> */
        [JsonPropertyName("file_ids")]
        public List<int>? FileIds { get { return this.FileIdsOption; } set { this.FileIdsOption = new(value); } }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [JsonPropertyName("rating")]
        public EditRatingsSetRatingRequestRating? Rating { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EditRatingsSetRatingRequest {\n");
            sb.Append("  RatingServiceKey: ").Append(RatingServiceKey).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Hashes: ").Append(Hashes).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EditRatingsSetRatingRequest" />
    /// </summary>
    public class EditRatingsSetRatingRequestJsonConverter : JsonConverter<EditRatingsSetRatingRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="EditRatingsSetRatingRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EditRatingsSetRatingRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ratingServiceKey = default;
            Option<string?> hash = default;
            Option<List<string>?> hashes = default;
            Option<int?> fileId = default;
            Option<List<int>?> fileIds = default;
            Option<EditRatingsSetRatingRequestRating?> rating = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rating_service_key":
                            ratingServiceKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hashes":
                            hashes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "file_id":
                            fileId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_ids":
                            fileIds = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rating":
                            rating = new Option<EditRatingsSetRatingRequestRating?>(JsonSerializer.Deserialize<EditRatingsSetRatingRequestRating>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ratingServiceKey.IsSet)
                throw new ArgumentException("Property is required for class EditRatingsSetRatingRequest.", nameof(ratingServiceKey));

            if (!rating.IsSet)
                throw new ArgumentException("Property is required for class EditRatingsSetRatingRequest.", nameof(rating));

            if (ratingServiceKey.IsSet && ratingServiceKey.Value == null)
                throw new ArgumentNullException(nameof(ratingServiceKey), "Property is not nullable for class EditRatingsSetRatingRequest.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class EditRatingsSetRatingRequest.");

            if (hashes.IsSet && hashes.Value == null)
                throw new ArgumentNullException(nameof(hashes), "Property is not nullable for class EditRatingsSetRatingRequest.");

            if (fileId.IsSet && fileId.Value == null)
                throw new ArgumentNullException(nameof(fileId), "Property is not nullable for class EditRatingsSetRatingRequest.");

            if (fileIds.IsSet && fileIds.Value == null)
                throw new ArgumentNullException(nameof(fileIds), "Property is not nullable for class EditRatingsSetRatingRequest.");

            return new EditRatingsSetRatingRequest(ratingServiceKey.Value!, hash, hashes, fileId, fileIds, rating.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="EditRatingsSetRatingRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="editRatingsSetRatingRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EditRatingsSetRatingRequest editRatingsSetRatingRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, editRatingsSetRatingRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EditRatingsSetRatingRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="editRatingsSetRatingRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EditRatingsSetRatingRequest editRatingsSetRatingRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (editRatingsSetRatingRequest.RatingServiceKey == null)
                throw new ArgumentNullException(nameof(editRatingsSetRatingRequest.RatingServiceKey), "Property is required for class EditRatingsSetRatingRequest.");

            if (editRatingsSetRatingRequest.HashOption.IsSet && editRatingsSetRatingRequest.Hash == null)
                throw new ArgumentNullException(nameof(editRatingsSetRatingRequest.Hash), "Property is required for class EditRatingsSetRatingRequest.");

            if (editRatingsSetRatingRequest.HashesOption.IsSet && editRatingsSetRatingRequest.Hashes == null)
                throw new ArgumentNullException(nameof(editRatingsSetRatingRequest.Hashes), "Property is required for class EditRatingsSetRatingRequest.");

            if (editRatingsSetRatingRequest.FileIdsOption.IsSet && editRatingsSetRatingRequest.FileIds == null)
                throw new ArgumentNullException(nameof(editRatingsSetRatingRequest.FileIds), "Property is required for class EditRatingsSetRatingRequest.");

            writer.WriteString("rating_service_key", editRatingsSetRatingRequest.RatingServiceKey);

            if (editRatingsSetRatingRequest.HashOption.IsSet)
                writer.WriteString("hash", editRatingsSetRatingRequest.Hash);

            if (editRatingsSetRatingRequest.HashesOption.IsSet)
            {
                writer.WritePropertyName("hashes");
                JsonSerializer.Serialize(writer, editRatingsSetRatingRequest.Hashes, jsonSerializerOptions);
            }
            if (editRatingsSetRatingRequest.FileIdOption.IsSet)
                writer.WriteNumber("file_id", editRatingsSetRatingRequest.FileIdOption.Value!.Value);

            if (editRatingsSetRatingRequest.FileIdsOption.IsSet)
            {
                writer.WritePropertyName("file_ids");
                JsonSerializer.Serialize(writer, editRatingsSetRatingRequest.FileIds, jsonSerializerOptions);
            }
            if (editRatingsSetRatingRequest.Rating != null)
            {
                writer.WritePropertyName("rating");
                JsonSerializer.Serialize(writer, editRatingsSetRatingRequest.Rating, jsonSerializerOptions);
            }
            else
                writer.WriteNull("rating");
        }
    }

    /// <summary>
    /// The EditRatingsSetRatingRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(EditRatingsSetRatingRequest))]
    public partial class EditRatingsSetRatingRequestSerializationContext : JsonSerializerContext { }
}
