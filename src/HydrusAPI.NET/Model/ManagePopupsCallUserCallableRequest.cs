// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// ManagePopupsCallUserCallableRequest
    /// </summary>
    public partial class ManagePopupsCallUserCallableRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagePopupsCallUserCallableRequest" /> class.
        /// </summary>
        /// <param name="jobStatusKey">The job status key to call the user callable of.</param>
        [JsonConstructor]
        public ManagePopupsCallUserCallableRequest(Option<string?> jobStatusKey = default)
        {
            JobStatusKeyOption = jobStatusKey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of JobStatusKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> JobStatusKeyOption { get; private set; }

        /// <summary>
        /// The job status key to call the user callable of.
        /// </summary>
        /// <value>The job status key to call the user callable of.</value>
        [JsonPropertyName("job_status_key")]
        public string? JobStatusKey { get { return this.JobStatusKeyOption; } set { this.JobStatusKeyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagePopupsCallUserCallableRequest {\n");
            sb.Append("  JobStatusKey: ").Append(JobStatusKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManagePopupsCallUserCallableRequest" />
    /// </summary>
    public class ManagePopupsCallUserCallableRequestJsonConverter : JsonConverter<ManagePopupsCallUserCallableRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManagePopupsCallUserCallableRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManagePopupsCallUserCallableRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> jobStatusKey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "job_status_key":
                            jobStatusKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (jobStatusKey.IsSet && jobStatusKey.Value == null)
                throw new ArgumentNullException(nameof(jobStatusKey), "Property is not nullable for class ManagePopupsCallUserCallableRequest.");

            return new ManagePopupsCallUserCallableRequest(jobStatusKey);
        }

        /// <summary>
        /// Serializes a <see cref="ManagePopupsCallUserCallableRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, managePopupsCallUserCallableRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManagePopupsCallUserCallableRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="managePopupsCallUserCallableRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManagePopupsCallUserCallableRequest managePopupsCallUserCallableRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (managePopupsCallUserCallableRequest.JobStatusKeyOption.IsSet && managePopupsCallUserCallableRequest.JobStatusKey == null)
                throw new ArgumentNullException(nameof(managePopupsCallUserCallableRequest.JobStatusKey), "Property is required for class ManagePopupsCallUserCallableRequest.");

            if (managePopupsCallUserCallableRequest.JobStatusKeyOption.IsSet)
                writer.WriteString("job_status_key", managePopupsCallUserCallableRequest.JobStatusKey);
        }
    }

    /// <summary>
    /// The ManagePopupsCallUserCallableRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ManagePopupsCallUserCallableRequest))]
    public partial class ManagePopupsCallUserCallableRequestSerializationContext : JsonSerializerContext { }
}
