// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// Notes to associate with the file
    /// </summary>
    public partial class AddNotesSetNotesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddNotesSetNotesRequest" /> class.
        /// </summary>
        /// <param name="notes">notes</param>
        /// <param name="hash">Only one of &#x60;hash&#x60; or &#x60;file_id&#x60; should be provided</param>
        /// <param name="fileId">Only one of &#x60;hash&#x60; or &#x60;file_id&#x60; should be provided</param>
        /// <param name="mergeCleverly">mergeCleverly (default to false)</param>
        /// <param name="extendExistingNoteIfPossible">extendExistingNoteIfPossible (default to true)</param>
        /// <param name="conflictResolution">conflictResolution (default to ConflictResolutionEnum.NUMBER_3)</param>
        [JsonConstructor]
        public AddNotesSetNotesRequest(Dictionary<string, string> notes, Option<Object?> hash = default, Option<Object?> fileId = default, Option<bool?> mergeCleverly = default, Option<bool?> extendExistingNoteIfPossible = default, Option<ConflictResolutionEnum?> conflictResolution = default)
        {
            Notes = notes;
            HashOption = hash;
            FileIdOption = fileId;
            MergeCleverlyOption = mergeCleverly;
            ExtendExistingNoteIfPossibleOption = extendExistingNoteIfPossible;
            ConflictResolutionOption = conflictResolution;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines ConflictResolution
        /// </summary>
        public enum ConflictResolutionEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3
        }

        /// <summary>
        /// Returns a <see cref="ConflictResolutionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ConflictResolutionEnum ConflictResolutionEnumFromString(string value)
        {
            if (value.Equals((0).ToString()))
                return ConflictResolutionEnum.NUMBER_0;

            if (value.Equals((1).ToString()))
                return ConflictResolutionEnum.NUMBER_1;

            if (value.Equals((2).ToString()))
                return ConflictResolutionEnum.NUMBER_2;

            if (value.Equals((3).ToString()))
                return ConflictResolutionEnum.NUMBER_3;

            throw new NotImplementedException($"Could not convert value to type ConflictResolutionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ConflictResolutionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConflictResolutionEnum? ConflictResolutionEnumFromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return ConflictResolutionEnum.NUMBER_0;

            if (value.Equals((1).ToString()))
                return ConflictResolutionEnum.NUMBER_1;

            if (value.Equals((2).ToString()))
                return ConflictResolutionEnum.NUMBER_2;

            if (value.Equals((3).ToString()))
                return ConflictResolutionEnum.NUMBER_3;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConflictResolutionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static int ConflictResolutionEnumToJsonValue(ConflictResolutionEnum value)
        {
            return (int) value;
        }

        /// <summary>
        /// Used to track the state of ConflictResolution
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConflictResolutionEnum?> ConflictResolutionOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConflictResolution
        /// </summary>
        [JsonPropertyName("conflict_resolution")]
        public ConflictResolutionEnum? ConflictResolution { get { return this.ConflictResolutionOption; } set { this.ConflictResolutionOption = new(value); } }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [JsonPropertyName("notes")]
        public Dictionary<string, string> Notes { get; set; }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> HashOption { get; private set; }

        /// <summary>
        /// Only one of &#x60;hash&#x60; or &#x60;file_id&#x60; should be provided
        /// </summary>
        /// <value>Only one of &#x60;hash&#x60; or &#x60;file_id&#x60; should be provided</value>
        [JsonPropertyName("hash")]
        public Object? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> FileIdOption { get; private set; }

        /// <summary>
        /// Only one of &#x60;hash&#x60; or &#x60;file_id&#x60; should be provided
        /// </summary>
        /// <value>Only one of &#x60;hash&#x60; or &#x60;file_id&#x60; should be provided</value>
        [JsonPropertyName("file_id")]
        public Object? FileId { get { return this.FileIdOption; } set { this.FileIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeCleverly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MergeCleverlyOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeCleverly
        /// </summary>
        [JsonPropertyName("merge_cleverly")]
        public bool? MergeCleverly { get { return this.MergeCleverlyOption; } set { this.MergeCleverlyOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExtendExistingNoteIfPossible
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ExtendExistingNoteIfPossibleOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtendExistingNoteIfPossible
        /// </summary>
        [JsonPropertyName("extend_existing_note_if_possible")]
        public bool? ExtendExistingNoteIfPossible { get { return this.ExtendExistingNoteIfPossibleOption; } set { this.ExtendExistingNoteIfPossibleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddNotesSetNotesRequest {\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  MergeCleverly: ").Append(MergeCleverly).Append("\n");
            sb.Append("  ExtendExistingNoteIfPossible: ").Append(ExtendExistingNoteIfPossible).Append("\n");
            sb.Append("  ConflictResolution: ").Append(ConflictResolution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddNotesSetNotesRequest" />
    /// </summary>
    public class AddNotesSetNotesRequestJsonConverter : JsonConverter<AddNotesSetNotesRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddNotesSetNotesRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddNotesSetNotesRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, string>?> notes = default;
            Option<Object?> hash = default;
            Option<Object?> fileId = default;
            Option<bool?> mergeCleverly = default;
            Option<bool?> extendExistingNoteIfPossible = default;
            Option<AddNotesSetNotesRequest.ConflictResolutionEnum?> conflictResolution = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "notes":
                            notes = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hash":
                            hash = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "file_id":
                            fileId = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "merge_cleverly":
                            mergeCleverly = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "extend_existing_note_if_possible":
                            extendExistingNoteIfPossible = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "conflict_resolution":
                            conflictResolution = new Option<AddNotesSetNotesRequest.ConflictResolutionEnum?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (AddNotesSetNotesRequest.ConflictResolutionEnum?)null : (AddNotesSetNotesRequest.ConflictResolutionEnum)utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!notes.IsSet)
                throw new ArgumentException("Property is required for class AddNotesSetNotesRequest.", nameof(notes));

            if (notes.IsSet && notes.Value == null)
                throw new ArgumentNullException(nameof(notes), "Property is not nullable for class AddNotesSetNotesRequest.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class AddNotesSetNotesRequest.");

            if (fileId.IsSet && fileId.Value == null)
                throw new ArgumentNullException(nameof(fileId), "Property is not nullable for class AddNotesSetNotesRequest.");

            if (mergeCleverly.IsSet && mergeCleverly.Value == null)
                throw new ArgumentNullException(nameof(mergeCleverly), "Property is not nullable for class AddNotesSetNotesRequest.");

            if (extendExistingNoteIfPossible.IsSet && extendExistingNoteIfPossible.Value == null)
                throw new ArgumentNullException(nameof(extendExistingNoteIfPossible), "Property is not nullable for class AddNotesSetNotesRequest.");

            if (conflictResolution.IsSet && conflictResolution.Value == null)
                throw new ArgumentNullException(nameof(conflictResolution), "Property is not nullable for class AddNotesSetNotesRequest.");

            return new AddNotesSetNotesRequest(notes.Value!, hash, fileId, mergeCleverly, extendExistingNoteIfPossible, conflictResolution);
        }

        /// <summary>
        /// Serializes a <see cref="AddNotesSetNotesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addNotesSetNotesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddNotesSetNotesRequest addNotesSetNotesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addNotesSetNotesRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddNotesSetNotesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addNotesSetNotesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddNotesSetNotesRequest addNotesSetNotesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addNotesSetNotesRequest.Notes == null)
                throw new ArgumentNullException(nameof(addNotesSetNotesRequest.Notes), "Property is required for class AddNotesSetNotesRequest.");

            if (addNotesSetNotesRequest.HashOption.IsSet && addNotesSetNotesRequest.Hash == null)
                throw new ArgumentNullException(nameof(addNotesSetNotesRequest.Hash), "Property is required for class AddNotesSetNotesRequest.");

            if (addNotesSetNotesRequest.FileIdOption.IsSet && addNotesSetNotesRequest.FileId == null)
                throw new ArgumentNullException(nameof(addNotesSetNotesRequest.FileId), "Property is required for class AddNotesSetNotesRequest.");

            writer.WritePropertyName("notes");
            JsonSerializer.Serialize(writer, addNotesSetNotesRequest.Notes, jsonSerializerOptions);
            if (addNotesSetNotesRequest.HashOption.IsSet)
            {
                writer.WritePropertyName("hash");
                JsonSerializer.Serialize(writer, addNotesSetNotesRequest.Hash, jsonSerializerOptions);
            }
            if (addNotesSetNotesRequest.FileIdOption.IsSet)
            {
                writer.WritePropertyName("file_id");
                JsonSerializer.Serialize(writer, addNotesSetNotesRequest.FileId, jsonSerializerOptions);
            }
            if (addNotesSetNotesRequest.MergeCleverlyOption.IsSet)
                writer.WriteBoolean("merge_cleverly", addNotesSetNotesRequest.MergeCleverlyOption.Value!.Value);

            if (addNotesSetNotesRequest.ExtendExistingNoteIfPossibleOption.IsSet)
                writer.WriteBoolean("extend_existing_note_if_possible", addNotesSetNotesRequest.ExtendExistingNoteIfPossibleOption.Value!.Value);

            if (addNotesSetNotesRequest.ConflictResolutionOption.IsSet)
                writer.WriteNumber("conflict_resolution", AddNotesSetNotesRequest.ConflictResolutionEnumToJsonValue(addNotesSetNotesRequest.ConflictResolutionOption.Value!.Value));
        }
    }

    /// <summary>
    /// The AddNotesSetNotesRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AddNotesSetNotesRequest))]
    public partial class AddNotesSetNotesRequestSerializationContext : JsonSerializerContext { }
}
