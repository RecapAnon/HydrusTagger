// <auto-generated>
/*
 * Hydrus Client API
 *
 * API for interacting with the Hydrus Client
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using HydrusAPI.NET.Client;

namespace HydrusAPI.NET.Model
{
    /// <summary>
    /// FileMetadata
    /// </summary>
    public partial class FileMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMetadata" /> class.
        /// </summary>
        /// <param name="fileId">fileId</param>
        /// <param name="hash">hash</param>
        /// <param name="size">size</param>
        /// <param name="mime">mime</param>
        /// <param name="filetypeForced">filetypeForced</param>
        /// <param name="filetypeHuman">filetypeHuman</param>
        /// <param name="filetypeEnum">filetypeEnum</param>
        /// <param name="ext">ext</param>
        /// <param name="width">width</param>
        /// <param name="height">height</param>
        /// <param name="thumbnailWidth">thumbnailWidth</param>
        /// <param name="thumbnailHeight">thumbnailHeight</param>
        /// <param name="duration">duration</param>
        /// <param name="timeModified">timeModified</param>
        /// <param name="timeModifiedDetails">timeModifiedDetails</param>
        /// <param name="fileServices">fileServices</param>
        /// <param name="ipfsMultihashes">ipfsMultihashes</param>
        /// <param name="hasAudio">hasAudio</param>
        /// <param name="blurhash">blurhash</param>
        /// <param name="pixelHash">pixelHash</param>
        /// <param name="numFrames">numFrames</param>
        /// <param name="numWords">numWords</param>
        /// <param name="isInbox">isInbox</param>
        /// <param name="isLocal">isLocal</param>
        /// <param name="isTrashed">isTrashed</param>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="hasExif">hasExif</param>
        /// <param name="hasHumanReadableEmbeddedMetadata">hasHumanReadableEmbeddedMetadata</param>
        /// <param name="hasIccProfile">hasIccProfile</param>
        /// <param name="hasTransparency">hasTransparency</param>
        /// <param name="knownUrls">knownUrls</param>
        /// <param name="ratings">ratings</param>
        /// <param name="tags">tags</param>
        /// <param name="fileViewingStatistics">fileViewingStatistics</param>
        [JsonConstructor]
        public FileMetadata(Option<int?> fileId = default, Option<string?> hash = default, Option<int?> size = default, Option<string?> mime = default, Option<bool?> filetypeForced = default, Option<string?> filetypeHuman = default, Option<int?> filetypeEnum = default, Option<string?> ext = default, Option<int?> width = default, Option<int?> height = default, Option<int?> thumbnailWidth = default, Option<int?> thumbnailHeight = default, Option<int?> duration = default, Option<int?> timeModified = default, Option<Object?> timeModifiedDetails = default, Option<FileMetadataFileServices?> fileServices = default, Option<Object?> ipfsMultihashes = default, Option<bool?> hasAudio = default, Option<string?> blurhash = default, Option<string?> pixelHash = default, Option<int?> numFrames = default, Option<int?> numWords = default, Option<bool?> isInbox = default, Option<bool?> isLocal = default, Option<bool?> isTrashed = default, Option<bool?> isDeleted = default, Option<bool?> hasExif = default, Option<bool?> hasHumanReadableEmbeddedMetadata = default, Option<bool?> hasIccProfile = default, Option<bool?> hasTransparency = default, Option<List<string>?> knownUrls = default, Option<Object?> ratings = default, Option<Object?> tags = default, Option<List<FileMetadataFileViewingStatisticsInner>?> fileViewingStatistics = default)
        {
            FileIdOption = fileId;
            HashOption = hash;
            SizeOption = size;
            MimeOption = mime;
            FiletypeForcedOption = filetypeForced;
            FiletypeHumanOption = filetypeHuman;
            FiletypeEnumOption = filetypeEnum;
            ExtOption = ext;
            WidthOption = width;
            HeightOption = height;
            ThumbnailWidthOption = thumbnailWidth;
            ThumbnailHeightOption = thumbnailHeight;
            DurationOption = duration;
            TimeModifiedOption = timeModified;
            TimeModifiedDetailsOption = timeModifiedDetails;
            FileServicesOption = fileServices;
            IpfsMultihashesOption = ipfsMultihashes;
            HasAudioOption = hasAudio;
            BlurhashOption = blurhash;
            PixelHashOption = pixelHash;
            NumFramesOption = numFrames;
            NumWordsOption = numWords;
            IsInboxOption = isInbox;
            IsLocalOption = isLocal;
            IsTrashedOption = isTrashed;
            IsDeletedOption = isDeleted;
            HasExifOption = hasExif;
            HasHumanReadableEmbeddedMetadataOption = hasHumanReadableEmbeddedMetadata;
            HasIccProfileOption = hasIccProfile;
            HasTransparencyOption = hasTransparency;
            KnownUrlsOption = knownUrls;
            RatingsOption = ratings;
            TagsOption = tags;
            FileViewingStatisticsOption = fileViewingStatistics;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [JsonPropertyName("file_id")]
        public int? FileId { get { return this.FileIdOption; } set { this.FileIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mime
        /// </summary>
        [JsonPropertyName("mime")]
        public string? Mime { get { return this.MimeOption; } set { this.MimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FiletypeForced
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FiletypeForcedOption { get; private set; }

        /// <summary>
        /// Gets or Sets FiletypeForced
        /// </summary>
        [JsonPropertyName("filetype_forced")]
        public bool? FiletypeForced { get { return this.FiletypeForcedOption; } set { this.FiletypeForcedOption = new(value); } }

        /// <summary>
        /// Used to track the state of FiletypeHuman
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FiletypeHumanOption { get; private set; }

        /// <summary>
        /// Gets or Sets FiletypeHuman
        /// </summary>
        [JsonPropertyName("filetype_human")]
        public string? FiletypeHuman { get { return this.FiletypeHumanOption; } set { this.FiletypeHumanOption = new(value); } }

        /// <summary>
        /// Used to track the state of FiletypeEnum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FiletypeEnumOption { get; private set; }

        /// <summary>
        /// Gets or Sets FiletypeEnum
        /// </summary>
        [JsonPropertyName("filetype_enum")]
        public int? FiletypeEnum { get { return this.FiletypeEnumOption; } set { this.FiletypeEnumOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExtOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ext
        /// </summary>
        [JsonPropertyName("ext")]
        public string? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Width
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WidthOption { get; private set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [JsonPropertyName("width")]
        public int? Width { get { return this.WidthOption; } set { this.WidthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Height
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [JsonPropertyName("height")]
        public int? Height { get { return this.HeightOption; } set { this.HeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of ThumbnailWidth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ThumbnailWidthOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThumbnailWidth
        /// </summary>
        [JsonPropertyName("thumbnail_width")]
        public int? ThumbnailWidth { get { return this.ThumbnailWidthOption; } set { this.ThumbnailWidthOption = new(value); } }

        /// <summary>
        /// Used to track the state of ThumbnailHeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ThumbnailHeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThumbnailHeight
        /// </summary>
        [JsonPropertyName("thumbnail_height")]
        public int? ThumbnailHeight { get { return this.ThumbnailHeightOption; } set { this.ThumbnailHeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of Duration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DurationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [JsonPropertyName("duration")]
        public int? Duration { get { return this.DurationOption; } set { this.DurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeModified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimeModifiedOption { get; private set; }

        /// <summary>
        /// Gets or Sets TimeModified
        /// </summary>
        [JsonPropertyName("time_modified")]
        public int? TimeModified { get { return this.TimeModifiedOption; } set { this.TimeModifiedOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeModifiedDetails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TimeModifiedDetailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TimeModifiedDetails
        /// </summary>
        [JsonPropertyName("time_modified_details")]
        public Object? TimeModifiedDetails { get { return this.TimeModifiedDetailsOption; } set { this.TimeModifiedDetailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FileMetadataFileServices?> FileServicesOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileServices
        /// </summary>
        [JsonPropertyName("file_services")]
        public FileMetadataFileServices? FileServices { get { return this.FileServicesOption; } set { this.FileServicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of IpfsMultihashes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> IpfsMultihashesOption { get; private set; }

        /// <summary>
        /// Gets or Sets IpfsMultihashes
        /// </summary>
        [JsonPropertyName("ipfs_multihashes")]
        public Object? IpfsMultihashes { get { return this.IpfsMultihashesOption; } set { this.IpfsMultihashesOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasAudio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasAudioOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasAudio
        /// </summary>
        [JsonPropertyName("has_audio")]
        public bool? HasAudio { get { return this.HasAudioOption; } set { this.HasAudioOption = new(value); } }

        /// <summary>
        /// Used to track the state of Blurhash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BlurhashOption { get; private set; }

        /// <summary>
        /// Gets or Sets Blurhash
        /// </summary>
        [JsonPropertyName("blurhash")]
        public string? Blurhash { get { return this.BlurhashOption; } set { this.BlurhashOption = new(value); } }

        /// <summary>
        /// Used to track the state of PixelHash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PixelHashOption { get; private set; }

        /// <summary>
        /// Gets or Sets PixelHash
        /// </summary>
        [JsonPropertyName("pixel_hash")]
        public string? PixelHash { get { return this.PixelHashOption; } set { this.PixelHashOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumFrames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumFramesOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumFrames
        /// </summary>
        [JsonPropertyName("num_frames")]
        public int? NumFrames { get { return this.NumFramesOption; } set { this.NumFramesOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumWords
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumWordsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumWords
        /// </summary>
        [JsonPropertyName("num_words")]
        public int? NumWords { get { return this.NumWordsOption; } set { this.NumWordsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsInbox
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsInboxOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsInbox
        /// </summary>
        [JsonPropertyName("is_inbox")]
        public bool? IsInbox { get { return this.IsInboxOption; } set { this.IsInboxOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsLocal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsLocalOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsLocal
        /// </summary>
        [JsonPropertyName("is_local")]
        public bool? IsLocal { get { return this.IsLocalOption; } set { this.IsLocalOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsTrashed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsTrashedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsTrashed
        /// </summary>
        [JsonPropertyName("is_trashed")]
        public bool? IsTrashed { get { return this.IsTrashedOption; } set { this.IsTrashedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("is_deleted")]
        public bool? IsDeleted { get { return this.IsDeletedOption; } set { this.IsDeletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasExif
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasExifOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasExif
        /// </summary>
        [JsonPropertyName("has_exif")]
        public bool? HasExif { get { return this.HasExifOption; } set { this.HasExifOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasHumanReadableEmbeddedMetadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasHumanReadableEmbeddedMetadataOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasHumanReadableEmbeddedMetadata
        /// </summary>
        [JsonPropertyName("has_human_readable_embedded_metadata")]
        public bool? HasHumanReadableEmbeddedMetadata { get { return this.HasHumanReadableEmbeddedMetadataOption; } set { this.HasHumanReadableEmbeddedMetadataOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasIccProfile
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasIccProfileOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasIccProfile
        /// </summary>
        [JsonPropertyName("has_icc_profile")]
        public bool? HasIccProfile { get { return this.HasIccProfileOption; } set { this.HasIccProfileOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasTransparency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasTransparencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasTransparency
        /// </summary>
        [JsonPropertyName("has_transparency")]
        public bool? HasTransparency { get { return this.HasTransparencyOption; } set { this.HasTransparencyOption = new(value); } }

        /// <summary>
        /// Used to track the state of KnownUrls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> KnownUrlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets KnownUrls
        /// </summary>
        [JsonPropertyName("known_urls")]
        public List<string>? KnownUrls { get { return this.KnownUrlsOption; } set { this.KnownUrlsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ratings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> RatingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [JsonPropertyName("ratings")]
        public Object? Ratings { get { return this.RatingsOption; } set { this.RatingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public Object? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileViewingStatistics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FileMetadataFileViewingStatisticsInner>?> FileViewingStatisticsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileViewingStatistics
        /// </summary>
        [JsonPropertyName("file_viewing_statistics")]
        public List<FileMetadataFileViewingStatisticsInner>? FileViewingStatistics { get { return this.FileViewingStatisticsOption; } set { this.FileViewingStatisticsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileMetadata {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("  FiletypeForced: ").Append(FiletypeForced).Append("\n");
            sb.Append("  FiletypeHuman: ").Append(FiletypeHuman).Append("\n");
            sb.Append("  FiletypeEnum: ").Append(FiletypeEnum).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ThumbnailWidth: ").Append(ThumbnailWidth).Append("\n");
            sb.Append("  ThumbnailHeight: ").Append(ThumbnailHeight).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  TimeModified: ").Append(TimeModified).Append("\n");
            sb.Append("  TimeModifiedDetails: ").Append(TimeModifiedDetails).Append("\n");
            sb.Append("  FileServices: ").Append(FileServices).Append("\n");
            sb.Append("  IpfsMultihashes: ").Append(IpfsMultihashes).Append("\n");
            sb.Append("  HasAudio: ").Append(HasAudio).Append("\n");
            sb.Append("  Blurhash: ").Append(Blurhash).Append("\n");
            sb.Append("  PixelHash: ").Append(PixelHash).Append("\n");
            sb.Append("  NumFrames: ").Append(NumFrames).Append("\n");
            sb.Append("  NumWords: ").Append(NumWords).Append("\n");
            sb.Append("  IsInbox: ").Append(IsInbox).Append("\n");
            sb.Append("  IsLocal: ").Append(IsLocal).Append("\n");
            sb.Append("  IsTrashed: ").Append(IsTrashed).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  HasExif: ").Append(HasExif).Append("\n");
            sb.Append("  HasHumanReadableEmbeddedMetadata: ").Append(HasHumanReadableEmbeddedMetadata).Append("\n");
            sb.Append("  HasIccProfile: ").Append(HasIccProfile).Append("\n");
            sb.Append("  HasTransparency: ").Append(HasTransparency).Append("\n");
            sb.Append("  KnownUrls: ").Append(KnownUrls).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  FileViewingStatistics: ").Append(FileViewingStatistics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileMetadata" />
    /// </summary>
    public class FileMetadataJsonConverter : JsonConverter<FileMetadata>
    {
        /// <summary>
        /// Deserializes json to <see cref="FileMetadata" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileMetadata Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> fileId = default;
            Option<string?> hash = default;
            Option<int?> size = default;
            Option<string?> mime = default;
            Option<bool?> filetypeForced = default;
            Option<string?> filetypeHuman = default;
            Option<int?> filetypeEnum = default;
            Option<string?> ext = default;
            Option<int?> width = default;
            Option<int?> height = default;
            Option<int?> thumbnailWidth = default;
            Option<int?> thumbnailHeight = default;
            Option<int?> duration = default;
            Option<int?> timeModified = default;
            Option<Object?> timeModifiedDetails = default;
            Option<FileMetadataFileServices?> fileServices = default;
            Option<Object?> ipfsMultihashes = default;
            Option<bool?> hasAudio = default;
            Option<string?> blurhash = default;
            Option<string?> pixelHash = default;
            Option<int?> numFrames = default;
            Option<int?> numWords = default;
            Option<bool?> isInbox = default;
            Option<bool?> isLocal = default;
            Option<bool?> isTrashed = default;
            Option<bool?> isDeleted = default;
            Option<bool?> hasExif = default;
            Option<bool?> hasHumanReadableEmbeddedMetadata = default;
            Option<bool?> hasIccProfile = default;
            Option<bool?> hasTransparency = default;
            Option<List<string>?> knownUrls = default;
            Option<Object?> ratings = default;
            Option<Object?> tags = default;
            Option<List<FileMetadataFileViewingStatisticsInner>?> fileViewingStatistics = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "file_id":
                            fileId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "mime":
                            mime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "filetype_forced":
                            filetypeForced = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "filetype_human":
                            filetypeHuman = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "filetype_enum":
                            filetypeEnum = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "ext":
                            ext = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "width":
                            width = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "height":
                            height = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "thumbnail_width":
                            thumbnailWidth = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "thumbnail_height":
                            thumbnailHeight = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "duration":
                            duration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "time_modified":
                            timeModified = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "time_modified_details":
                            timeModifiedDetails = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "file_services":
                            fileServices = new Option<FileMetadataFileServices?>(JsonSerializer.Deserialize<FileMetadataFileServices>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ipfs_multihashes":
                            ipfsMultihashes = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "has_audio":
                            hasAudio = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "blurhash":
                            blurhash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pixel_hash":
                            pixelHash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "num_frames":
                            numFrames = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "num_words":
                            numWords = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_inbox":
                            isInbox = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_local":
                            isLocal = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_trashed":
                            isTrashed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_deleted":
                            isDeleted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "has_exif":
                            hasExif = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "has_human_readable_embedded_metadata":
                            hasHumanReadableEmbeddedMetadata = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "has_icc_profile":
                            hasIccProfile = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "has_transparency":
                            hasTransparency = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "known_urls":
                            knownUrls = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ratings":
                            ratings = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            tags = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "file_viewing_statistics":
                            fileViewingStatistics = new Option<List<FileMetadataFileViewingStatisticsInner>?>(JsonSerializer.Deserialize<List<FileMetadataFileViewingStatisticsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fileId.IsSet && fileId.Value == null)
                throw new ArgumentNullException(nameof(fileId), "Property is not nullable for class FileMetadata.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class FileMetadata.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class FileMetadata.");

            if (mime.IsSet && mime.Value == null)
                throw new ArgumentNullException(nameof(mime), "Property is not nullable for class FileMetadata.");

            if (filetypeForced.IsSet && filetypeForced.Value == null)
                throw new ArgumentNullException(nameof(filetypeForced), "Property is not nullable for class FileMetadata.");

            if (filetypeHuman.IsSet && filetypeHuman.Value == null)
                throw new ArgumentNullException(nameof(filetypeHuman), "Property is not nullable for class FileMetadata.");

            if (filetypeEnum.IsSet && filetypeEnum.Value == null)
                throw new ArgumentNullException(nameof(filetypeEnum), "Property is not nullable for class FileMetadata.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class FileMetadata.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class FileMetadata.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class FileMetadata.");

            if (thumbnailWidth.IsSet && thumbnailWidth.Value == null)
                throw new ArgumentNullException(nameof(thumbnailWidth), "Property is not nullable for class FileMetadata.");

            if (thumbnailHeight.IsSet && thumbnailHeight.Value == null)
                throw new ArgumentNullException(nameof(thumbnailHeight), "Property is not nullable for class FileMetadata.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class FileMetadata.");

            if (timeModified.IsSet && timeModified.Value == null)
                throw new ArgumentNullException(nameof(timeModified), "Property is not nullable for class FileMetadata.");

            if (timeModifiedDetails.IsSet && timeModifiedDetails.Value == null)
                throw new ArgumentNullException(nameof(timeModifiedDetails), "Property is not nullable for class FileMetadata.");

            if (fileServices.IsSet && fileServices.Value == null)
                throw new ArgumentNullException(nameof(fileServices), "Property is not nullable for class FileMetadata.");

            if (ipfsMultihashes.IsSet && ipfsMultihashes.Value == null)
                throw new ArgumentNullException(nameof(ipfsMultihashes), "Property is not nullable for class FileMetadata.");

            if (hasAudio.IsSet && hasAudio.Value == null)
                throw new ArgumentNullException(nameof(hasAudio), "Property is not nullable for class FileMetadata.");

            if (blurhash.IsSet && blurhash.Value == null)
                throw new ArgumentNullException(nameof(blurhash), "Property is not nullable for class FileMetadata.");

            if (pixelHash.IsSet && pixelHash.Value == null)
                throw new ArgumentNullException(nameof(pixelHash), "Property is not nullable for class FileMetadata.");

            if (numFrames.IsSet && numFrames.Value == null)
                throw new ArgumentNullException(nameof(numFrames), "Property is not nullable for class FileMetadata.");

            if (numWords.IsSet && numWords.Value == null)
                throw new ArgumentNullException(nameof(numWords), "Property is not nullable for class FileMetadata.");

            if (isInbox.IsSet && isInbox.Value == null)
                throw new ArgumentNullException(nameof(isInbox), "Property is not nullable for class FileMetadata.");

            if (isLocal.IsSet && isLocal.Value == null)
                throw new ArgumentNullException(nameof(isLocal), "Property is not nullable for class FileMetadata.");

            if (isTrashed.IsSet && isTrashed.Value == null)
                throw new ArgumentNullException(nameof(isTrashed), "Property is not nullable for class FileMetadata.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class FileMetadata.");

            if (hasExif.IsSet && hasExif.Value == null)
                throw new ArgumentNullException(nameof(hasExif), "Property is not nullable for class FileMetadata.");

            if (hasHumanReadableEmbeddedMetadata.IsSet && hasHumanReadableEmbeddedMetadata.Value == null)
                throw new ArgumentNullException(nameof(hasHumanReadableEmbeddedMetadata), "Property is not nullable for class FileMetadata.");

            if (hasIccProfile.IsSet && hasIccProfile.Value == null)
                throw new ArgumentNullException(nameof(hasIccProfile), "Property is not nullable for class FileMetadata.");

            if (hasTransparency.IsSet && hasTransparency.Value == null)
                throw new ArgumentNullException(nameof(hasTransparency), "Property is not nullable for class FileMetadata.");

            if (knownUrls.IsSet && knownUrls.Value == null)
                throw new ArgumentNullException(nameof(knownUrls), "Property is not nullable for class FileMetadata.");

            if (ratings.IsSet && ratings.Value == null)
                throw new ArgumentNullException(nameof(ratings), "Property is not nullable for class FileMetadata.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class FileMetadata.");

            if (fileViewingStatistics.IsSet && fileViewingStatistics.Value == null)
                throw new ArgumentNullException(nameof(fileViewingStatistics), "Property is not nullable for class FileMetadata.");

            return new FileMetadata(fileId, hash, size, mime, filetypeForced, filetypeHuman, filetypeEnum, ext, width, height, thumbnailWidth, thumbnailHeight, duration, timeModified, timeModifiedDetails, fileServices, ipfsMultihashes, hasAudio, blurhash, pixelHash, numFrames, numWords, isInbox, isLocal, isTrashed, isDeleted, hasExif, hasHumanReadableEmbeddedMetadata, hasIccProfile, hasTransparency, knownUrls, ratings, tags, fileViewingStatistics);
        }

        /// <summary>
        /// Serializes a <see cref="FileMetadata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileMetadata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileMetadata fileMetadata, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileMetadata, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileMetadata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileMetadata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileMetadata fileMetadata, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileMetadata.HashOption.IsSet && fileMetadata.Hash == null)
                throw new ArgumentNullException(nameof(fileMetadata.Hash), "Property is required for class FileMetadata.");

            if (fileMetadata.MimeOption.IsSet && fileMetadata.Mime == null)
                throw new ArgumentNullException(nameof(fileMetadata.Mime), "Property is required for class FileMetadata.");

            if (fileMetadata.FiletypeHumanOption.IsSet && fileMetadata.FiletypeHuman == null)
                throw new ArgumentNullException(nameof(fileMetadata.FiletypeHuman), "Property is required for class FileMetadata.");

            if (fileMetadata.ExtOption.IsSet && fileMetadata.Ext == null)
                throw new ArgumentNullException(nameof(fileMetadata.Ext), "Property is required for class FileMetadata.");

            if (fileMetadata.TimeModifiedDetailsOption.IsSet && fileMetadata.TimeModifiedDetails == null)
                throw new ArgumentNullException(nameof(fileMetadata.TimeModifiedDetails), "Property is required for class FileMetadata.");

            if (fileMetadata.FileServicesOption.IsSet && fileMetadata.FileServices == null)
                throw new ArgumentNullException(nameof(fileMetadata.FileServices), "Property is required for class FileMetadata.");

            if (fileMetadata.IpfsMultihashesOption.IsSet && fileMetadata.IpfsMultihashes == null)
                throw new ArgumentNullException(nameof(fileMetadata.IpfsMultihashes), "Property is required for class FileMetadata.");

            if (fileMetadata.BlurhashOption.IsSet && fileMetadata.Blurhash == null)
                throw new ArgumentNullException(nameof(fileMetadata.Blurhash), "Property is required for class FileMetadata.");

            if (fileMetadata.PixelHashOption.IsSet && fileMetadata.PixelHash == null)
                throw new ArgumentNullException(nameof(fileMetadata.PixelHash), "Property is required for class FileMetadata.");

            if (fileMetadata.KnownUrlsOption.IsSet && fileMetadata.KnownUrls == null)
                throw new ArgumentNullException(nameof(fileMetadata.KnownUrls), "Property is required for class FileMetadata.");

            if (fileMetadata.RatingsOption.IsSet && fileMetadata.Ratings == null)
                throw new ArgumentNullException(nameof(fileMetadata.Ratings), "Property is required for class FileMetadata.");

            if (fileMetadata.TagsOption.IsSet && fileMetadata.Tags == null)
                throw new ArgumentNullException(nameof(fileMetadata.Tags), "Property is required for class FileMetadata.");

            if (fileMetadata.FileViewingStatisticsOption.IsSet && fileMetadata.FileViewingStatistics == null)
                throw new ArgumentNullException(nameof(fileMetadata.FileViewingStatistics), "Property is required for class FileMetadata.");

            if (fileMetadata.FileIdOption.IsSet)
                writer.WriteNumber("file_id", fileMetadata.FileIdOption.Value!.Value);

            if (fileMetadata.HashOption.IsSet)
                writer.WriteString("hash", fileMetadata.Hash);

            if (fileMetadata.SizeOption.IsSet)
                writer.WriteNumber("size", fileMetadata.SizeOption.Value!.Value);

            if (fileMetadata.MimeOption.IsSet)
                writer.WriteString("mime", fileMetadata.Mime);

            if (fileMetadata.FiletypeForcedOption.IsSet)
                writer.WriteBoolean("filetype_forced", fileMetadata.FiletypeForcedOption.Value!.Value);

            if (fileMetadata.FiletypeHumanOption.IsSet)
                writer.WriteString("filetype_human", fileMetadata.FiletypeHuman);

            if (fileMetadata.FiletypeEnumOption.IsSet)
                writer.WriteNumber("filetype_enum", fileMetadata.FiletypeEnumOption.Value!.Value);

            if (fileMetadata.ExtOption.IsSet)
                writer.WriteString("ext", fileMetadata.Ext);

            if (fileMetadata.WidthOption.IsSet)
                writer.WriteNumber("width", fileMetadata.WidthOption.Value!.Value);

            if (fileMetadata.HeightOption.IsSet)
                writer.WriteNumber("height", fileMetadata.HeightOption.Value!.Value);

            if (fileMetadata.ThumbnailWidthOption.IsSet)
                writer.WriteNumber("thumbnail_width", fileMetadata.ThumbnailWidthOption.Value!.Value);

            if (fileMetadata.ThumbnailHeightOption.IsSet)
                writer.WriteNumber("thumbnail_height", fileMetadata.ThumbnailHeightOption.Value!.Value);

            if (fileMetadata.DurationOption.IsSet)
                writer.WriteNumber("duration", fileMetadata.DurationOption.Value!.Value);

            if (fileMetadata.TimeModifiedOption.IsSet)
                writer.WriteNumber("time_modified", fileMetadata.TimeModifiedOption.Value!.Value);

            if (fileMetadata.TimeModifiedDetailsOption.IsSet)
            {
                writer.WritePropertyName("time_modified_details");
                JsonSerializer.Serialize(writer, fileMetadata.TimeModifiedDetails, jsonSerializerOptions);
            }
            if (fileMetadata.FileServicesOption.IsSet)
            {
                writer.WritePropertyName("file_services");
                JsonSerializer.Serialize(writer, fileMetadata.FileServices, jsonSerializerOptions);
            }
            if (fileMetadata.IpfsMultihashesOption.IsSet)
            {
                writer.WritePropertyName("ipfs_multihashes");
                JsonSerializer.Serialize(writer, fileMetadata.IpfsMultihashes, jsonSerializerOptions);
            }
            if (fileMetadata.HasAudioOption.IsSet)
                writer.WriteBoolean("has_audio", fileMetadata.HasAudioOption.Value!.Value);

            if (fileMetadata.BlurhashOption.IsSet)
                writer.WriteString("blurhash", fileMetadata.Blurhash);

            if (fileMetadata.PixelHashOption.IsSet)
                writer.WriteString("pixel_hash", fileMetadata.PixelHash);

            if (fileMetadata.NumFramesOption.IsSet)
                writer.WriteNumber("num_frames", fileMetadata.NumFramesOption.Value!.Value);

            if (fileMetadata.NumWordsOption.IsSet)
                writer.WriteNumber("num_words", fileMetadata.NumWordsOption.Value!.Value);

            if (fileMetadata.IsInboxOption.IsSet)
                writer.WriteBoolean("is_inbox", fileMetadata.IsInboxOption.Value!.Value);

            if (fileMetadata.IsLocalOption.IsSet)
                writer.WriteBoolean("is_local", fileMetadata.IsLocalOption.Value!.Value);

            if (fileMetadata.IsTrashedOption.IsSet)
                writer.WriteBoolean("is_trashed", fileMetadata.IsTrashedOption.Value!.Value);

            if (fileMetadata.IsDeletedOption.IsSet)
                writer.WriteBoolean("is_deleted", fileMetadata.IsDeletedOption.Value!.Value);

            if (fileMetadata.HasExifOption.IsSet)
                writer.WriteBoolean("has_exif", fileMetadata.HasExifOption.Value!.Value);

            if (fileMetadata.HasHumanReadableEmbeddedMetadataOption.IsSet)
                writer.WriteBoolean("has_human_readable_embedded_metadata", fileMetadata.HasHumanReadableEmbeddedMetadataOption.Value!.Value);

            if (fileMetadata.HasIccProfileOption.IsSet)
                writer.WriteBoolean("has_icc_profile", fileMetadata.HasIccProfileOption.Value!.Value);

            if (fileMetadata.HasTransparencyOption.IsSet)
                writer.WriteBoolean("has_transparency", fileMetadata.HasTransparencyOption.Value!.Value);

            if (fileMetadata.KnownUrlsOption.IsSet)
            {
                writer.WritePropertyName("known_urls");
                JsonSerializer.Serialize(writer, fileMetadata.KnownUrls, jsonSerializerOptions);
            }
            if (fileMetadata.RatingsOption.IsSet)
            {
                writer.WritePropertyName("ratings");
                JsonSerializer.Serialize(writer, fileMetadata.Ratings, jsonSerializerOptions);
            }
            if (fileMetadata.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, fileMetadata.Tags, jsonSerializerOptions);
            }
            if (fileMetadata.FileViewingStatisticsOption.IsSet)
            {
                writer.WritePropertyName("file_viewing_statistics");
                JsonSerializer.Serialize(writer, fileMetadata.FileViewingStatistics, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The FileMetadataSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(FileMetadata))]
    public partial class FileMetadataSerializationContext : JsonSerializerContext { }
}
